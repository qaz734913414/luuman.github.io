<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Luuman&#39;s Blog</title>
  <subtitle>因为有了危机感，所以会义无反顾。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://luuman.github.io/"/>
  <updated>2017-05-02T02:35:54.000Z</updated>
  <id>http://luuman.github.io/</id>
  
  <author>
    <name>世平阜康</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sublime Mac 快捷键</title>
    <link href="http://luuman.github.io/2017/03/21/Tool/Sublime/sublimeMac/"/>
    <id>http://luuman.github.io/2017/03/21/Tool/Sublime/sublimeMac/</id>
    <published>2017-03-21T10:29:20.000Z</published>
    <updated>2017-05-02T02:35:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h3 id="符号说明"><a href="#符号说明" class="headerlink" title="符号说明"></a>符号说明</h3><p>⌘：command<br>⌃：control<br>⌥：option<br>⇧：shift<br>↩：enter<br>⌫：delete</p>
<h3 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h3><pre><code>⌃ + ⇧ + T：打开文件夹控制台
⌘ + ⌥ + ⌃ + -&gt;：网易云下一曲
⌘ + ⌥ + ⌃ + &lt;-：网易云上一曲
⌘ + ⌥ + P：网易云暂停k
</code></pre><h3 id="通用（General）"><a href="#通用（General）" class="headerlink" title="通用（General）"></a>通用（General）</h3><pre><code>↑↓←→：上下左右移动光标，注意不是不是KJHL！
Alt：调出菜单
</code></pre><h3 id="整理（clear）"><a href="#整理（clear）" class="headerlink" title="整理（clear）"></a>整理（clear）</h3><pre><code>Tab：缩进：自动完成
Shift+Tab：去除缩进
Ctrl+KT：折叠属性
Ctrl+K0：展开所有
</code></pre><h3 id="窗口（Window）"><a href="#窗口（Window）" class="headerlink" title="窗口（Window）"></a>窗口（Window）</h3><pre><code>⌘ + 1、2、3：切换文件
</code></pre><h3 id="移动（Move）"><a href="#移动（Move）" class="headerlink" title="移动（Move）"></a>移动（Move）</h3><pre><code>⌘ + &lt;-：行首
⌘ + -&gt;：行尾
⌘ + ↑：头部
⌘ + ↓：尾部
⌘ + ⇧ + ↑：向上全选
⌘ + ⇧ + ↓：向下全选
⌘ + ⌃ + ↑/↓：移动当前行
Ctrl+←/→：进行逐词移动
</code></pre><!--     Ctrl+Shift+←/→进行逐词选择
    Ctrl+↑/↓移动当前显示区域
    Ctrl+Shift+↑/↓移动当前行
    Ctrl+D：选择当前光标所在的词并高亮该词所有出现的位置，再次Ctrl+D选择该词出现的下一个位置，在多重选词的过程中，使用Ctrl+K进行跳过，使用Ctrl+U进行回退，使用Esc退出多重
### 编辑
    Ctrl+Shift+L：将当前选中区域打散
### 文件（File）
    Ctrl+N：在当前窗口创建一个新标签
    Ctrl+O：打开文件
    Ctrl+Shift+T：打开最近关闭的文件
    Ctrl+S：保存
    Ctrl+Shift+S：另存为
    Ctrl+Shift+N：创建新窗口
    Ctrl+Shift+W：关闭窗口
    Ctrl+W：关闭当前标签，当窗口内没有标签时会关闭该窗口
### 编辑（Edit）
    Ctrl+Z：撤销
    Ctrl+Y：恢复
### 取消选择（Undo Selection）
    Ctrl+U：智能撤销
    Ctrl+ Shift+U：智能重做
    Ctrl+ Shift+V：粘贴并缩进
    Ctrl+K，Ctrl+V：
### 行（Line）
    Ctrl +]：缩进
    Ctrl +[：反缩进
    Ctrl + Shift + Up：上移一行 
    Ctrl + Shift + Down：下移一行
    Ctrl + Shift + D：复制行(加倍)
    Ctrl + Shift + K：删除行
    Ctrl + J：连接行
### 文本（Text）
    Ctrl+Shift+Enter：在当前行上面增加一行并跳至该行
    Ctrl+Alt+Enter：替换所有关键字匹配
    Ctrl+Enter：在当前行下面新增一行然后跳至该行
    Ctrl+Delete：删除单词前部
    Ctrl+Backspace：删除单词后部
    Ctrl+K，Ctrl+K：从光标处删除至行尾
    Ctrl+K+Backspace：从光标处删除至行首
    Ctrl+T：前后调转
### 注释（Comment）
    Ctrl+/：注释（如已选择内容，同“Ctrl+Shift+/”效果）
    Ctrl+Shift：/：块注释(注释已选择内容)
    Ctrl+Alt+/：块注释，并Focus到首行，写注释说明用的
### 标签（Tag）
    Alt+.：闭合当前标签
    Ctrl+Shift+A：选择标签(可重复)
    Ctrl+Shift+W：选择区域被标签包含
### （Mark）
    Ctrl+K， Alt+Space：设置记号
    Ctrl+K，Alt+A：选择到记号
    Ctrl+K，Alt+W：删除到记号
    Ctrl+K，Alt+S：交换(移动)记号
    Ctrl+K，Alt+G：移除记号
    Ctrl+K，Alt+Y：Yank
    Ctrl+K，Alt+J：取消所有折叠
### 代码折叠（Code Folding）
    Ctrl+Shift+[：折叠代码
    Ctrl+Shift+]：展开代码
    （Convert Case）
    Ctrl+K，Ctrl+U：改为大写
    Ctrl+K，Ctrl+L：改为小写
### （Wrap）
    Alt+Q：
    Ctrl+Space：显示提示
    F9：按行排序
    Ctrl+F9：按行排序(区分大小写)
### 选择（Selection）
    Ctrl+ Shift+L：分割为多光标(选择多行时)
    Ctrl+ Alt +Up：向上一行添加光标
    Ctrl+ Alt +Down：向下一行添加光标
    Escape单光标
### 扩展（Expand）
    Ctrl+A：全选
    Ctrl+L：选择整行（按住-继续选择下行）
    Ctrl+D：选词：（按住-继续选择下个相同的字符串）
    Ctrl+Shift+Space：快速选择当前作用域（Scope）的内容
    Ctrl+Shift+M：快速选择括号间的内容{}
    Ctrl+Shift+J：快速选择同缩进的内容
    Ctrl+Shift+A：选择光标位置父标签对儿
### 查找（Find）
    Ctrl+F：进行标准查找
    F3：跳至当前关键字下一个位置
    Shift+F3：跳到当前关键字上一个位置
    Ctrl +I：
    Ctrl +H：进行标准替换
    Ctrl+Shift+H：替换当前关键字
    Ctrl +F3：快速查询
    Alt +F3：选中当前关键字出现的所有位置
    Ctrl+D：快速查询下一个(多光标)
    Ctrl+K，Ctrl+D：快速查询跳过下一个(多光标)
    Ctrl+E：字
    Ctrl+Shift+E：字
    Ctrl+Shift+F：多文件搜索&替换
### 视图（View）
    Ctrl+K，Ctrl+B：侧边栏开关Side Bar
    Ctrl+`：调出控制台
    F11：切换普通全屏
    Shift+F11：切换无干扰全屏
    Alt+Shift+2：进行左右分屏
    Alt+Shift+5：进行上下左右分屏
    Alt+Shift+8：进行上下分屏。
    分屏，使用Ctrl+数字键跳转到指定屏，使用Ctrl+Shift+数字键将当前屏移动到指定屏
### 组（Group）：
    Ctrl+K，Ctrl+Up：
    Ctrl+K，Ctrl+ Shift+ Up：
    Ctrl+K，Ctrl+Down：
### 焦点小组（Focus Group）：
    Ctrl+K，Ctrl+Right：
    Ctrl+K，Ctrl+ Left：
    Ctrl+1：组间切换焦点
    Ctrl+ Shift +1：移动文件到组
    Syntax语法和文件类型、indentation缩排、Line Endings行尾结束符号
    F6：拼写检查
    Ctrl + F6：下一个错误
    Ctrl+Shift+ F6：上一个错误
### 跳转（Goto）
    Ctrl+P：跳转到指定文件
    Ctrl+R：跳转到指定符号
    Ctrl+Shift+R：
    F12：
    Ctrl+G：跳转到指定行号
    Alt+-：跳转到底部
    Alt+Shift +-：
### 文件开关（Switch File）
    Ctrl+Pagedown：下一个文件
    Ctrl+Pageup：上一个文件
    Ctrl+Tab：下一个文件(stack)
    Ctrl+Shift + Tab：上一个文件(stack)
    Alt+O：
    Alt+1：最近打开文件
### 滚动（Scroll）
    Ctrl+K，Ctrl+C：滚动到光标处
    Ctrl+Up：向上滚动一行(定光标)
    Ctrl+Down：向下滚动一行(定光标)
### 书签（Boolmarks）
    Ctrl+F2：设置书签
    F2：下一个书签
    Shift+F2：上一个书签
    Ctrl+Shift+F2：清除书签
    Alt+F2：全选书签
    Ctrl+M：在起始括号和结尾括号间切换
### 工具（Tools）
    Ctrl+Shift+P：调出命令板（Command Palette）
    Ctrl +B：
    Ctrl+Shift+B：
    Ctrl +Break：
    F4：
    Shift+ F4：
    Ctrl +Q：
    Ctrl+Shift+Q：
### 项目（Project）
    Ctrl+Alt+P：切换项目

#### 首选项（Preferences）
    Ctrl+ Keypad Plus：
    Ctrl+Shift+Keypad Plus：
    Help（帮助）


### Chrome
    ⌘ + ⌥ + J：调试工具
    ⌘ + 1、2、3：切换文件
    ⌘ + ⌥ + L：下载
    ⌘ + R：刷新

#### 标签页和窗口快捷键
    ⌘-N 打开新窗口。
    ⌘-T 打开新标签页。
    ⌘-Shift-N   在隐身模式下打开新窗口。
    按 ⌘-O，然后选择文件。   在 Chrome 浏览器中打开计算机中的文件。
    按住 ⌘ 的同时点击链接。或用鼠标中键（或鼠标滚轮）点击链接。 从后台在新标签页中打开链接。
    按住 ⌘-Shift 的同时点击链接。或按住 Shift 键的同时用鼠标中键（或鼠标滚轮）点击链接。  在新标签页中打开链接并切换到刚打开的标签页。
    按住 Shift 键的同时点击链接。  在新窗口中打开链接。
    ⌘-Shift-T   重新打开上次关闭的标签页。Chrome 浏览器可记住最近关闭的 10 个标签页。
    将标签页拖出标签栏。  在新窗口中打开标签页。
    将标签页从标签栏拖到现有窗口中。    在现有窗口中打开标签页。
    同时按 ⌘-Option 和向右箭头键。    切换到下一个标签页。
    同时按 ⌘-Option 和向左箭头键。    切换到上一个标签页。
    ⌘-W 关闭当前标签页或弹出窗口。
    ⌘-Shift-W   关闭当前窗口。
    点击并按住浏览器工具栏中的后退或前进箭头。   在新标签页中显示浏览历史记录。
    按 Delete 或 ⌘-[  转到当前标签页的上一页浏览历史记录。
    按 Shift-Delete 或 ⌘-]    转到当前标签页的下一页浏览历史记录。
    按住 Shift 键的同时点击窗口左上角的 + 按钮。 最大化窗口。
    ⌘-M 最小化窗口。
    ⌘-H 隐藏 Chrome 浏览器。
    ⌘-Option-H  隐藏其他所有窗口。
    ⌘-Q 关闭 Chrome 浏览器。

#### Chrome 浏览器功能快捷键

    ⌘-Shift-B   打开和关闭书签栏。
    ⌘-Option-B  打开书签管理器。
    ⌘-, 打开“偏好设置”对话框。
    ⌘-Y 打开“历史记录”页。
    ⌘-Shift-J   打开“下载内容”页。
    ⌘-Shift-Delete  打开“清除浏览数据”对话框。

#### 地址栏快捷键

    键入搜索字词，然后按 Enter 键。 使用默认搜索引擎进行搜索。
    键入搜索引擎关键字，按空格键，然后键入搜索字词，再按 Enter 键。 使用与关键字相关联的搜索引擎进行搜索。
    首先键入搜索引擎网址，然后在系统提示时按 Tab 键，键入搜索字词，再按 Enter 键。   使用与网址相关联的搜索引擎进行搜索。
    键入网址，然后按 ⌘-Enter。   在新后台标签页中打开网址。
    ⌘-L 突出显示网址。
    ⌘-Option-F  在地址栏中输入“?”。在问号后键入搜索字词可用默认搜索引擎执行搜索。
    同时按 Option 和向左箭头键。  将光标移到地址栏中的前一个关键字词
    同时按 Option 和向右箭头键。  在地址栏中将光标移到下一个关键字词
    同时按 Shift-Option 和向左箭头键。    在地址栏中突出显示上一关键字词
    同时按 Shift-Option 和向右箭头键。    在地址栏中突出显示下一关键字词
    ⌘-Delete    在地址栏中删除光标前的字词
    在地址栏菜单中按 Page Up 或 Page Down。   在菜单中选择上一条目或下一条目。

#### 网页快捷键

    ⌘-P 打印当前网页。
    ⌘-Shift-P   打开“网页设置”对话框。
    ⌘-S 保存当前网页。
    ⌘-Shift-I   通过电子邮件发送当前网页。
    ⌘-R 重新载入当前网页。
    ⌘-, 停止载入当前网页。
    ⌘-F 打开查找栏。
    ⌘-G 在查找栏中查找下一条与输入内容相匹配的内容。
    ⌘-Shift-G 或 Shift-Enter 在查找栏中查找上一条与输入内容相匹配的内容。
    ⌘-E 使用所选内容查找。
    ⌘-J 跳到所选内容。
    ⌘-Option-I  打开“开发人员工具”。
    ⌘-Option-J  打开“JavaScript 控制台”。
    ⌘-Option-U  打开当前网页的源代码。
    按住 Option 键，然后点击链接。 下载链接目标。
    将链接拖到书签栏中。  将链接保存为书签。
    ⌘-D 将当前网页保存为书签。
    ⌘-Shift-D   将所有打开的标签页以书签的形式保存在新文件夹中。
    ⌘-Shift-F   在全屏模式下打开网页。再按一次 ⌘-Shift-F 可退出全屏模式。
    ⌘-+ 放大网页上的所有内容。
    ⌘ 和 -   缩小网页上的所有内容。
    ⌘-0 将网页上的所有内容恢复到正常大小。
    ⌘-Shift-H   在当前标签页中打开主页。
    空格键 向下滚动网页。
    ⌘-Option-F  搜索网页。

#### 文本快捷键

    ⌘-C 将突出显示的内容复制到剪贴板中。
    ⌘-Option-C  将您正在查看的网页的网址复制到剪贴板中。
    ⌘-V 从剪贴板中粘贴内容。
    ⌘-Shift-Option-V    粘贴内容并应用周围文本的格式。
    ⌘-X 或 Shift-Delete  删除突出显示的内容并将其复制到剪贴板中。
    ⌘-Z 撤消最后一步操作。
    ⌘-Shift-Z   重复最后一步操作。
    ⌘-X 删除突出显示的内容并将其保存到剪贴板中（剪切）。
    ⌘-A 选择当前网页上的所有文本。
    ⌘-: 打开“拼写和语法”对话框。
    ⌘-; 检查当前网页上的拼写和语法。 -->]]></content>
    
    <summary type="html">
    
      来到GitHub这么长时间，才开始真真的了解GitHub，这个国外的代码托管平台，充满着大牛的身影。
    
    </summary>
    
      <category term="Tool" scheme="http://luuman.github.io/categories/Tool/"/>
    
    
      <category term="Sublime" scheme="http://luuman.github.io/tags/Sublime/"/>
    
  </entry>
  
  <entry>
    <title>React初探</title>
    <link href="http://luuman.github.io/2017/02/14/FrontFrame/React/React/"/>
    <id>http://luuman.github.io/2017/02/14/FrontFrame/React/React/</id>
    <published>2017-02-14T10:29:00.000Z</published>
    <updated>2017-03-20T03:04:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><p>React 起源于 Facebook 的内部F8项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。<br>React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。<br>React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。E6语法。</p>
<h3 id="React-特点"><a href="#React-特点" class="headerlink" title="React 特点"></a>React 特点</h3><ol>
<li>声明式设计 −React采用声明范式，可以轻松描述应用。</li>
<li>高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。</li>
<li>灵活 −React可以与已知的库或框架很好地配合。</li>
<li>JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。</li>
<li>组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。</li>
<li>单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。</li>
</ol>
<ul>
<li><a href="http://facebook.github.io/react/" target="_blank" rel="external">官网地址</a><a id="more"></a>
</li>
</ul>
<h2 id="简单Demo"><a href="#简单Demo" class="headerlink" title="简单Demo"></a>简单Demo</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello React!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://static.runoob.com/assets/react/react-0.14.7/build/react.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://static.runoob.com/assets/react/react-0.14.7/build/react-dom.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://static.runoob.com/assets/react/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line">		ReactDOM.render(</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</div><div class="line">			<span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</div><div class="line">		);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>实例中我们引入了三个库： react.min.js 、react-dom.min.js 和 browser.min.js：<br>react.min.js - React 的核心库<br>react-dom.min.js - 提供与 DOM 相关的功能<br>browser.min.js - 用于将 JSX 语法转为 JavaScript 语法</p>
<h3 id="React代码"><a href="#React代码" class="headerlink" title="React代码"></a>React代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="React-JSX语法"><a href="#React-JSX语法" class="headerlink" title="React JSX语法"></a>React JSX语法</h2><p>React 使用 JSX 来替代常规的 JavaScript。JSX 是一个看起来很像 XML 的 JavaScript 语法扩展。我们不需要一定使用 JSX，但它有以下优点：</p>
<blockquote>
<p>JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化。<br>它是类型安全的，在编译过程中就能发现错误。<br>使用 JSX 编写模板更加简单快速。</p>
</blockquote>
<h3 id="简单嵌套元素"><a href="#简单嵌套元素" class="headerlink" title="简单嵌套元素"></a>简单嵌套元素</h3><p>JSX 看起来类似 HTML ，我们可以看下实例:<br>ReactDOM.render方法接受两个参数：<br>一个虚拟 DOM 节点和一个真实 DOM 节点，作用是将虚拟 DOM 挂载到真实 DOM。</p>
<h4 id="实例：Hello-world"><a href="#实例：Hello-world" class="headerlink" title="实例：Hello, world!"></a>实例：Hello, world!</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ReactDOM.render(content,element);</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">'example'</span>));</div></pre></td></tr></table></figure>
<p><a href="demo/index1.html">index1</a></p>
<h3 id="复杂嵌套元素"><a href="#复杂嵌套元素" class="headerlink" title="复杂嵌套元素"></a>复杂嵌套元素</h3><p>我们可以在以上代码中嵌套多个 HTML 标签，需要使用一个 div 元素包裹它，实例中的 p 元素添加了自定义属性 data-myattribute，添加自定义属性需要使用 data- 前缀。</p>
<h4 id="实例：文字"><a href="#实例：文字" class="headerlink" title="实例：文字"></a>实例：文字</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎学习 React<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">data-myattribute</span> = <span class="string">"somevalue"</span>&gt;</span>这是一个很不错的 JavaScript 库!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</div><div class="line">    mountNode</div><div class="line">);</div></pre></td></tr></table></figure>
<p><a href="demo/index2.html">index2</a></p>
<h3 id="JavaScript-表达式"><a href="#JavaScript-表达式" class="headerlink" title="JavaScript 表达式"></a>JavaScript 表达式</h3><p>我们可以在 JSX 中使用 JavaScript 表达式。表达式写在花括号 {} 中。实例如下：</p>
<h4 id="实例：计算"><a href="#实例：计算" class="headerlink" title="实例：计算"></a>实例：计算</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml">ReactDOM.render(</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="template-variable">&#123;1+1&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>,mountNode</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p><a href="demo/index3.html">index3</a></p>
<blockquote>
<p>判断语句</p>
</blockquote>
<p>在 JSX 中不能使用 if else 语句，但可以使用 conditional (三元运算) 表达式来替代。以下实例中如果变量 i 等于 1 浏览器将输出 true, 如果修改 i 的值，则会输出 false.</p>
<h4 id="实例：判断"><a href="#实例：判断" class="headerlink" title="实例：判断"></a>实例：判断</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> i = <span class="number">1</span>;</div><div class="line">ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;i == 1 ? 'True!' : 'False'&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</div><div class="line">    mountNode</div><div class="line">);</div></pre></td></tr></table></figure>
<p><a href="demo/index4.html">index4</a></p>
<h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>React 推荐使用内联样式。我们可以使用 camelCase 语法来设置内联样式. React 会在指定元素数字后自动添加 px 。以下实例演示了为 h1 元素添加 myStyle 内联样式：</p>
<h4 id="实例：CSS样式"><a href="#实例：CSS样式" class="headerlink" title="实例：CSS样式"></a>实例：CSS样式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> myStyle = &#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">100</span>,</div><div class="line">    <span class="attr">lineHeight</span>: <span class="string">'30px'</span>,</div><div class="line">    <span class="attr">color</span>: <span class="string">'#FF0000'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span> = <span class="string">&#123;myStyle&#125;</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,mountNode</div><div class="line">);</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span> = <span class="string">&#123;&#123;fontSize:</span> <span class="attr">100</span>,<span class="attr">lineHeight:</span> '<span class="attr">30px</span>',<span class="attr">color:</span> '#<span class="attr">FF0000</span>'&#125;&#125;&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,mountNode);</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span> = <span class="string">'class_name'</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,mountNode);</div></pre></td></tr></table></figure>
<p><a href="demo/index5.html">index5</a></p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>注释需要写在花括号中，实例如下：</p>
<h3 id="实例：注释"><a href="#实例：注释" class="headerlink" title="实例：注释"></a>实例：注释</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="xml">ReactDOM.render(</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="template-tag">&#123;/*注释<span class="name">...</span>*/&#125;</span><span class="xml"></span></div><div class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,mountNode</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="React-Component组件"><a href="#React-Component组件" class="headerlink" title="React.Component组件"></a>React.Component组件</h2><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><h3 id="HTML-标签-vs-React-组件"><a href="#HTML-标签-vs-React-组件" class="headerlink" title="HTML 标签 vs. React 组件"></a>HTML 标签 vs. React 组件</h3><p>React 可以渲染 HTML 标签 (strings) 或 React 组件 (classes)。要渲染 HTML 标签，只需在 JSX 里使用小写字母的标签名。<br>要渲染 React 组件，只需创建一个大写字母开头的本地变量。</p>
<h4 id="实例：创建组件"><a href="#实例：创建组件" class="headerlink" title="实例：创建组件"></a>实例：创建组件</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DivElement</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div className=<span class="string">"foo"</span>&gt;arr&lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">DivElement</span> /&gt;, mountNode);</div></pre></td></tr></table></figure>
<h4 id="实例：组件嵌套"><a href="#实例：组件嵌套" class="headerlink" title="实例：组件嵌套"></a>实例：组件嵌套</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> &lt;div className=<span class="string">"MyComponent"</span>&gt;arr&lt;/div&gt;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DivElement</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> &lt;<span class="type">MyComponent</span> /&gt;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">DivElement</span> /&gt;, mountNode);</div></pre></td></tr></table></figure>
<p>React 的 JSX 使用大、小写的约定来区分本地组件的类和 HTML 标签。</p>
<blockquote>
<p>注意:<br>由于 JSX 就是 JavaScript，一些标识符像 class 和 for 不建议作为 XML 属性名。作为替代，React DOM 使用 className 和 htmlFor 来做对应的属性。</p>
</blockquote>
<h4 id="实例：组件语法"><a href="#实例：组件语法" class="headerlink" title="实例：组件语法"></a>实例：组件语法</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> &lt;div className=<span class="string">"HelloMessage"</span>&gt;arr&lt;/div&gt;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div className=<span class="string">"HelloMessage"</span>&gt;arr&lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>React.Component方法用于生成一个组件类 HelloMessage。<hellomessage> 实例组件类并输出信息。</hellomessage></p>
<blockquote>
<p>注意：原生 HTML 元素名以小写字母开头，而自定义的 React 类名以大写字母开头，比如 HelloMessage 不能写成 helloMessage。除此之外还需要注意组件类只能包含一个顶层标签，否则也会报错。<br>如果我们需要向组件传递参数，可以使用 this.props 对象,实例如下：</p>
</blockquote>
<h4 id="实例：获取父元素的值"><a href="#实例：获取父元素的值" class="headerlink" title="实例：获取父元素的值"></a>实例：获取父元素的值</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DivElement</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div className=<span class="string">"foo"</span>&gt;&#123;<span class="keyword">this</span>.props.name&#125;&lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">DivElement</span> name=<span class="string">"Runoob"</span> /&gt;, mountNode);</div></pre></td></tr></table></figure>
<p>以上实例中 name 属性通过 this.props.name 来获取（自身的数字）。<br>注意，在添加属性时， class 属性需要写成 className ，for 属性需要写成 htmlFor ，这是因为 class 和 for 是 JavaScript 的保留字。</p>
<h3 id="复合组件"><a href="#复合组件" class="headerlink" title="复合组件"></a>复合组件</h3><p>通过创建多个组件来合成一个组件，即把组件的不同功能点进行分离。<br>以下实例我们实现了输出网站名字和网址的组件：</p>
<h4 id="实例：链接"><a href="#实例：链接" class="headerlink" title="实例：链接"></a>实例：链接</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSite</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div className=&#123;<span class="keyword">this</span>.props.name&#125;&gt;&lt;<span class="type">Name</span> name=&#123;<span class="keyword">this</span>.props.name&#125; /&gt;&lt;<span class="type">Link</span> site=&#123;<span class="keyword">this</span>.props.site&#125; /&gt;&lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;h1&gt;&#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;a href=&#123;<span class="keyword">this</span>.props.site&#125;&gt;&#123;<span class="keyword">this</span>.props.site&#125;&lt;/a&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">WebSite</span> name=<span class="string">"菜鸟教程"</span> site=<span class="string">" http://www.runoob.com"</span> /&gt;, mountNode);</div></pre></td></tr></table></figure>
<h2 id="React-State-状态"><a href="#React-State-状态" class="headerlink" title="React State(状态)"></a>React State(状态)</h2><p>把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。</p>
<h3 id="constructor-初始状态"><a href="#constructor-初始状态" class="headerlink" title="constructor()初始状态"></a>constructor()初始状态</h3><h4 id="实例：点击喜欢-amp-不喜欢"><a href="#实例：点击喜欢-amp-不喜欢" class="headerlink" title="实例：点击喜欢&amp;不喜欢"></a>实例：点击喜欢&amp;不喜欢</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LikeButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.state =&#123;<span class="attr">liked</span>: <span class="literal">false</span>&#125;;</div><div class="line">    &#125;</div><div class="line">    handleClick() &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;</div><div class="line">            <span class="attr">liked</span>: !<span class="keyword">this</span>.state.liked</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">let</span> text = <span class="keyword">this</span>.state.liked ? <span class="string">'喜欢'</span> : <span class="string">'不喜欢'</span>;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick.bind(this)&#125;</span>&gt;</span>你<span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span>我。点我切换状态。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">LikeButton</span> /&gt;</span>, mountNode);</span></div></pre></td></tr></table></figure>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">handleClick = ()=&gt;&#123;</div><div class="line">    this.<span class="built_in">set</span>State(&#123;</div><div class="line">        liked: !this.<span class="keyword">state</span>.liked</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>constructor是组件的构造函数，会在创建实例时自动调用。<br>…args表示组件参数，super(…args)是 ES6 规定的写法。<br>this.state对象用来存放内部状态，这里是定义初始状态，也就是一个对象，这个对象可以通过 this.state 属性读取。当用户点击组件，导致状态变化，this.setState 方法就修改状态值，每次修改以后，自动调用 this.render 方法，再次渲染组件。<br>onClick={this.handleClick.bind(this)}绑定事件，返回参数。<br>e.target.value绑定事件后的返回值。</p>
<h4 id="实例：输入文字实时显示"><a href="#实例：输入文字实时显示" class="headerlink" title="实例：输入文字实时显示"></a>实例：输入文字实时显示</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTitle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    constructor() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.state =&#123;name: <span class="symbol">'can</span> you speek <span class="type">English</span>!'&#125;;</div><div class="line">    &#125;</div><div class="line">    handleChange(e) &#123;</div><div class="line">        let name = e.target.value;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;</div><div class="line">            name: name</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"text"</span> onChange=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)&#125; /&gt;</div><div class="line">                &lt;p&gt;luuman,&#123;<span class="keyword">this</span>.state.name&#125;&lt;/p&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">MyTitle</span> /&gt;, mountNode);</div></pre></td></tr></table></figure>
<h2 id="React-Props"><a href="#React-Props" class="headerlink" title="React Props"></a>React Props</h2><p>props通过组件获取数据</p>
<h3 id="基础语法-1"><a href="#基础语法-1" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="实例：数据传递"><a href="#实例：数据传递" class="headerlink" title="实例：数据传递"></a>实例：数据传递</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span> &lt;h1&gt;<span class="type">Hello</span> &#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">ReactDOM</span>.render(</div><div class="line">	&lt;<span class="type">HelloMessage</span> name=<span class="string">"Runoob"</span> /&gt;,mountNode</div><div class="line">);</div></pre></td></tr></table></figure>
<p>实例中 name 属性通过 this.props.name 来获取。</p>
<h3 id="defaultProps默认值"><a href="#defaultProps默认值" class="headerlink" title="defaultProps默认值"></a>defaultProps默认值</h3><p>默认Props：你可以通过defaultProps()方法为props设置默认值，实例如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">return</span> &lt;h1&gt;<span class="type">Hello</span> &#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">HelloMessage</span>.defaultProps = &#123;</div><div class="line">    name: <span class="symbol">'Runoo</span>b'</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloMessage</span> /&gt;,mountNode);</div></pre></td></tr></table></figure></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSite</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div className=&#123;<span class="keyword">this</span>.props.name&#125;&gt;&lt;<span class="type">Name</span> name=&#123;<span class="keyword">this</span>.props.name&#125; /&gt;&lt;<span class="type">Link</span> site=&#123;<span class="keyword">this</span>.props.site&#125; /&gt;&lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">WebSite</span>.defaultProps =&#123;</div><div class="line">	name: <span class="string">"菜鸟教程"</span>,</div><div class="line">	site: <span class="string">"http://www.runoob.com"</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;h1&gt;&#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;a href=&#123;<span class="keyword">this</span>.props.site&#125;&gt;&#123;<span class="keyword">this</span>.props.site&#125;&lt;/a&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">WebSite</span> /&gt;, mountNode);</div></pre></td></tr></table></figure>
<h3 id="this-props-children"><a href="#this-props-children" class="headerlink" title="this.props.children"></a>this.props.children</h3><h4 id="实例：点击次数"><a href="#实例：点击次数" class="headerlink" title="实例：点击次数"></a>实例：点击次数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotesList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">return</span>(</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;</span></div><div class="line">                React.Children.map(this.props.children,function(child)&#123;</div><div class="line">                    console.log(child);</div><div class="line">                    return <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                &#125;)</div><div class="line">            &#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">NotesList</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">NotesList</span>&gt;</span>,</div><div class="line">    mountNode</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="PropTypes验证"><a href="#PropTypes验证" class="headerlink" title="PropTypes验证"></a>PropTypes验证</h3><p>Props 使用propTypes，它可以保证我们的应用组件被正确使用，React.PropTypes 提供很多验证器 (validator) 来验证传入数据是否有效。当向 props 传入无效数据时，JavaScript 控制台会抛出警告。</p>
<h4 id="实例：判断组件属性title是否为字符串："><a href="#实例：判断组件属性title是否为字符串：" class="headerlink" title="实例：判断组件属性title是否为字符串："></a>实例：判断组件属性title是否为字符串：</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const name = <span class="number">123</span>;</div><div class="line">console.log(name);</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">return</span> &lt;h1&gt;<span class="type">Hello</span> &#123;<span class="keyword">this</span>.props.title&#125;&lt;/h1&gt;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">HelloMessage</span>.propTypes = &#123;</div><div class="line">    title: <span class="type">React</span>.<span class="type">PropTypes</span>.string</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloMessage</span> title=&#123;name&#125; /&gt;,mountNode);</div></pre></td></tr></table></figure>
<blockquote>
<p>如果 title 使用数字变量，控制台会出现以下错误信息：</p>
</blockquote>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Warning: Failed prop type: Invalid prop `title` <span class="keyword">of</span> type `number` supplied to `HelloMessage`, expected `string`.</div></pre></td></tr></table></figure>
<h3 id="PropTypes属性值"><a href="#PropTypes属性值" class="headerlink" title="PropTypes属性值"></a>PropTypes属性值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">.propTypes = &#123;</div><div class="line">	<span class="comment">// 可以声明 prop 为指定的 JS 基本数据类型，默认情况，这些数据是可选的</span></div><div class="line">	optionalArray: React.PropTypes.array,</div><div class="line">	<span class="attr">optionalBool</span>: React.PropTypes.bool,</div><div class="line">	<span class="attr">optionalFunc</span>: React.PropTypes.func,</div><div class="line">	<span class="attr">optionalNumber</span>: React.PropTypes.number,</div><div class="line">	<span class="attr">optionalObject</span>: React.PropTypes.object,</div><div class="line">	<span class="attr">optionalString</span>: React.PropTypes.string,</div><div class="line">	<span class="attr">optionalSymbol</span>: React.PropTypes.symbol,</div><div class="line"></div><div class="line">	<span class="comment">// 可以被渲染的对象 numbers, strings, elements 或 array</span></div><div class="line">	optionalNode: React.PropTypes.node,</div><div class="line"></div><div class="line">	<span class="comment">//  React 元素</span></div><div class="line">	optionalElement: React.PropTypes.element,</div><div class="line"></div><div class="line">	<span class="comment">// 用 JS 的 instanceof 操作符声明 prop 为类的实例。</span></div><div class="line">	optionalMessage: React.PropTypes.instanceOf(Message),</div><div class="line"></div><div class="line">	<span class="comment">// 用 enum 来限制 prop 只接受指定的值。</span></div><div class="line">	optionalEnum: React.PropTypes.oneOf([<span class="string">'News'</span>, <span class="string">'Photos'</span>]),</div><div class="line"></div><div class="line">	<span class="comment">// 可以是多个对象类型中的一个</span></div><div class="line">	optionalUnion: React.PropTypes.oneOfType([</div><div class="line">		React.PropTypes.string,</div><div class="line">		React.PropTypes.number,</div><div class="line">		React.PropTypes.instanceOf(Message)</div><div class="line">	]),</div><div class="line"></div><div class="line">	<span class="comment">// 指定类型组成的数组</span></div><div class="line">	optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),</div><div class="line"></div><div class="line">	<span class="comment">// 指定类型的属性构成的对象</span></div><div class="line">	optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),</div><div class="line"></div><div class="line">	<span class="comment">// 特定 shape 参数的对象</span></div><div class="line">	optionalObjectWithShape: React.PropTypes.shape(&#123;</div><div class="line">		<span class="attr">color</span>: React.PropTypes.string,</div><div class="line">		<span class="attr">fontSize</span>: React.PropTypes.number</div><div class="line">	&#125;),</div><div class="line"></div><div class="line">	<span class="comment">// 任意类型加上 `isRequired` 来使 prop 不可空。</span></div><div class="line">	requiredFunc: React.PropTypes.func.isRequired,</div><div class="line"></div><div class="line">	<span class="comment">// 不可空的任意类型</span></div><div class="line">	requiredAny: React.PropTypes.any.isRequired,</div><div class="line"></div><div class="line">	<span class="comment">// 自定义验证器。如果验证失败需要返回一个 Error 对象。不要直接使用 `console.warn` 或抛异常，因为这样 `oneOfType` 会失效。</span></div><div class="line">	customProp(props, propName, componentName) &#123;</div><div class="line">		<span class="keyword">if</span> (!<span class="regexp">/matchme/</span>.test(props[propName])) &#123;</div><div class="line">		    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</div><div class="line">				<span class="string">'Invalid prop `'</span> + propName + <span class="string">'` supplied to'</span> +</div><div class="line">				<span class="string">' `'</span> + componentName + <span class="string">'`. Validation failed.'</span></div><div class="line">		    );</div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">customArrayProp</span>: React.PropTypes.arrayOf(</div><div class="line">		<span class="function"><span class="keyword">function</span>(<span class="params">propValue, key, componentName, location, propFullName</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> (!<span class="regexp">/matchme/</span>.test(propValue[key])) &#123;</div><div class="line">			    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</div><div class="line">					<span class="string">'Invalid prop `'</span> + propFullName + <span class="string">'` supplied to'</span> +</div><div class="line">					<span class="string">' `'</span> + componentName + <span class="string">'`. Validation failed.'</span></div><div class="line">			    );</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="state和props区别"><a href="#state和props区别" class="headerlink" title="state和props区别"></a>state和props区别</h3><p>在于props是不可变的，而子组件只能通过props来获取数据。<br>而state可以根据与用户交互来改变。这就是为什么有些容器组件需要定义state来更新和修改数据。</p>
<p>以下实例演示了如何在应用中组合使用state和props。我们可以在父组件中设置state，并通过在子组件上使用props将其传递到子组件上。在render函数中,我们设置name和site来获取父组件传递过来的数据。</p>
<h4 id="实例：链接-1"><a href="#实例：链接-1" class="headerlink" title="实例：链接"></a>实例：链接</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSite</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	constructor(props) &#123;</div><div class="line">		<span class="keyword">super</span>(props);</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			name: <span class="string">"菜鸟教程"</span>,</div><div class="line">			site: <span class="string">"http://www.runoob.com"</span></div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span> &lt;div&gt;&lt;<span class="type">Name</span> name=&#123;<span class="keyword">this</span>.state.name&#125; /&gt;&lt;<span class="type">Link</span> site=&#123;<span class="keyword">this</span>.state.site&#125; /&gt;&lt;/div&gt;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span> &lt;h1&gt;&#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span> &lt;a href=&#123;<span class="keyword">this</span>.props.site&#125;&gt;&#123;<span class="keyword">this</span>.props.site&#125;&lt;/a&gt;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">WebSite</span> /&gt;,mountNode);</div></pre></td></tr></table></figure>
<h2 id="React-组件-API"><a href="#React-组件-API" class="headerlink" title="React 组件 API"></a>React 组件 API</h2><p>在本章节中我们将讨论 React 组件 API。</p>
<h3 id="基础语法-2"><a href="#基础语法-2" class="headerlink" title="基础语法"></a>基础语法</h3><h3 id="mixins去重"><a href="#mixins去重" class="headerlink" title="mixins去重"></a>mixins去重</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">const <span class="type">ExampleMixin</span> = &#123;</div><div class="line">    componentDidMount()&#123;</div><div class="line">        <span class="comment">// bind some event listeners here</span></div><div class="line">    &#125;</div><div class="line">    componentWillUnmount()&#123;</div><div class="line">        <span class="comment">// unbind those events here!</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	mixins: [<span class="type">ExampleMixin</span>];</div><div class="line">	render()&#123;&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnotherComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	mixins: [<span class="type">ExampleMixin</span>];</div><div class="line">	render()&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<!-- 设置状态:setState
setState(object nextState[, function callback])
参数说明
nextState，将要设置的新状态，该状态会和当前的state合并
callback，可选参数，回调函数。该函数会在setState设置成功，且组件重新渲染后调用。
合并nextState和当前state，并重新渲染组件。setState是React事件处理函数中和请求回调函数中触发UI更新的主要方法。
关于setState
不能在组件内部通过this.state修改状态，因为该状态会在调用setState()后被替换。
setState()并不会立即改变this.state，而是创建一个即将处理的state。setState()并不一定是同步的，为了提升性能React会批量执行state和DOM渲染。
setState()总是会触发一次组件重绘，除非在shouldComponentUpdate()中实现了一些条件渲染逻辑。 -->
<h4 id="实例：点击次数-1"><a href="#实例：点击次数-1" class="headerlink" title="实例：点击次数"></a>实例：点击次数</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	constructor()&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			clickCount: <span class="number">0</span></div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">	handleClick()&#123;</div><div class="line">		<span class="keyword">this</span>.setState(&#123;</div><div class="line">			clickCount: <span class="keyword">this</span>.state.clickCount +<span class="number">1</span></div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span> &lt;h2 onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)&#125;&gt;点我！点击次数为: &#123;<span class="keyword">this</span>.state.clickCount&#125;&lt;/h2&gt;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">Counter</span> /&gt;,mountNode);</div></pre></td></tr></table></figure>
<!-- 
实例中通过点击 h2 标签来使得点击计数器加 1。
替换状态：replaceState
replaceState(object nextState[, function callback])
nextState，将要设置的新状态，该状态会替换当前的state。
callback，可选参数，回调函数。该函数会在replaceState设置成功，且组件重新渲染后调用。
replaceState()方法与setState()类似，但是方法只会保留nextState中状态，原state不在nextState中的状态都会被删除。
设置属性：setProps
setProps(object nextProps[, function callback])
nextProps，将要设置的新属性，该状态会和当前的props合并
callback，可选参数，回调函数。该函数会在setProps设置成功，且组件重新渲染后调用。
设置组件属性，并重新渲染组件。
props相当于组件的数据流，它总是会从父组件向下传递至所有的子组件中。当和一个外部的JavaScript应用集成时，我们可能会需要向组件传递数据或通知ReactDOM.render()组件需要重新渲染，可以使用setProps()。
更新组件，我可以在节点上再次调用ReactDOM.render()，也可以通过setProps()方法改变组件属性，触发组件重新渲染。
替换属性：replaceProps
replaceProps(object nextProps[, function callback])
nextProps，将要设置的新属性，该属性会替换当前的props。
callback，可选参数，回调函数。该函数会在replaceProps设置成功，且组件重新渲染后调用。
replaceProps()方法与setProps类似，但它会删除原有
props
强制更新：forceUpdate
forceUpdate([function callback])
参数说明
callback，可选参数，回调函数。该函数会在组件render()方法调用后调用。
forceUpdate()方法会使组件调用自身的render()方法重新渲染组件，组件的子组件也会调用自己的render()。但是，组件重新渲染时，依然会读取this.props和this.state，如果状态没有改变，那么React只会更新DOM。
forceUpdate()方法适用于this.props和this.state之外的组件重绘（如：修改了this.state后），通过该方法通知React需要调用render()
一般来说，应该尽量避免使用forceUpdate()，而仅从this.props和this.state中读取状态并由React触发render()调用。
获取DOM节点：findDOMNode
DOMElement findDOMNode()
返回值：DOM元素DOMElement
如果组件已经挂载到DOM中，该方法返回对应的本地浏览器 DOM 元素。当render返回null 或 false时，this.findDOMNode()也会返回null。从DOM 中读取值的时候，该方法很有用，如：获取表单字段的值和做一些 DOM 操作。
判断组件挂载状态：isMounted
bool isMounted()
返回值：true或false，表示组件是否已挂载到DOM中
isMounted()方法用于判断组件是否已挂载到DOM中。可以使用该方法保证了setState()和forceUpdate()在异步场景下的调用不会出错。
本文参考：http://itbilu.com/javascript/react/EkACBdqKe.html -->
<h2 id="React-组件生命周期"><a href="#React-组件生命周期" class="headerlink" title="React 组件生命周期"></a>React 组件生命周期</h2><blockquote>
<p>组件的生命周期可分成三个状态：Mounting、Updating、Unmounting</p>
<h3 id="Mounting：已插入真实-DOM"><a href="#Mounting：已插入真实-DOM" class="headerlink" title="Mounting：已插入真实 DOM"></a>Mounting：已插入真实 DOM</h3></blockquote>
<h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor()"></a>constructor()</h4><h4 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount()"></a>componentWillMount()</h4><p>在渲染前调用,在客户端也在服务端。</p>
<h4 id="render"><a href="#render" class="headerlink" title="render()"></a>render()</h4><p>在渲染时调用</p>
<h4 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount()"></a>componentDidMount()</h4><p>在第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构，可以通过this.getDOMNode()来进行访问。<br>如果你想和其他JavaScript框架一起使用，可以在这个方法中调用setTimeout, setInterval或者发送AJAX请求等操作(防止异部操作阻塞UI)。</p>
<h3 id="Updating：正在被重新渲染"><a href="#Updating：正在被重新渲染" class="headerlink" title="Updating：正在被重新渲染"></a>Updating：正在被重新渲染</h3><h4 id="componentWillReceiveProps"><a href="#componentWillReceiveProps" class="headerlink" title="componentWillReceiveProps()"></a>componentWillReceiveProps()</h4><p>在组件接收到一个新的prop时被调用。这个方法在初始化render时不会被调用。</p>
<h4 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate()"></a>shouldComponentUpdate()</h4><p>返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用。<br>可以在你确认不需要更新组件时使用。</p>
<h4 id="componentWillUpdate"><a href="#componentWillUpdate" class="headerlink" title="componentWillUpdate()"></a>componentWillUpdate()</h4><p>在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用。</p>
<h4 id="render-1"><a href="#render-1" class="headerlink" title="render()"></a>render()</h4><h4 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate()"></a>componentDidUpdate()</h4><p>在组件完成更新后立即调用。在初始化时不会被调用。</p>
<h3 id="Unmounting：已移出真实-DOM"><a href="#Unmounting：已移出真实-DOM" class="headerlink" title="Unmounting：已移出真实 DOM"></a>Unmounting：已移出真实 DOM</h3><h4 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount()"></a>componentWillUnmount()</h4><p>在组件从 DOM 中移除的时候立刻被调用。</p>
<h4 id="实例：定时器，每隔100毫秒重新设置组件的透明度，并重新渲染"><a href="#实例：定时器，每隔100毫秒重新设置组件的透明度，并重新渲染" class="headerlink" title="实例：定时器，每隔100毫秒重新设置组件的透明度，并重新渲染"></a>实例：定时器，每隔100毫秒重新设置组件的透明度，并重新渲染</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	<span class="keyword">constructor</span>() &#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			<span class="attr">opacity</span>: <span class="number">1.0</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	componentDidMount()&#123;</div><div class="line">		<span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">let</span> opacity = <span class="keyword">this</span>.state.opacity;</div><div class="line">			opacity -= <span class="number">.05</span>;</div><div class="line">			<span class="keyword">if</span>(opacity &lt; <span class="number">.1</span>)&#123;</div><div class="line">				opacity = <span class="number">1.0</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">this</span>.setState(&#123;</div><div class="line">				<span class="attr">opacity</span>: opacity</div><div class="line">			&#125;)</div><div class="line"></div><div class="line">		&#125;.bind(<span class="keyword">this</span>),<span class="number">100</span>)</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;opacity:</span> <span class="attr">this.state.opacity</span>&#125;&#125;&gt;</span></span></div><div class="line">				Hello &#123;this.props.name&#125;</div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Hello</span> <span class="attr">name</span>=<span class="string">"world"</span> /&gt;</span>,mountNode);</span></div></pre></td></tr></table></figure>
<h4 id="实例：点击效果"><a href="#实例：点击效果" class="headerlink" title="实例：点击效果"></a>实例：点击效果</h4><p>以下实例初始化 state ， setNewnumber 用于更新 state。所有生命周期在 Content 组件中。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	<span class="keyword">constructor</span>() &#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			<span class="attr">data</span>:<span class="number">0</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	setNewNumber()&#123;</div><div class="line">		<span class="keyword">this</span>.setState(&#123;</div><div class="line">			<span class="attr">data</span>: <span class="keyword">this</span>.state.data + <span class="number">1</span></div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.setNewNumber.bind(this)&#125;</span>&gt;</span>INCREMENT<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">Content</span> <span class="attr">myNumber</span>=<span class="string">&#123;this.state.data&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Content</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Content</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	componentWillMount()&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'Component WILL MOUNT!'</span>)</div><div class="line">	&#125;</div><div class="line">	componentDidMount()&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'Component DID MOUNT!'</span>)</div><div class="line">	&#125;</div><div class="line">	componentWillReceiveProps(newProps) &#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'Component WILL RECEIVE PROPS!'</span>)</div><div class="line">	&#125;</div><div class="line">	shouldComponentUpdate(newProps, newState) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line">	componentWillUpdate(nextProps, nextState) &#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'Component WILL UPDATE!'</span>);</div><div class="line">	&#125;</div><div class="line">	componentDidUpdate(prevProps, prevState) &#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'Component DID UPDATE!'</span>)</div><div class="line">	&#125;</div><div class="line">	componentWillUnmount()&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'Component WILL UNMOUNT!'</span>)</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;this.props.myNumber&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Button</span> /&gt;</span>,mountNode);</span></div></pre></td></tr></table></figure></p>
<h4 id="实例：统计时间"><a href="#实例：统计时间" class="headerlink" title="实例：统计时间"></a>实例：统计时间</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">secondsElapsed</span>: <span class="number">0</span>&#125;;</div><div class="line">  &#125;</div><div class="line">  tick()&#123;</div><div class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState</span>) =&gt;</span> (&#123;</div><div class="line">      <span class="attr">secondsElapsed</span>: prevState.secondsElapsed + <span class="number">1</span></div><div class="line">    &#125;));</div><div class="line">  &#125;</div><div class="line">  componentDidMount()&#123;</div><div class="line">    <span class="keyword">this</span>.interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.tick(), <span class="number">1000</span>);</div><div class="line">  &#125;</div><div class="line">  componentWillUnmount()&#123;</div><div class="line">    clearInterval(<span class="keyword">this</span>.interval);</div><div class="line">  &#125;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Seconds Elapsed: &#123;this.state.secondsElapsed&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Timer</span> /&gt;</span>, mountNode);</span></div></pre></td></tr></table></figure>
<h2 id="Lists-and-Keys列表遍历"><a href="#Lists-and-Keys列表遍历" class="headerlink" title="Lists and Keys列表遍历"></a>Lists and Keys列表遍历</h2><p>JSX 允许在模板中插入数组，数组会自动展开所有成员：</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="xml">const arr = [</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>,</div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学的不仅是技术，更是梦想！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>,</div><div class="line">];</div><div class="line">ReactDOM.render(</div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="template-variable">&#123;arr&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>,mountNode</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p><a href="demo/index6.html">index6</a></p>
<h3 id="Array-map"><a href="#Array-map" class="headerlink" title="Array.map"></a>Array.map</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">const</span> doubled = numbers.map(<span class="function">(<span class="params"><span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> * <span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log(doubled);</div></pre></td></tr></table></figure>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">const numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line">const listItems = numbers.<span class="built_in">map</span>((number,<span class="built_in">key</span>) =&gt;</div><div class="line">	&lt;<span class="built_in">li</span> <span class="built_in">key</span>=&#123;<span class="built_in">key</span>&#125;&gt;&#123;number&#125;&lt;/<span class="built_in">li</span>&gt;</div><div class="line">);</div><div class="line">console.<span class="built_in">log</span>(listItems);</div><div class="line">ReactDOM.render(&lt;ul&gt;&#123;listItems&#125;&lt;/ul&gt;,mountNode);</div><div class="line"></div><div class="line">const listItems = numbers.<span class="built_in">map</span>(function(number,keys)&#123;</div><div class="line">	<span class="built_in">return</span>(</div><div class="line">		&lt;<span class="built_in">li</span> <span class="built_in">key</span>=&#123;keys&#125;&gt;</div><div class="line">			&#123;number&#125;</div><div class="line">		&lt;/<span class="built_in">li</span>&gt;</div><div class="line">	)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Array-forEach-遍历"><a href="#Array-forEach-遍历" class="headerlink" title="Array.forEach 遍历"></a>Array.forEach 遍历</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Array</span>.<span class="keyword">forEach</span>((e) =&gt; &#123;</div><div class="line">	alert(e);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">Array</span>.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</div><div class="line">	alert(e);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> repos = <span class="keyword">this</span>.state.data.items;</div><div class="line"><span class="keyword">let</span> repoList = [];</div><div class="line">repos.forEach(<span class="function">(<span class="params">p,keys</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> item = <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;keys&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;p.html_url&#125;</span>&gt;</span>&#123;p.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>(&#123;p.stargazers_count&#125; stars)<span class="tag">&lt;<span class="name">br</span> /&gt;</span>&#123;p.description&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</div><div class="line">	repoList.push(item);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">let</span> repos = <span class="keyword">this</span>.state.data.items;</div><div class="line"><span class="keyword">let</span> repoList = repos.map(<span class="function"><span class="keyword">function</span>(<span class="params">repo,index</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;repo.html_url&#125;</span>&gt;</span>&#123;repo.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>(&#123;repo.stargazers_count&#125; stars)<span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">            &#123;repo.description&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span>   </div><div class="line">    );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Array-splice-删除"><a href="#Array-splice-删除" class="headerlink" title="Array.splice 删除"></a>Array.splice 删除</h3><h3 id="Array-filter"><a href="#Array-filter" class="headerlink" title="Array.filter"></a>Array.filter</h3><p>方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</p>
<h3 id="Array-every"><a href="#Array-every" class="headerlink" title="Array.every"></a>Array.every</h3><h3 id="Array-push"><a href="#Array-push" class="headerlink" title="Array.push"></a>Array.push</h3><h2 id="Handling-Events绑定事件"><a href="#Handling-Events绑定事件" class="headerlink" title="Handling Events绑定事件"></a>Handling Events绑定事件</h2><h2 id="Forms表单"><a href="#Forms表单" class="headerlink" title="Forms表单"></a>Forms表单</h2><h3 id="基础语法-3"><a href="#基础语法-3" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="实例：输入文字实时显示-1"><a href="#实例：输入文字实时显示-1" class="headerlink" title="实例：输入文字实时显示"></a>实例：输入文字实时显示</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	constructor()&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			value: <span class="symbol">'Hello</span> <span class="type">World</span>!'</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">	handleChange(even)&#123;</div><div class="line">		<span class="keyword">this</span>.setState(&#123;</div><div class="line">			value: even.target.value</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		let value = <span class="keyword">this</span>.state.value;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			&lt;div&gt;</div><div class="line">				&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="symbol">'tex</span>t' value=&#123;value&#125; onChange=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)&#125; /&gt;</div><div class="line">				&lt;h4&gt;&#123;value&#125;&lt;/h4&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloMessage</span> /&gt;,mountNode);</div></pre></td></tr></table></figure>
<h4 id="实例：输入文字实时显示-2"><a href="#实例：输入文字实时显示-2" class="headerlink" title="实例：输入文字实时显示"></a>实例：输入文字实时显示</h4><p>你需要在父组件通过创建事件句柄 (handleChange) ，并作为 prop (updateStateProp) 传递到你的子组件上。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Content</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			&lt;div&gt;</div><div class="line">				&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="symbol">'tex</span>t' value=&#123;<span class="keyword">this</span>.props.myDataProp&#125; onChange=&#123;<span class="keyword">this</span>.props.updataStateProp&#125; /&gt;</div><div class="line">				&lt;h4&gt;&#123;<span class="keyword">this</span>.props.myDataProp&#125;&lt;/h4&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	constructor()&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			value: <span class="symbol">'Hello</span> <span class="type">World</span>!'</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">	handleChange(even)&#123;</div><div class="line">		<span class="keyword">this</span>.setState(&#123;</div><div class="line">			value: even.target.value</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		let value = <span class="keyword">this</span>.state.value;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			&lt;div&gt;</div><div class="line">				&lt;<span class="type">Content</span> myDataProp=&#123;value&#125; updataStateProp=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)&#125; /&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloMessage</span> /&gt;,mountNode);</div></pre></td></tr></table></figure></p>
<h4 id="实例：点我"><a href="#实例：点我" class="headerlink" title="实例：点我"></a>实例：点我</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	<span class="keyword">constructor</span>()&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state=&#123;</div><div class="line">			<span class="attr">value</span>: <span class="string">'Hello World!'</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	handleChange(event)&#123;</div><div class="line">		<span class="keyword">this</span>.setState(&#123;</div><div class="line">			<span class="attr">value</span>: <span class="string">'luuman is good man!'</span></div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">let</span> value = <span class="keyword">this</span>.state.value;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleChange.bind(this)&#125;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">HelloMessage</span> /&gt;</span>,mountNode);</span></div></pre></td></tr></table></figure>
<p>当你需要从子组件中更新父组件的 state 时，你需要在父组件通过创建事件句柄 (handleChange) ，并作为 prop (updateStateProp) 传递到你的子组件上。实例如下：</p>
<h4 id="实例：点我-1"><a href="#实例：点我-1" class="headerlink" title="实例：点我"></a>实例：点我</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Content</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			&lt;div&gt;</div><div class="line">				&lt;button onClick=&#123;<span class="keyword">this</span>.props.updateStateProp&#125;&gt;点我&lt;/button&gt;</div><div class="line">				&lt;h4&gt;&#123;<span class="keyword">this</span>.props.myDataProp&#125;&lt;/h4&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	constructor()&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			value: <span class="symbol">'Hello</span> <span class="type">World</span>!'</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	handleChange(event)&#123;</div><div class="line">		<span class="keyword">this</span>.setState(&#123;</div><div class="line">			value: <span class="symbol">'luuman</span> is good man!'</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		let value = <span class="keyword">this</span>.state.value;</div><div class="line">		<span class="keyword">return</span> &lt;div&gt;&lt;<span class="type">Content</span> myDataProp=&#123;value&#125; updateStateProp=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)&#125;&gt;&lt;/<span class="type">Content</span>&gt;&lt;/div&gt;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloMessage</span> /&gt;,mountNode);</div></pre></td></tr></table></figure>
<h2 id="Refs-and-the-DOM"><a href="#Refs-and-the-DOM" class="headerlink" title="Refs and the DOM"></a>Refs and the DOM</h2><h3 id="React-Refs"><a href="#React-Refs" class="headerlink" title="React Refs"></a>React Refs</h3><p>React 支持一种非常特殊的属性 Ref ，你可以用来绑定到 render() 输出的任何组件上。<br>这个特殊的属性允许你引用 render() 返回的相应的支撑实例（ backing instance ）。这样就可以确保在任何时间总是拿到正确的实例。</p>
<blockquote>
<p>使用方法：<br>绑定一个 ref 属性到 render 的返回值上：</p>
</blockquote>
<p>在其它代码中，通过 this.refs 获取支撑实例:<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">input</span> <span class="keyword">ref</span>=<span class="string">"myInput"</span> /&gt;</div><div class="line"></div><div class="line"><span class="keyword">var</span> <span class="keyword">input</span> = <span class="keyword">this</span><span class="variable">.refs</span><span class="variable">.myInput</span>;</div><div class="line"><span class="keyword">var</span> inputValue = <span class="keyword">input</span><span class="variable">.value</span>;</div><div class="line"><span class="keyword">var</span> inputRect = <span class="keyword">input</span><span class="variable">.getBoundingClientRect</span>();</div></pre></td></tr></table></figure></p>
<h4 id="实例：点我输入框获取焦点"><a href="#实例：点我输入框获取焦点" class="headerlink" title="实例：点我输入框获取焦点"></a>实例：点我输入框获取焦点</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	handleClick()&#123;</div><div class="line">		<span class="keyword">this</span>.refs.myInput.focus();</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			&lt;div&gt;</div><div class="line">				&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="symbol">'tex</span>t' ref=<span class="symbol">'myInpu</span>t' /&gt;</div><div class="line">				&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="symbol">'butto</span>n' value='点我输入框获取焦点' onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)&#125; /&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">MyComponent</span> /&gt;,mountNode);</div></pre></td></tr></table></figure>
<p>当组件插入到 DOM 后，ref属性添加一个组件的引用于到this.refs.name获取。</p>
<p>实例中，我们获取了输入框的支撑实例的引用，子点击按钮后输入框获取焦点。<br>我们也可以使用 getDOMNode()方法获取DOM元素</p>
<h2 id="React-AJAX"><a href="#React-AJAX" class="headerlink" title="React AJAX"></a>React AJAX</h2><p>React 组件的数据可以通过 componentDidMount 方法中的 Ajax 来获取，当从服务端获取数据库可以将数据存储在 state 中，再用 this.setState 方法重新渲染 UI。<br>当使用异步加载数据时，在组件卸载前使用 componentWillUnmount 来取消未完成的请求。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.get(URL,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;&#125;)</div></pre></td></tr></table></figure>
<h4 id="实例：获取-Github-用户最新-gist-共享描述"><a href="#实例：获取-Github-用户最新-gist-共享描述" class="headerlink" title="实例：获取 Github 用户最新 gist 共享描述:"></a>实例：获取 Github 用户最新 gist 共享描述:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserGist</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	<span class="keyword">constructor</span>() &#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			<span class="attr">username</span>: <span class="string">''</span>,</div><div class="line">			<span class="attr">lastGistUrl</span>: <span class="string">''</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	componentDidMount()&#123;</div><div class="line">		<span class="keyword">this</span>.serverRequest = $.get(<span class="keyword">this</span>.props.source,<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">			<span class="keyword">let</span> lastGist = result[<span class="number">0</span>];</div><div class="line">			<span class="keyword">this</span>.setState(&#123;</div><div class="line">				<span class="attr">username</span>: lastGist.owner.login,</div><div class="line">				<span class="attr">lastGistUrl</span>: lastGist.html_url</div><div class="line">			&#125;)</div><div class="line">		&#125;.bind(<span class="keyword">this</span>))</div><div class="line">	&#125;</div><div class="line">	componentWillUnmount()&#123;</div><div class="line">		<span class="keyword">this</span>.serverRequest.abort();</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">				&#123;this.state.username&#125;</div><div class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;this.state.lastGistUrl&#125;</span>&gt;</span>&#123;this.state.lastGistUrl&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">UserGist</span> <span class="attr">source</span>=<span class="string">"https://api.github.com/users/octocat/gists"</span> /&gt;</span>,mountNode);</span></div></pre></td></tr></table></figure>
<h4 id="实例：拉取数据"><a href="#实例：拉取数据" class="headerlink" title="实例：拉取数据"></a>实例：拉取数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span>;</div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">const</span> mountNode = <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RipoList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>()&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.state = &#123;</div><div class="line">            <span class="attr">loading</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">error</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">data</span>: <span class="literal">null</span></div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    componentDidMount()&#123;</div><div class="line">        <span class="keyword">this</span>.props.promise.then(</div><div class="line">            <span class="function"><span class="params">value</span> =&gt;</span> <span class="keyword">this</span>.setState(&#123;</div><div class="line">                <span class="attr">loading</span>: <span class="literal">false</span>,</div><div class="line">                <span class="attr">data</span>: value</div><div class="line">            &#125;),</div><div class="line">            error =&gt; <span class="keyword">this</span>.setState(&#123;</div><div class="line">                <span class="attr">loading</span>: <span class="literal">false</span>,</div><div class="line">                <span class="attr">error</span>: error</div><div class="line">            &#125;)</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state.loading)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.state.error != <span class="literal">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span>  <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Error: &#123;this.state.error.message&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">let</span> repos = <span class="keyword">this</span>.state.data.items;</div><div class="line">            <span class="keyword">let</span> repoList = repos.map(<span class="function"><span class="keyword">function</span>(<span class="params">repo,index</span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span>(</div><div class="line">                    <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span></div><div class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;repo.html_url&#125;</span>&gt;</span>&#123;repo.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>(&#123;repo.stargazers_count&#125; stars)<span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">                        &#123;repo.description&#125;</div><div class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span>   </div><div class="line">                );</div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">return</span>(</div><div class="line">                <span class="xml"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span></div><div class="line">                    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Most Popular JavaScript Projects in Github<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;repoList&#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">main</span>&gt;</span></div><div class="line">            )</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">RipoList</span> <span class="attr">promise</span>=<span class="string">&#123;$.getJSON(</span>'<span class="attr">https:</span>//<span class="attr">api.github.com</span>/<span class="attr">search</span>/<span class="attr">repositories</span>?<span class="attr">q</span>=<span class="string">javascript&amp;sort</span>=<span class="string">stars</span>')&#125; /&gt;</span>,mountNode);</span></div></pre></td></tr></table></figure>
<h2 id="Add-Ons-添加插件"><a href="#Add-Ons-添加插件" class="headerlink" title="Add-Ons 添加插件"></a>Add-Ons 添加插件</h2><h3 id="jquery"><a href="#jquery" class="headerlink" title="jquery"></a>jquery</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> $ from <span class="symbol">'jquer</span>y';</div><div class="line"><span class="keyword">import</span> <span class="type">React</span> from <span class="symbol">'reac</span>t';</div><div class="line"><span class="keyword">import</span> <span class="type">ReactDOM</span> from <span class="symbol">'react</span>-dom';</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			&lt;div&gt;<span class="type">HelloWorld</span>&lt;/div&gt;</div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloWorld</span> /&gt;,$('#example')[<span class="number">0</span>]);</div></pre></td></tr></table></figure>
<h3 id="recharts"><a href="#recharts" class="headerlink" title="recharts"></a>recharts</h3><ul>
<li><a href="http://recharts.org/" target="_blank" rel="external">React图表组件库</a></li>
</ul>
<h3 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h3><ul>
<li><a href="https://react-bootstrap.github.io/" target="_blank" rel="external">React组件库</a></li>
</ul>
<h3 id="MarkdownEditor"><a href="#MarkdownEditor" class="headerlink" title="MarkdownEditor"></a>MarkdownEditor</h3><ul>
<li><a href="https://github.com/jonschlinkert/remarkable" title="Markdown解析器" target="_blank" rel="external">MarkDown</a></li>
</ul>
<h2 id="ReactDOM"><a href="#ReactDOM" class="headerlink" title="ReactDOM"></a>ReactDOM</h2><h3 id="render-2"><a href="#render-2" class="headerlink" title="render()"></a>render()</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ReactDOM</span><span class="selector-class">.render</span>(</div><div class="line">	<span class="selector-tag">element</span>,</div><div class="line">	<span class="selector-tag">container</span>,</div><div class="line">	<span class="selector-attr">[callback]</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h3 id="unmountComponentAtNode"><a href="#unmountComponentAtNode" class="headerlink" title="unmountComponentAtNode()"></a>unmountComponentAtNode()</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ReactDOM.unmountComponentAtNode(<span class="keyword">container</span>)</div></pre></td></tr></table></figure>
<h3 id="findDOMNode"><a href="#findDOMNode" class="headerlink" title="findDOMNode()"></a>findDOMNode()</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ReactDOM</span><span class="selector-class">.findDOMNode</span>(<span class="selector-tag">component</span>)</div></pre></td></tr></table></figure>
<p>### </p>
<h4 id="onkeypress"><a href="#onkeypress" class="headerlink" title="onkeypress"></a>onkeypress</h4><p>/<em> 在实例中，我们使用了支持多浏览器的方法，因为 keyCode 属性无法再 Firefox 浏览器中工作。但是 which 属性可以。<br>如果浏览器支持 event.which 则使用 event.which，否则使用 event.keyCode </em>/</p>
<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p><a href="http://es6.ruanyifeng.com/" title="阮一峰" target="_blank" rel="external">ECMAScript 6 入门</a></p>
<h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。</p>
<blockquote>
<p>for循环的计数器</p>
</blockquote>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;&#125;</div><div class="line"></div><div class="line">console.<span class="built_in">log</span>(i);</div><div class="line">//ReferenceError: i <span class="built_in">is</span> <span class="keyword">not</span> defined</div></pre></td></tr></table></figure>
<blockquote>
<p>下面的代码如果使用var，最后输出的是10</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">a[<span class="number">6</span>](); <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<blockquote>
<p>如果使用let，声明的变量仅在块级作用域内有效，最后输出的是6</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概况&quot;&gt;&lt;a href=&quot;#概况&quot; class=&quot;headerlink&quot; title=&quot;概况&quot;&gt;&lt;/a&gt;概况&lt;/h2&gt;&lt;p&gt;React 起源于 Facebook 的内部F8项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。&lt;br&gt;React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。&lt;br&gt;React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。E6语法。&lt;/p&gt;
&lt;h3 id=&quot;React-特点&quot;&gt;&lt;a href=&quot;#React-特点&quot; class=&quot;headerlink&quot; title=&quot;React 特点&quot;&gt;&lt;/a&gt;React 特点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;声明式设计 −React采用声明范式，可以轻松描述应用。&lt;/li&gt;
&lt;li&gt;高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。&lt;/li&gt;
&lt;li&gt;灵活 −React可以与已知的库或框架很好地配合。&lt;/li&gt;
&lt;li&gt;JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。&lt;/li&gt;
&lt;li&gt;组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。&lt;/li&gt;
&lt;li&gt;单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;官网地址&lt;/a&gt;
    
    </summary>
    
      <category term="React" scheme="http://luuman.github.io/categories/React/"/>
    
    
      <category term="React" scheme="http://luuman.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>用CSS实现元素垂直居中方案</title>
    <link href="http://luuman.github.io/2017/01/02/Induce/CSS/CSSElementAlign/"/>
    <id>http://luuman.github.io/2017/01/02/Induce/CSS/CSSElementAlign/</id>
    <published>2017-01-02T10:29:00.000Z</published>
    <updated>2017-03-20T03:04:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h3 id="固定高度绝对定位"><a href="#固定高度绝对定位" class="headerlink" title="固定高度绝对定位"></a>固定高度绝对定位</h3><blockquote>
<p>使用position:absolute,设置left、top、margin-left、margin-top的属性<br>这种方法基本浏览器都能够兼容，不足之处就是需要固定宽高。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.one</span>&#123;</div><div class="line">	<span class="attribute">position</span>:absolute;</div><div class="line">	<span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">	<span class="attribute">top</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">left</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">margin-top</span>:-<span class="number">100px</span>;</div><div class="line">	<span class="attribute">margin-left</span>:-<span class="number">100px</span>;</div><div class="line">	<span class="attribute">background</span>:red; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<!-- <div class="one">one</div> -->
<style type="text/css">
    .one{
        position:absolute;
        width:200px;
        height:200px;
        top:50%;
        left:50%;
        margin-top:-100px;
        margin-left:-100px;
        background:red; 
    }
</style>

<h3 id="使用position-fixed-同样设置left、top、margin-left、margin-top的属性"><a href="#使用position-fixed-同样设置left、top、margin-left、margin-top的属性" class="headerlink" title="使用position:fixed,同样设置left、top、margin-left、margin-top的属性"></a>使用position:fixed,同样设置left、top、margin-left、margin-top的属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.two</span>&#123;</div><div class="line">	<span class="attribute">position</span>:fixed;</div><div class="line">	<span class="attribute">width</span>:<span class="number">180px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">180px</span>;</div><div class="line">	<span class="attribute">top</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">left</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">margin-top</span>:-<span class="number">90px</span>;</div><div class="line">	<span class="attribute">margin-left</span>:-<span class="number">90px</span>;</div><div class="line">	<span class="attribute">background</span>:orange;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>大家都知道的position:fixed,IE是不支持这个属性的</p>
<!-- <div class="two">two</div> -->
<style type="text/css">
    .two{
        position:fixed;
        width:180px;
        height:180px;
        top:50%;
        left:50%;
        margin-top:-90px;
        margin-left:-90px;
        background:orange;
    }
</style>
### 利用position:fixed属性，margin:auto这个必须不要忘记了。
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.three</span>&#123;</div><div class="line">	<span class="attribute">position</span>:fixed;</div><div class="line">	<span class="attribute">width</span>:<span class="number">160px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">160px</span>;</div><div class="line">	<span class="attribute">top</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">right</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">bottom</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">left</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">margin</span>:auto;</div><div class="line">	<span class="attribute">background</span>:pink;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<!-- <div class="three">three</div> -->
<style type="text/css">
    .three{
        position:fixed;
        width:160px;
        height:160px;
        top:0;
        right:0;
        bottom:0;
        left:0;
        margin:auto;
        background:pink;
    }
</style>
### 利用position:absolute属性，设置top/bottom/right/left
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.four</span>&#123;</div><div class="line">	<span class="attribute">position</span>:absolute;</div><div class="line">	<span class="attribute">width</span>:<span class="number">140px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">140px</span>;</div><div class="line">	<span class="attribute">top</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">right</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">bottom</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">left</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">margin</span>:auto;</div><div class="line">	<span class="attribute">background</span>:black;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<!-- <div class="four">four</div> -->
<style type="text/css">
    .four{
        position:absolute;
        width:140px;
        height:140px;
        top:0;
        right:0;
        bottom:0;
        left:0;
        margin:auto;
        background:black;
    }
</style>
### 文字垂直水平居中
>利用display:table-cell属性使内容垂直居中

<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.five</span>&#123;</div><div class="line">	<span class="attribute">display</span>:table-cell;</div><div class="line">	<span class="attribute">vertical-align</span>:middle;</div><div class="line">	<span class="attribute">text-align</span>:center;</div><div class="line">	<span class="attribute">width</span>:<span class="number">120px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">120px</span>;</div><div class="line">	<span class="attribute">background</span>:purple;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<!-- <div class="five">five</div> -->
<style type="text/css">
    .five{
        display:table-cell;
        vertical-align:middle;
        text-align:center;
        width:120px;
        height:120px;
        background:purple;
    }
</style>
### 文字垂直水平居中
>最简单的一种使行内元素居中的方法，使用line-height属性
这种方法也很实用，比如使文字垂直居中对齐

<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.six</span>&#123;</div><div class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">line-height</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">text-align</span>:center;</div><div class="line">	<span class="attribute">background</span>:gray;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<!-- <div class="six">six</div> -->
<style type="text/css">
    .six{
        width:100px;
        height:100px;
        line-height:100px;
        text-align:center;
        background:gray;
    }
</style>
### 文字垂直水平居中
>使用css3的display:-webkit-box属性，再设置-webkit-box-pack:center/-webkit-box-align:center

<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.seven</span>&#123;</div><div class="line">	<span class="attribute">width</span>:<span class="number">90px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">90px</span>;</div><div class="line">	<span class="attribute">display</span>:-webkit-box;</div><div class="line">	<span class="attribute">-webkit-box-pack</span>:center;</div><div class="line">	<span class="attribute">-webkit-box-align</span>:center;</div><div class="line">	<span class="attribute">background</span>:yellow;</div><div class="line">	<span class="attribute">color</span>:black;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<!-- <div class="seven">seven</div> -->
<style type="text/css">
    .seven{
        width:90px;
        height:90px;
        display:-webkit-box;
        -webkit-box-pack:center;
        -webkit-box-align:center;
        background:yellow;
        color:black;
    }
</style>
### CSS translate偏移
>使用css3的新属性transform:translate(x,y)属性
这个方法可以不需要设定固定的宽高，在移动端用的会比较多，在移动端css3兼容的比较好

<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.eight</span>&#123;</div><div class="line">	<span class="attribute">position</span>:absolute;</div><div class="line">	<span class="attribute">width</span>:<span class="number">80px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">80px</span>;</div><div class="line">	<span class="attribute">top</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">left</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">transform</span>:<span class="built_in">translate</span>(-50%,-50%);</div><div class="line">	<span class="attribute">-webkit-transform</span>:<span class="built_in">translate</span>(-50%,-50%);</div><div class="line">	<span class="attribute">-moz-transform</span>:<span class="built_in">translate</span>(-50%,-50%);</div><div class="line">	<span class="attribute">-ms-transform</span>:<span class="built_in">translate</span>(-50%,-50%);</div><div class="line">	<span class="attribute">background</span>:green;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<!-- <div class="eight">eight</div> -->
<style type="text/css">
    .eight{
        position:absolute;
        width:80px;
        height:80px;
        top:50%;
        left:50%;
        transform:translate(-50%,-50%);
        -webkit-transform:translate(-50%,-50%);
        -moz-transform:translate(-50%,-50%);
        -ms-transform:translate(-50%,-50%);
        background:green;
    }
</style>
### before元素
>最高大上的一种，使用:before元素

<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.nine</span>&#123;</div><div class="line">	<span class="attribute">position</span>:fixed;</div><div class="line">	<span class="attribute">display</span>:block;</div><div class="line">	<span class="attribute">top</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">right</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">bottom</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">left</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">text-align</span>:center;</div><div class="line">	<span class="attribute">background</span>:<span class="built_in">rgba</span>(0,0,0,.5);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.nine</span><span class="selector-pseudo">:before</span>&#123;</div><div class="line">	<span class="attribute">content</span>:<span class="string">''</span>;</div><div class="line">	<span class="attribute">display</span>:inline-block;</div><div class="line">	<span class="attribute">vertical-align</span>:middle;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.nine</span> <span class="selector-class">.content</span>&#123;</div><div class="line">	<span class="attribute">display</span>:inline-block;</div><div class="line">	<span class="attribute">vertical-align</span>:middle;</div><div class="line">	<span class="attribute">width</span>:<span class="number">60px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">60px</span>;</div><div class="line">	<span class="attribute">line-height</span>:<span class="number">60px</span>;</div><div class="line">	<span class="attribute">color</span>:red;</div><div class="line">	<span class="attribute">background</span>:yellow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<!-- <div class="nine"><div class="content">nine</div></div> -->
<style type="text/css">
    .nine{
        position:fixed;
        display:block;
        top:0;
        right:0;
        bottom:0;
        left:0;
        text-align:center;
        background:rgba(0,0,0,.1);
    }
    .nine:before{
        content:'';
        display:inline-block;
        vertical-align:middle;
        height:100%;
    }
    .nine .content{
        display:inline-block;
        vertical-align:middle;
        width:60px;
        height:60px;
        line-height:60px;
        color:red;
        background:yellow;
    }
</style>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;自用笔记：&lt;/strong&gt;本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why&lt;br&gt;
    
    </summary>
    
      <category term="Induce" scheme="http://luuman.github.io/categories/Induce/"/>
    
    
      <category term="CSS" scheme="http://luuman.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS前端代码规范</title>
    <link href="http://luuman.github.io/2016/12/31/Skill/norm/normCSS/"/>
    <id>http://luuman.github.io/2016/12/31/Skill/norm/normCSS/</id>
    <published>2016-12-31T10:29:00.000Z</published>
    <updated>2017-03-20T03:04:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>规范：</strong>你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！<br><a id="more"></a></p>
<h2 id="分类方法"><a href="#分类方法" class="headerlink" title="分类方法"></a>分类方法</h2><h3 id="CSS文件的分类"><a href="#CSS文件的分类" class="headerlink" title="CSS文件的分类"></a>CSS文件的分类</h3><ol>
<li>公共型样式：global<br>“标签的重置和设置默认值”、“统一调用背景图和清除浮动或其他需统一处理的长样式”、“网站通用布局”、“通用模块和其扩展”、“元件和其扩展”、“功能类样式”、“皮肤类样式”。</li>
<li>特殊型样式：index<br>当某个栏目或页面的样式与网站整体差异较大或者维护率较高时，可以独立引用一个样式<br>“特殊的布局、模块和元件及扩展”、“特殊的功能、颜色和背景”，也可以是某个大型控件或模块的独立样式。</li>
<li>皮肤型样式：skin<br>如果产品需要换肤功能，那么我们需要将颜色、背景等抽离出来放在这里。</li>
</ol>
<h3 id="CSS内部的分类及其顺序"><a href="#CSS内部的分类及其顺序" class="headerlink" title="CSS内部的分类及其顺序"></a>CSS内部的分类及其顺序</h3><ol>
<li>重置（reset）和默认（base）（tags）：消除默认样式和浏览器差异，并设置部分标签的初始样式，以减少后面的重复劳动！你可以根据你的网站需求设置！</li>
<li>统一处理：建议在这个位置统一调用背景图（这里指多个布局或模块或元件共用的图）和清除浮动（这里指通用性较高的布局、模块、元件内的清除）等统一设置处理的样式！</li>
<li>布局（grid）（.g-）：将页面分割为几个大块，通常有头部、主体、主栏、侧栏、尾部等！</li>
<li>模块（module）（.m-）：通常是一个语义化的可以重复使用的较大的整体！比如导航、登录、注册、各种列表、评论、搜索等！</li>
<li>元件（unit）（.u-）：通常是一个不可再分的较为小巧的个体，通常被重复用于各种模块中！比如按钮、输入框、loading、图标等！</li>
<li>功能（function）（.f-）：为方便一些常用样式的使用，我们将这些使用率较高的样式剥离出来，按需使用，通常这些选择器具有固定样式表现，比如清除浮动等！不可滥用！</li>
<li>皮肤（skin）（.s-）：如果你需要把皮肤型的样式抽离出来，通常为文字色、背景色（图）、边框色等，非换肤型网站通常只提取文字色！非换肤型网站不可滥用此类！</li>
<li>状态（.z-）：为状态类样式加入前缀，统一标识，方便识别，她只能组合使用或作为后代出现（.u-ipt.z-dis{}，.m-list li.z-sel{}），具体详见命名规则的扩展相关项。</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 重置 */</span></div><div class="line"><span class="selector-tag">div</span>,<span class="selector-tag">p</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">li</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</div><div class="line"><span class="comment">/* 默认 */</span></div><div class="line"><span class="selector-tag">strong</span>,<span class="selector-tag">em</span>&#123;<span class="attribute">font-style</span>:normal;<span class="attribute">font-weight</span>:bold;&#125;</div><div class="line"><span class="comment">/* 统一调用背景图 */</span></div><div class="line"><span class="selector-class">.m-logo</span> <span class="selector-tag">a</span>,<span class="selector-class">.m-nav</span> <span class="selector-tag">a</span>,<span class="selector-class">.m-nav</span> <span class="selector-tag">em</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(images/sprite.png) no-repeat <span class="number">9999px</span> <span class="number">9999px</span>;&#125;</div><div class="line"><span class="comment">/* 统一清除浮动 */</span></div><div class="line"><span class="selector-class">.g-bdc</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.m-dimg</span> <span class="selector-tag">ul</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.u-tab</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">display</span>:block;<span class="attribute">visibility</span>:hidden;<span class="attribute">clear</span>:both;<span class="attribute">height</span>:<span class="number">0</span>;<span class="attribute">overflow</span>:hidden;<span class="attribute">content</span>:<span class="string">'.'</span>;&#125;</div><div class="line"><span class="selector-class">.g-bdc</span>,<span class="selector-class">.m-dimg</span> <span class="selector-tag">ul</span>,<span class="selector-class">.u-tab</span>&#123;<span class="attribute">zoom</span>:<span class="number">1</span>;&#125;</div><div class="line"><span class="comment">/* 布局 */</span></div><div class="line"><span class="selector-class">.g-sd</span>&#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">300px</span>;&#125;</div><div class="line"><span class="comment">/* 模块 */</span></div><div class="line"><span class="selector-class">.m-logo</span>&#123;<span class="attribute">width</span>:<span class="number">200px</span>;<span class="attribute">height</span>:<span class="number">50px</span>;&#125;</div><div class="line"><span class="comment">/* 元件 */</span></div><div class="line"><span class="selector-class">.u-btn</span>&#123;<span class="attribute">height</span>:<span class="number">20px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#333</span>;&#125;</div><div class="line"><span class="comment">/* 功能 */</span></div><div class="line"><span class="selector-class">.f-tac</span>&#123;<span class="attribute">text-align</span>:center;&#125;</div><div class="line"><span class="comment">/* 皮肤 */</span></div><div class="line"><span class="selector-class">.s-fc</span>,<span class="selector-tag">a</span><span class="selector-class">.s-fc</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#fff</span>;&#125;</div></pre></td></tr></table></figure>
<h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><h3 id="使用类选择器，放弃ID选择器"><a href="#使用类选择器，放弃ID选择器" class="headerlink" title="使用类选择器，放弃ID选择器"></a>使用类选择器，放弃ID选择器</h3><p>ID在一个页面中的唯一性导致了如果以ID为选择器来写CSS，就无法重用。</p>
<h3 id="NEC特殊字符：”-“连字符"><a href="#NEC特殊字符：”-“连字符" class="headerlink" title="NEC特殊字符：”-“连字符"></a>NEC特殊字符：”-“连字符</h3><p>“-“在本规范中并不表示连字符的含义。<br>她只表示两种含义：分类前缀分隔符、扩展分隔符，详见以下具体规则。</p>
<h3 id="分类的命名方法：使用单个字母-”-“为前缀"><a href="#分类的命名方法：使用单个字母-”-“为前缀" class="headerlink" title="分类的命名方法：使用单个字母+”-“为前缀"></a>分类的命名方法：使用单个字母+”-“为前缀</h3><p>布局（grid）（.g-）；模块（module）（.m-）；元件（unit）（.u-）；功能（function）（.f-）；皮肤（skin）（.s-）；状态（.z-）。<br>对以上的解释详情参见：分类方法中的“CSS内部的分类及其顺序”。<br>注：在你样式中的选择器总是要以上面前五类开头，然后在里面使用后代选择器。<br>　　如果这五类不能满足你的需求，你可以另外定义一个或多个大类，但必须符合单个字母+”-“为前缀的命名规则，即 .x- 的格式。<br>　　特殊：.j-将被专用于JS获取节点，请勿使用.j-定义样式。</p>
<h3 id="后代选择器命名"><a href="#后代选择器命名" class="headerlink" title="后代选择器命名"></a>后代选择器命名</h3><p>约定不以单个字母+”-“为前缀且长度大于等于2的类选择器为后代选择器，如：.item为m-list模块里的每一个项，.text为m-list模块里的文本部分：.m-list .item{}.m-list .text{}。<br>一个语义化的标签也可以是后代选择器，比如：.m-list li{}。<br>不允许单个字母的类选择器出现，原因详见下面的“模块和元件的后代选择器的扩展类”。<br>通过使用后代选择器的方法，你不需要考虑他的命名是否已被使用，因为他只在当前模块或元件中生效，同样的样式名可以在不同的模块或元件中重复使用，互不干扰；在多人协作或者分模块协作的时候效果尤为明显！<br>后代选择器不需要完整表现结构树层级，尽量能短则短。<br>注：后代选择器不要在页面布局中使用，因为污染的可能性较大；</p>
<pre><code>/* 这里的.itm和.cnt只在.m-list中有效 */
.m-list{margin:0;padding:0;}
.m-list .itm{margin:1px;padding:1px;}
.m-list .cnt{margin-left:100px;}
/* 这里的.cnt和.num只在.m-page中有效 */
.m-page{height:20px;}
.m-page .cnt{text-align:center;}
.m-page .num{border:1px solid #ddd;}
</code></pre><h3 id="命名应简约而不失语义"><a href="#命名应简约而不失语义" class="headerlink" title="命名应简约而不失语义"></a>命名应简约而不失语义</h3><pre><code>/* 反对：表现化的或没有语义的命名 */
.m-abc .green2{}
.g-left2{}
/* 推荐：使用有语义的简短的命名 */
.m-list .wrap2{}
.g-side2{}
</code></pre><h3 id="相同语义的不同类命名"><a href="#相同语义的不同类命名" class="headerlink" title="相同语义的不同类命名"></a>相同语义的不同类命名</h3><p>方法：直接加数字或字母区分即可（如：.m-list、.m-list2、.m-list3等，都是列表模块，但是是完全不一样的模块）。<br>其他举例：.f-fw0、.f-fw1、.s-fc0、.s-fc1、.m-logo2、.m-logo3、u-btn、u-btn2等等。</p>
<h3 id="模块和元件的扩展类的命名方法"><a href="#模块和元件的扩展类的命名方法" class="headerlink" title="模块和元件的扩展类的命名方法"></a>模块和元件的扩展类的命名方法</h3><p>当A、B、C、…它们类型相同且外形相似区别不大，那么就以它们中出现率最高的做成基类，其他做成基类的扩展。<br>方法：+“-”+数字或字母（如：.m-list的扩展类为.m-list-1、.m-list-2等）。<br>补充：基类自身可以独立使用（如：class=”m-list”即可），扩展类必须基于基类使用（如：class=”m-list m-list-2”）。<br>如果你的扩展类是表示不同状态，那么你可以这样命名：u-btn-dis，u-btn-hov，m-box-sel，m-box-hov等等，然后像这样使用：class=”u-btn u-btn-dis”。<br>如果你的网站可以不兼容IE6等浏览器，那么你标识状态的方法也可以采取独立状态分类（.z-）方法：.u-btn.z-dis，.m-box.z-sel，然后像这样使用：class=”u-btn z-dis”。</p>
<h3 id="模块和元件的后代选择器的扩展类"><a href="#模块和元件的后代选择器的扩展类" class="headerlink" title="模块和元件的后代选择器的扩展类"></a>模块和元件的后代选择器的扩展类</h3><p>有时候模块内会有些类似的东西，如果你没有把它们做成元件和扩展，那么也可以使用后代选择器和扩展。<br>后代选择器：.m-login .btn{}。<br>后代选择器扩展：.m-login .btn-1{}，.m-login .btn-dis{}。<br>同样也可以采取独立状态分类（.z-）方法：.m-login .btn.z-dis{}，然后像这样使用：class=”btn z-dis”。<br>注：此方法用于类选择器，直接使用标签做为选择器的则不需要使用此命名方法。<br>注：为防止后代选择器的扩展类和大类命名规范冲突，后代选择器不允许使用单个字母。<br>　　比如：.m-list .a{}是不允许的，因为当这个.a需要扩展的时候就会变成.a-bb，这样就和大类的命名规范冲突。</p>
<h3 id="分组选择器有时可以代替扩展方法"><a href="#分组选择器有时可以代替扩展方法" class="headerlink" title="分组选择器有时可以代替扩展方法"></a>分组选择器有时可以代替扩展方法</h3><p>有时候虽然两个同类型的模块很相似，但是你希望他们之间不要有依赖关系，也就是说你不希望使用扩展的方法，那么你可以通过合并选择器来设置共性的样式。<br>使用本方法的前提是：相同类型、功能和外观都相似，写在同一片代码区域方便维护。</p>
<pre><code>/* 两个元件共性的样式 */
.u-tip1,.u-tip2{}
.u-tip1 .itm,.u-tip2 .itm{}
/* 在分别是两个元件各自的样式 */
/* tip1 */
.u-tip1{}
.u-tip1 .itm{}
/* tip2 */
.u-tip2{}
.u-tip2 .itm{}
</code></pre><h3 id="防止污染和被污染"><a href="#防止污染和被污染" class="headerlink" title="防止污染和被污染"></a>防止污染和被污染</h3><p>当模块或元件之间互相嵌套，且使用了相同的标签选择器或其他后代选择器，那么里面的选择器就会被外面相同的选择器所影响。<br>所以，如果你的模块或元件可能嵌套或被嵌套于其他模块或元件，那么要慎用标签选择器，必要时采用类选择器，并注意命名方式，可以采用.m-layer .layerxxx、.m-list2 .list2xxx的形式来降低后代选择器的污染性。</p>
<h2 id="代码格式"><a href="#代码格式" class="headerlink" title="代码格式"></a>代码格式</h2><p>选择器、属性和值都使用小写<br>在xhtml标准中规定了所有标签、属性和值都小写，CSS也是如此。</p>
<h3 id="单行写完一个选择器定义"><a href="#单行写完一个选择器定义" class="headerlink" title="单行写完一个选择器定义"></a>单行写完一个选择器定义</h3><p>便于选择器的寻找和阅读，也便于插入新选择器和编辑，便于模块等的识别。去除多余空格，使代码紧凑减少换行。<br>如果有嵌套定义，可以采取内部单行的形式。</p>
<pre><code>/* 单行定义一个选择器 */
.m-list li,.m-list h3{width:100px;padding:10px;border:1px solid #ddd;}
/* 这是一个有嵌套定义的选择器 */
@media all and (max-width:600px){
    .m-class1 .itm{height:17px;line-height:17px;font-size:12px;}
    .m-class2 .itm{width:100px;overflow:hidden;}
}
@-webkit-keyframes showitm{
    0%{height:0;opacity:0;}
    100%{height:100px;opacity:1;}
}
</code></pre><h3 id="最后一个值也以分号结尾"><a href="#最后一个值也以分号结尾" class="headerlink" title="最后一个值也以分号结尾"></a>最后一个值也以分号结尾</h3><p>通常在大括号结束前的值可以省略分号，但是这样做会对修改、添加和维护工作带来不必要的失误和麻烦。</p>
<h3 id="省略值为0时的单位"><a href="#省略值为0时的单位" class="headerlink" title="省略值为0时的单位"></a>省略值为0时的单位</h3><p>为节省不必要的字节同时也使阅读方便，我们将0px、0em、0%等值缩写为0。</p>
<pre><code>.m-box{margin:0 10px;background-position:50% 0;}
</code></pre><h3 id="使用单引号"><a href="#使用单引号" class="headerlink" title="使用单引号"></a>使用单引号</h3><p>省略url引用中的引号，其他需要引号的地方使用单引号。</p>
<pre><code>.m-box{background:url(bg.png);}
.m-box:after{content:&apos;.&apos;;}
</code></pre><h3 id="使用16进制表示颜色值"><a href="#使用16进制表示颜色值" class="headerlink" title="使用16进制表示颜色值"></a>使用16进制表示颜色值</h3><p>除非你需要透明度而使用rgba，否则都使用#f0f0f0这样的表示方法，并尽量缩写。</p>
<pre><code>.m-box{color:#f00;background:rgba(0,0,0,0.5);}
</code></pre><h3 id="根据属性的重要性按顺序书写"><a href="#根据属性的重要性按顺序书写" class="headerlink" title="根据属性的重要性按顺序书写"></a>根据属性的重要性按顺序书写</h3><p>只遵循横向顺序即可，先显示定位布局类属性，后盒模型等自身属性，最后是文本类及修饰类属性。</p>
<p>| → | 显示属性 | 自身属性 | 文本属性和其他修饰 |<br>| | —– |:—-:| —– |:—-:|<br>| | display | width |    font |<br>| | visibility | height |    text-align |<br>| | position | margin | text-decoration |<br>| | float | padding |    vertical-align |<br>| | clear | border |    white-space |<br>| | list-style | overflow | color |<br>| | top | min-width |    background |</p>
<pre><code>.m-box{position:relative;width:600px;margin:0 auto 10px;text-align:center;color:#000;}
</code></pre><p>如果属性间存在关联性，则不要隔开写。</p>
<pre><code>/* 这里的height和line-height有关联性 */
.m-box{position:relative;height:20px;line-height:20px;padding:5px;color:#000;}
</code></pre><h3 id="私有在前，标准在后"><a href="#私有在前，标准在后" class="headerlink" title="私有在前，标准在后"></a>私有在前，标准在后</h3><p>先写带有浏览器私有标志的，后写W3C标准的。</p>
<pre><code>.m-box{-webkit-box-shadow:0 0 0 #000;-moz-box-shadow:0 0 0 #000;box-shadow:0 0 0 #000;}
</code></pre><h3 id="注释格式：-注释文字"><a href="#注释格式：-注释文字" class="headerlink" title="注释格式：/ 注释文字 /"></a>注释格式：/<em> 注释文字 </em>/</h3><p>对选择器的注释统一写在被注释对象的上一行，对属性及值的注释写于分号后。<br>注释内容两端需空格，已确保即使在编码错误的情况下也可以正确解析样式。<br>在必要的情况下，可以使用块状注释，块状注释保持统一的缩进对齐。<br>原则上每个系列的样式都需要有一个注释，言简意赅的表明名称、用途、注意事项等。</p>
<pre><code>/* 块状注释文字
 * 块状注释文字
 * 块状注释文字
 */
.m-list{width:500px;}
.m-list li{height:20px;line-height:20px;/* 这里是对line-height的一个注释 */overflow:hidden;}
.m-list li a{color:#333;}
/* 单行注释文字 */
.m-list li em{color:#666;}
</code></pre><h3 id="原则上不允许使用Hack"><a href="#原则上不允许使用Hack" class="headerlink" title="原则上不允许使用Hack"></a>原则上不允许使用Hack</h3><p>很多不兼容问题可以通过改变方法和思路来解决，并非一定需要Hack，根据经验你完全可以绕过某些兼容问题。<br>一种合理的结构和合理的样式，是极少会碰到兼容问题的。<br>由于浏览器自身缺陷，我们无法避开的时候，可以允许使用适当的Hack。</p>
<h3 id="统一Hack方法"><a href="#统一Hack方法" class="headerlink" title="统一Hack方法"></a>统一Hack方法</h3><p>统一使用“*”和“_”分别对IE7和6进行Hack。如下代码所示：</p>
<pre><code>/* IE7会显示灰色#888，IE6会显示白色#fff，其他浏览器显示黑色#000 */
.m-list{color:#000;*color:#888;_color:#fff;}
</code></pre><h3 id="建议并适当缩写值"><a href="#建议并适当缩写值" class="headerlink" title="建议并适当缩写值"></a>建议并适当缩写值</h3><p>“建议并适当”是因为缩写总是会包含一系列的值，而有时候我们并不希望设置某一值，反而造成了麻烦，那么这时候你可以不缩写，而是分开写。</p>
<p>当然，在一切可以缩写的情况下，请务必缩写，它最大的好处就是节省了字节，便于维护，并使阅读更加一目了然。</p>
<p>缩写方法请查阅css手册。</p>
<h3 id="选择器顺序"><a href="#选择器顺序" class="headerlink" title="选择器顺序"></a>选择器顺序</h3><p>请综合考虑以下顺序依据：</p>
<ol>
<li>从大到小（以选择器的范围为准）</li>
<li>从低到高（以等级上的高低为准）</li>
<li>从先到后（以结构上的先后为准）</li>
<li>从父到子（以结构上的嵌套为准）</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">以下仅为简单示范：</div><div class="line"><span class="comment">/* 从大到小 */</span></div><div class="line"><span class="selector-class">.m-list</span> <span class="selector-tag">p</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</div><div class="line"><span class="selector-class">.m-list</span> <span class="selector-tag">p</span><span class="selector-class">.part</span>&#123;<span class="attribute">margin</span>:<span class="number">1px</span>;<span class="attribute">padding</span>:<span class="number">1px</span>;&#125;</div><div class="line"><span class="comment">/* 从低到高 */</span></div><div class="line"><span class="selector-class">.m-logo</span> <span class="selector-tag">a</span>&#123;<span class="attribute">color</span>:<span class="number">#f00</span>;&#125;</div><div class="line"><span class="selector-class">.m-logo</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#fff</span>;&#125;</div><div class="line"><span class="comment">/* 从先到后 */</span></div><div class="line"><span class="selector-class">.g-hd</span>&#123;<span class="attribute">height</span>:<span class="number">60px</span>;&#125;</div><div class="line"><span class="selector-class">.g-bd</span>&#123;<span class="attribute">height</span>:<span class="number">60px</span>;&#125;</div><div class="line"><span class="selector-class">.g-ft</span>&#123;<span class="attribute">height</span>:<span class="number">60px</span>;&#125;</div><div class="line"><span class="comment">/* 从父到子 */</span></div><div class="line"><span class="selector-class">.m-list</span>&#123;<span class="attribute">width</span>:<span class="number">300px</span>;&#125;</div><div class="line"><span class="selector-class">.m-list</span> <span class="selector-class">.itm</span>&#123;<span class="attribute">float</span>:left;&#125;</div></pre></td></tr></table></figure>
<h3 id="选择器等级"><a href="#选择器等级" class="headerlink" title="选择器等级"></a>选择器等级</h3><p>a = 行内样式style。<br>b = ID选择器的数量。<br>c = 类、伪类和属性选择器的数量。<br>d = 类型选择器和伪元素选择器的数量。</p>
<table>
<thead>
<tr>
<th>选择器</th>
<th style="text-align:center">等级(a,b,c,d)</th>
</tr>
</thead>
<tbody>
<tr>
<td>style=””</td>
<td style="text-align:center">1,0,0,0</td>
</tr>
<tr>
<td>#wrapper #content {}</td>
<td style="text-align:center">0,2,0,0</td>
</tr>
<tr>
<td>#content .dateposted {}</td>
<td style="text-align:center">0,1,1,0</td>
</tr>
<tr>
<td>div#content {}</td>
<td style="text-align:center">0,1,0,1</td>
</tr>
<tr>
<td>#content p {}</td>
<td style="text-align:center">0,1,0,1</td>
</tr>
<tr>
<td>#content {}</td>
<td style="text-align:center">0,1,0,0</td>
</tr>
<tr>
<td>p.comment .dateposted {}</td>
<td style="text-align:center">0,0,2,1</td>
</tr>
<tr>
<td>div.comment p {}</td>
<td style="text-align:center">0,0,1,2</td>
</tr>
<tr>
<td>.comment p {}</td>
<td style="text-align:center">0,0,1,1</td>
</tr>
<tr>
<td>p.comment {}</td>
<td style="text-align:center">0,0,1,1</td>
</tr>
<tr>
<td>.comment {}</td>
<td style="text-align:center">0,0,1,0</td>
</tr>
<tr>
<td>div p {}</td>
<td style="text-align:center">0,0,0,2</td>
</tr>
<tr>
<td>p {}</td>
<td style="text-align:center">0,0,0,1</td>
</tr>
</tbody>
</table>
<h2 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h2><h3 id="值缩写"><a href="#值缩写" class="headerlink" title="值缩写"></a>值缩写</h3><p>缩写值可以减少CSS文件大小，并增加可读性和可维护性。<br>但并非所有的值都必须缩写，因为当一个属性的值缩写时，总是会将所有项都设置一遍，而有时候我们不希望设置值里的某些项。</p>
<pre><code>/* 比如我们用下面这个样式来让某个定宽的容器水平居中，我们要的只是left和right，
 * 而top和bottom不是这个样式要关心的（如果设置了反倒会影响其他样式在这个容器上的使用），
 * 所以这时我们就不需要缩写
 */
.f-mgha{margin-left:auto;margin-right:auto;}
/* 比如下面这个模块的样式设置，我们确实需要设置padding的所有项，于是我们就可以采用缩写 */
.m-link{padding:6px 12px;}
常用的缩写方法请参见代码格式。
</code></pre><h3 id="避免耗性能的属性"><a href="#避免耗性能的属性" class="headerlink" title="避免耗性能的属性"></a>避免耗性能的属性</h3><p>以下所举列的属性可能造成渲染性能问题。不过有时候需求大于一切……</p>
<pre><code>/* expression */
.class{width:expression(this.width&gt;100?&apos;100px&apos;:&apos;auto&apos;);}
/* filter */
.class{filter:alpha(opacity=50);}
</code></pre><h3 id="选择器合并"><a href="#选择器合并" class="headerlink" title="选择器合并"></a>选择器合并</h3><p>即CSS选择器组合，可以一次定义多个选择器，为你节省很多字节和宝贵时间。<br>通常我们会将定义相同的或者有大部分属性值相同（确实是因为相关而相同）的一系列选择器组合到一起（采用逗号的方法）来统一定义。</p>
<pre><code>/* 以下对布局类选择器统一做了清除浮动的操作 */
.g-hd:after,.g-bd:after,.g-ft:after{display:block;visibility:hidden;clear:both;height:0;content:&quot;.&quot;;}
.g-hd,.g-bd,.g-ft{zoom:1;}
/* 通常background总是会占用很多字节，所以一般情况下，我们都会这样统一调用 */
.m-logo,.m-help,.m-list li,.u-tab li,.u-tab li a{background:url(../images/sprite.png) no-repeat 9999px 9999px;}
.m-logo{background-position:0 0;}
/* 以下是某个元件的写法，因为确实很多元素是联动的或相关的，所以采用了组合写法，可以方便理解和修改 */
.u-tab li,.u-tab li a{display:inline;float:left;height:30px;line-height:30px;}
.u-tab li{margin:0 3px;}
.u-tab li a{padding:0 6px;}
</code></pre><h3 id="背景图优化合并"><a href="#背景图优化合并" class="headerlink" title="背景图优化合并"></a>背景图优化合并</h3><h4 id="图片本身的优化："><a href="#图片本身的优化：" class="headerlink" title="图片本身的优化："></a>图片本身的优化：</h4><ol>
<li>图像质量要求和图像文件大小决定你用什么格式的图片，用较小的图片文件呈现较好的图像质量。</li>
<li>当图片色彩过于丰富且无透明要求时，建议采用jpg格式并保存为较高质量。</li>
<li>当图片色彩过于丰富又有透明或半透明要求或阴影效果时，建议采用png24格式，并对IE6进行png8退化（或在不得已情况下使用滤镜）。</li>
<li>当图片色彩不太丰富时无论有无透明要求，请采用png8格式，大多数情况下建议采用这种格式。</li>
<li>当图片有动画时，只能使用gif格式。</li>
<li>你可以使用工具对图片进行再次压缩，但前提是不会影响色彩和透明。</li>
</ol>
<h4 id="多张图片的合并："><a href="#多张图片的合并：" class="headerlink" title="多张图片的合并："></a>多张图片的合并：</h4><ol>
<li>单个图标之间必须保留空隙，空隙大小由容器大小及显示方式决定。这样做的好处是既考虑了“容错性”又提高了图片的可维护性。</li>
<li>图标的排列方式，也由容器大小及显示方式决定。排列方式分为以下几种：横向排列（容器宽度有限）、纵向排列（容器高度有限）、斜线排列（容器宽高不限），靠左排列（容器背景居左）、靠右排列（容器背景居右）、水平居中排列（容器背景水平居中）、垂直居中排列（容器背景垂直居中）。</li>
<li>合并后图片大小不宜超过50K，建议大小在20K-50K之间。</li>
<li>为保证多次修改后的图片质量，请保留一份PSD原始图，修改和添加都在PSD中进行，最后导出png。</li>
</ol>
<h4 id="分类合并："><a href="#分类合并：" class="headerlink" title="分类合并："></a>分类合并：</h4><p>并不是把所有的图标都合并在一张图片里就是最好的，除了要控制图片大小之外还要注意以下方法。</p>
<ol>
<li>按照图片排列方式，把排列方式一样的图片进行合并，便于样式控制。</li>
<li>按照模块或元件，把同属于一个模块或元件的图片进行合并，方便模块或元件的维护。</li>
<li>按照图片大小，把大小一致或差不多的图片进行合并，可充分利用图片空间。</li>
<li>按照图片色彩，把色彩一致或差不多的图片进行合并，保证合并后图片的色彩不过于丰富，可防止色彩失真。</li>
<li>综合以上方法进行合并。</li>
</ol>
<h4 id="Hack的避免"><a href="#Hack的避免" class="headerlink" title="Hack的避免"></a>Hack的避免</h4><ol>
<li>当避免的代价较大时，可以使用Hack而不避免，比如你需要增加很多HTML或多写很多CSS时会得不偿失。</li>
<li>丰富的实战经验可以帮助你了解那些常见问题并用多种不同的思路来避免它，所以经验和思维方法在这里显得很重要。</li>
<li>根据你自己的能力来解决Hack的问题，我们不建议你用一个自己都没有把握的方法来避免Hack，因为也许你这个方法本身存在你没有发现的问题。</li>
</ol>
<h3 id="如果CSS可以做到，就不要使用JS"><a href="#如果CSS可以做到，就不要使用JS" class="headerlink" title="如果CSS可以做到，就不要使用JS"></a>如果CSS可以做到，就不要使用JS</h3><p>让CSS做更多的事，减轻JS开发量。</p>
<ol>
<li>用CSS控制交互或视觉的变化，JS只需要更改className。</li>
<li>利用CSS一次性更改多个节点样式，避免多次渲染，提高渲染效率。</li>
<li>如果你的产品允许不兼容低版本浏览器，那么动画实现可以交给CSS。</li>
</ol>
<h3 id="便于阅读修改"><a href="#便于阅读修改" class="headerlink" title="便于阅读修改"></a>便于阅读修改</h3><p>如果你做到了“CSS规范”的所有要求，自然你也就写出了一个便于阅读和修改的漂亮的CSS。当然，代码格式和命名规则是相对重要一些的。</p>
<h3 id="清晰的CSS模块"><a href="#清晰的CSS模块" class="headerlink" title="清晰的CSS模块"></a>清晰的CSS模块</h3><p>如果你做到了命名规则的要求，你的CSS模块也就清晰可见了。用“注释”来说明每一个模块对于较大的CSS文件来说显得尤为重要。</p>
<h3 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h3><p>合理的书写CSS能很大程度上减少文件大小，完成后，在不损坏文件内容的情况下，想尽一切办法压缩你的CSS，你可以借助压缩工具把注释和多余的空格、换行去掉。压缩工具详见：“HTML/CSS工具”部分。</p>
<h3 id="其他格式优化"><a href="#其他格式优化" class="headerlink" title="其他格式优化"></a>其他格式优化</h3><p>优化方法请参见代码格式。</p>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="最佳选择器写法（模块）"><a href="#最佳选择器写法（模块）" class="headerlink" title="最佳选择器写法（模块）"></a>最佳选择器写法（模块）</h3><pre><code>/* 这是某个模块 */
.m-nav{}/* 模块容器 */
.m-nav li,.m-nav a{}/* 先共性  优化组合 */
.m-nav li{}/* 后个性  语义化标签选择器 */
.m-nav a{}/* 后个性中的共性 按结构顺序 */
.m-nav a.a1{}/* 后个性中的个性 */
.m-nav a.a2{}/* 后个性中的个性 */
.m-nav .z-crt a{}/* 交互状态变化 */
.m-nav .z-crt a.a1{}
.m-nav .z-crt a.a2{}
.m-nav .btn{}/* 典型后代选择器 */
.m-nav .btn-1{}/* 典型后代选择器扩展 */
.m-nav .btn-dis{}/* 典型后代选择器扩展（状态） */
.m-nav .btn.z-dis{}/* 作用同上，请二选一（如果可以不兼容IE6时使用） */
.m-nav .m-sch{}/* 控制内部其他模块位置 */
.m-nav .u-sel{}/* 控制内部其他元件位置 */
.m-nav-1{}/* 模块扩展 */
.m-nav-1 li{}
.m-nav-dis{}/* 模块扩展（状态） */
.m-nav.z-dis{}/* 作用同上，请二选一（如果可以不兼容IE6时使用） */
</code></pre><h3 id="统一语义理解和命名"><a href="#统一语义理解和命名" class="headerlink" title="统一语义理解和命名"></a>统一语义理解和命名</h3><h4 id="布局（-g-）"><a href="#布局（-g-）" class="headerlink" title="布局（.g-）"></a>布局（.g-）</h4><table>
<thead>
<tr>
<th>语义</th>
<th>命名</th>
<th>简写</th>
</tr>
</thead>
<tbody>
<tr>
<td>文档</td>
<td>doc</td>
<td>doc</td>
</tr>
<tr>
<td>头部</td>
<td>head</td>
<td>hd</td>
</tr>
<tr>
<td>主体</td>
<td>body</td>
<td>bd</td>
</tr>
<tr>
<td>尾部</td>
<td>foot</td>
<td>ft</td>
</tr>
<tr>
<td>主栏</td>
<td>main</td>
<td>mn</td>
</tr>
<tr>
<td>主栏子容器</td>
<td>mainc</td>
<td>mnc</td>
</tr>
<tr>
<td>侧栏</td>
<td>side</td>
<td>sd</td>
</tr>
<tr>
<td>侧栏子容器</td>
<td>sidec</td>
<td>sdc</td>
</tr>
<tr>
<td>盒容器</td>
<td>wrap/box</td>
<td>wrap/box</td>
</tr>
</tbody>
</table>
<h4 id="模块（-m-）、元件（-u-）"><a href="#模块（-m-）、元件（-u-）" class="headerlink" title="模块（.m-）、元件（.u-）"></a>模块（.m-）、元件（.u-）</h4><table>
<thead>
<tr>
<th>语义</th>
<th>命名</th>
<th>简写</th>
</tr>
</thead>
<tbody>
<tr>
<td>导航</td>
<td>nav</td>
<td>nav</td>
</tr>
<tr>
<td>子导航</td>
<td>subnav</td>
<td>snav</td>
</tr>
<tr>
<td>面包屑</td>
<td>crumb</td>
<td>crm</td>
</tr>
<tr>
<td>菜单</td>
<td>menu</td>
<td>menu</td>
</tr>
<tr>
<td>选项卡</td>
<td>tab</td>
<td>tab</td>
</tr>
<tr>
<td>标题区</td>
<td>head</td>
<td>title    hd/tt</td>
</tr>
<tr>
<td>内容区</td>
<td>body</td>
<td>content    bd/ct</td>
</tr>
<tr>
<td>列表</td>
<td>list</td>
<td>lst</td>
</tr>
<tr>
<td>表格</td>
<td>table</td>
<td>tb</td>
</tr>
<tr>
<td>表单</td>
<td>form</td>
<td>fm</td>
</tr>
<tr>
<td>热点</td>
<td>hot</td>
<td>hot</td>
</tr>
<tr>
<td>排行</td>
<td>top</td>
<td>top</td>
</tr>
<tr>
<td>登录</td>
<td>login</td>
<td>log</td>
</tr>
<tr>
<td>标志</td>
<td>logo</td>
<td>logo</td>
</tr>
<tr>
<td>广告</td>
<td>advertise</td>
<td>ad</td>
</tr>
<tr>
<td>搜索</td>
<td>search</td>
<td>sch</td>
</tr>
<tr>
<td>幻灯</td>
<td>slide</td>
<td>sld</td>
</tr>
<tr>
<td>提示</td>
<td>tips</td>
<td>tips</td>
</tr>
<tr>
<td>帮助</td>
<td>help</td>
<td>help</td>
</tr>
<tr>
<td>新闻</td>
<td>news</td>
<td>news</td>
</tr>
<tr>
<td>下载</td>
<td>download</td>
<td>dld</td>
</tr>
<tr>
<td>注册</td>
<td>regist</td>
<td>reg</td>
</tr>
<tr>
<td>投票</td>
<td>vote</td>
<td>vote</td>
</tr>
<tr>
<td>版权</td>
<td>copyright</td>
<td>cprt</td>
</tr>
<tr>
<td>结果</td>
<td>result</td>
<td>rst</td>
</tr>
<tr>
<td>标题</td>
<td>title</td>
<td>tt</td>
</tr>
<tr>
<td>按钮</td>
<td>button</td>
<td>btn</td>
</tr>
<tr>
<td>输入</td>
<td>input</td>
<td>ipt</td>
</tr>
</tbody>
</table>
<h4 id="功能（-f-）"><a href="#功能（-f-）" class="headerlink" title="功能（.f-）"></a>功能（.f-）</h4><table>
<thead>
<tr>
<th>语义</th>
<th>命名</th>
<th>简写</th>
</tr>
</thead>
<tbody>
<tr>
<td>浮动清除</td>
<td>clearboth</td>
<td>cb</td>
</tr>
<tr>
<td>向左浮动</td>
<td>floatleft</td>
<td>fl</td>
</tr>
<tr>
<td>向右浮动</td>
<td>floatright</td>
<td>fr</td>
</tr>
<tr>
<td>内联块级</td>
<td>inlineblock</td>
<td>ib</td>
</tr>
<tr>
<td>文本居中</td>
<td>textaligncenter</td>
<td>tac</td>
</tr>
<tr>
<td>文本居右</td>
<td>textalignright</td>
<td>tar</td>
</tr>
<tr>
<td>文本居左</td>
<td>textalignleft</td>
<td>tal</td>
</tr>
<tr>
<td>垂直居中</td>
<td>verticalalignmiddle</td>
<td>vam</td>
</tr>
<tr>
<td>溢出隐藏</td>
<td>overflowhidden</td>
<td>oh</td>
</tr>
<tr>
<td>完全消失</td>
<td>displaynone</td>
<td>dn</td>
</tr>
<tr>
<td>字体大小</td>
<td>fontsize</td>
<td>fs</td>
</tr>
<tr>
<td>字体粗细</td>
<td>fontweight</td>
<td>fw</td>
</tr>
</tbody>
</table>
<h4 id="皮肤（-s-）"><a href="#皮肤（-s-）" class="headerlink" title="皮肤（.s-）"></a>皮肤（.s-）</h4><table>
<thead>
<tr>
<th>语义</th>
<th>命名</th>
<th>简写</th>
</tr>
</thead>
<tbody>
<tr>
<td>字体颜色</td>
<td>fontcolor</td>
<td>fc</td>
</tr>
<tr>
<td>背景</td>
<td>background</td>
<td>bg</td>
</tr>
<tr>
<td>背景颜色</td>
<td>backgroundcolor</td>
<td>bgc</td>
</tr>
<tr>
<td>背景图片</td>
<td>backgroundimage</td>
<td>bgi</td>
</tr>
<tr>
<td>背景定位</td>
<td>backgroundposition</td>
<td>bgp</td>
</tr>
<tr>
<td>边框颜色</td>
<td>bordercolor</td>
<td>bdc</td>
</tr>
</tbody>
</table>
<h4 id="状态（-z-）"><a href="#状态（-z-）" class="headerlink" title="状态（.z-）"></a>状态（.z-）</h4><table>
<thead>
<tr>
<th>语义</th>
<th>命名</th>
<th>简写</th>
</tr>
</thead>
<tbody>
<tr>
<td>选中</td>
<td>selected</td>
<td>sel</td>
</tr>
<tr>
<td>当前</td>
<td>current</td>
<td>crt</td>
</tr>
<tr>
<td>显示</td>
<td>show</td>
<td>show</td>
</tr>
<tr>
<td>隐藏</td>
<td>hide</td>
<td>hide</td>
</tr>
<tr>
<td>打开</td>
<td>open</td>
<td>open</td>
</tr>
<tr>
<td>关闭</td>
<td>close</td>
<td>close</td>
</tr>
<tr>
<td>出错</td>
<td>error</td>
<td>err</td>
</tr>
<tr>
<td>不可用</td>
<td>disabled</td>
<td>dis</td>
</tr>
</tbody>
</table>
<h2 id="典型错误"><a href="#典型错误" class="headerlink" title="典型错误"></a>典型错误</h2><h3 id="不符合NEC规范的选择器用法"><a href="#不符合NEC规范的选择器用法" class="headerlink" title="不符合NEC规范的选择器用法"></a>不符合NEC规范的选择器用法</h3><pre><code>.class{}
</code></pre><p>不要以一个没有类别的样式作为主选择器，这样的选择器只能作为后代选择器使用，比如.m-xxx .class{}。</p>
<pre><code>.m-xxx div{}
</code></pre><p>不要以没有语义的标签作为选择器，这会造成大面积污染，除非你可以断定现在或将来你的这个选择器不会污染其他同类。</p>
<pre><code>.g-xxx .class{}
</code></pre><p>不要在页面布局中使用后代选择器，因为这个后代选择器可能会污染里面的元素。</p>
<pre><code>.g-xxx .m-yyy{}.g-xxx .u-yyy{}
</code></pre><p>不要用布局去控制模块或元件，模块和元件应与布局分离独立。</p>
<pre><code>.m-xxx .f-xxx{}.m-xxx .s-xxx{}
</code></pre><p>不要通过模块或其他类来重定义或修改或添加已经定义好的功能类选择器和皮肤类选择器。</p>
<pre><code>.m-xxx .class .class .class .class{}
</code></pre><p>不要将选择器写的过于冗长，这会额外增加文件大小并且限制了太小范围的选择器，使树形结构过于严格应用范围过于局限，建议3-4个长度之内写完。选择器并不需要完整反映结构嵌套顺序，相反，能简则简。</p>
<pre><code>.m-xxx .m-yyy .zzz{}
</code></pre><p>不要越级控制，如果.zzz是.m-yyy的后代选择器，那么不允许.m-yyy之外的选择器控制或修改.zzz。此时可以使用.m-yyy的扩展来修改.zzz，比如.m-yyy-1 .zzz{}。</p>
<h3 id="扩展类使用错误"><a href="#扩展类使用错误" class="headerlink" title="扩展类使用错误"></a>扩展类使用错误</h3><p>扩展类必须和其基类同时使用于同一个节点。</p>
<pre><code>错误：
class=&quot;g-xxx g-yyy-1&quot; 
class=&quot;m-xxx-1&quot; 
class=&quot;u-xxx u-yyy-1&quot; 
class=&quot;xxx-yyy&quot;。
正确：
class=&quot;g-xxx g-xxx-1&quot; 
class=&quot;m-xxx m-xxx-1&quot; 
class=&quot;u-yyy u-yyy-1&quot; 
class=&quot;xxx xxx-yyy&quot;。
</code></pre><p>参考资料：<br><a href="http://www.csdn.net/article/2011-12-02/308445" target="_blank" rel="external">编写出色CSS代码的13个建议</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;规范：&lt;/strong&gt;你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！&lt;br&gt;
    
    </summary>
    
      <category term="Norm" scheme="http://luuman.github.io/categories/Norm/"/>
    
    
      <category term="CSS" scheme="http://luuman.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>前端代码规范Javascript</title>
    <link href="http://luuman.github.io/2016/12/31/Skill/norm/normjs/"/>
    <id>http://luuman.github.io/2016/12/31/Skill/norm/normjs/</id>
    <published>2016-12-31T10:29:00.000Z</published>
    <updated>2017-03-20T03:04:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>规范：</strong>你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！<br><a id="more"></a></p>
<h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><blockquote>
<p>JavaScript支持大小写<br>统一使用单引号<br>命名使用驼峰法则<br>开头字母大写，表示对象。</p>
</blockquote>
<h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><h3 id="变量命名-1"><a href="#变量命名-1" class="headerlink" title="变量命名"></a>变量命名</h3><ol>
<li>匈牙利命名：</li>
</ol>
<p>开头字母用变量类型的缩写，其余部分用变量的英文或英文的缩写，要求单词第一个字母大写。</p>
<pre><code>For example: long lsum = 0;&quot;l&quot;是类型的缩写；
s：表示字符串。例如：sName，sHtml；
n：表示数字。例如：nPage，nTotal；
b：表示逻辑。例如：bChecked，bHasLogin；
a：表示数组。例如：aList，aGroup；
r：表示正则表达式。例如：rDomain，rEmail；
f：表示函数。例如：fGetHtml，fInit；
o：表示以上未涉及到的其他对象，例如：oButton，oDate；
g：表示全局变量，例如：gUserName，gLoginTime；
</code></pre><ol>
<li>驼峰式：</li>
</ol>
<p>第一个单词首字母小写，后面其他单词首字母大写。</p>
<pre><code>For example:  firstName 
</code></pre><h3 id="函数命名"><a href="#函数命名" class="headerlink" title="函数命名"></a>函数命名</h3><ol>
<li><p>函数命名：统一使用动词或者动词+名词形式 —- fnInit()</p>
</li>
<li><p>对象方法命名使用fn+对象类名+动词+名词形式   fnAnimateDoRun() </p>
</li>
<li><p>某事件响应函数命名方式为fn+触发事件对象名+事件名或者模块名  fnDivClick()</p>
</li>
</ol>
<p>附常用的动词列表：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">含义</th>
<th>名称</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>get</td>
<td style="text-align:center">获取</td>
<td>set</td>
<td style="text-align:center">设置</td>
</tr>
<tr>
<td>add</td>
<td style="text-align:center">增加</td>
<td>remove</td>
<td style="text-align:center">删除</td>
</tr>
<tr>
<td>create</td>
<td style="text-align:center">创建</td>
<td>destory</td>
<td style="text-align:center">移除</td>
</tr>
<tr>
<td>start</td>
<td style="text-align:center">启动</td>
<td>stop</td>
<td style="text-align:center">停止</td>
</tr>
<tr>
<td>open</td>
<td style="text-align:center">打开</td>
<td>close</td>
<td style="text-align:center">关闭</td>
</tr>
<tr>
<td>read</td>
<td style="text-align:center">读取</td>
<td>write</td>
<td style="text-align:center">写入</td>
</tr>
<tr>
<td>load</td>
<td style="text-align:center">载入</td>
<td>save</td>
<td style="text-align:center">保存</td>
</tr>
<tr>
<td>create</td>
<td style="text-align:center">创建</td>
<td>destroy</td>
<td style="text-align:center">销毁</td>
</tr>
<tr>
<td>begin</td>
<td style="text-align:center">开始</td>
<td>end</td>
<td style="text-align:center">结束</td>
</tr>
<tr>
<td>backup</td>
<td style="text-align:center">备份</td>
<td>restore</td>
<td style="text-align:center">恢复</td>
</tr>
<tr>
<td>import</td>
<td style="text-align:center">导入</td>
<td>export</td>
<td style="text-align:center">导出</td>
</tr>
<tr>
<td>split</td>
<td style="text-align:center">分割</td>
<td>merge</td>
<td style="text-align:center">合并</td>
</tr>
<tr>
<td>inject</td>
<td style="text-align:center">注入</td>
<td>extract</td>
<td style="text-align:center">提取</td>
</tr>
<tr>
<td>attach</td>
<td style="text-align:center">附着</td>
<td>detach</td>
<td style="text-align:center">脱离</td>
</tr>
<tr>
<td>bind</td>
<td style="text-align:center">绑定</td>
<td>separate</td>
<td style="text-align:center">分离</td>
</tr>
<tr>
<td>view</td>
<td style="text-align:center">查看</td>
<td>browse</td>
<td style="text-align:center">浏览</td>
</tr>
<tr>
<td>edit</td>
<td style="text-align:center">编辑</td>
<td>modify</td>
<td style="text-align:center">修改</td>
</tr>
<tr>
<td>select</td>
<td style="text-align:center">选取</td>
<td>mark</td>
<td style="text-align:center">标记</td>
</tr>
<tr>
<td>copy</td>
<td style="text-align:center">复制</td>
<td>paste</td>
<td style="text-align:center">粘贴</td>
</tr>
<tr>
<td>undo</td>
<td style="text-align:center">撤销</td>
<td>redo</td>
<td style="text-align:center">重做</td>
</tr>
<tr>
<td>insert</td>
<td style="text-align:center">插入</td>
<td>delete</td>
<td style="text-align:center">移除</td>
</tr>
<tr>
<td>add</td>
<td style="text-align:center">加入</td>
<td>append</td>
<td style="text-align:center">添加</td>
</tr>
<tr>
<td>clean</td>
<td style="text-align:center">清理</td>
<td>clear</td>
<td style="text-align:center">清除</td>
</tr>
<tr>
<td>index</td>
<td style="text-align:center">索引</td>
<td>sort</td>
<td style="text-align:center">排序</td>
</tr>
<tr>
<td>find</td>
<td style="text-align:center">查找</td>
<td>search</td>
<td style="text-align:center">搜索</td>
</tr>
<tr>
<td>increase</td>
<td style="text-align:center">增加</td>
<td>decrease</td>
<td style="text-align:center">减少</td>
</tr>
<tr>
<td>play</td>
<td style="text-align:center">播放</td>
<td>pause</td>
<td style="text-align:center">暂停</td>
</tr>
<tr>
<td>launch</td>
<td style="text-align:center">启动</td>
<td>run</td>
<td style="text-align:center">运行</td>
</tr>
<tr>
<td>compile</td>
<td style="text-align:center">编译</td>
<td>execute</td>
<td style="text-align:center">执行</td>
</tr>
<tr>
<td>debug</td>
<td style="text-align:center">调试</td>
<td>trace</td>
<td style="text-align:center">跟踪</td>
</tr>
<tr>
<td>observe</td>
<td style="text-align:center">观察</td>
<td>listen</td>
<td style="text-align:center">监听</td>
</tr>
<tr>
<td>build</td>
<td style="text-align:center">构建</td>
<td>publish</td>
<td style="text-align:center">发布</td>
</tr>
<tr>
<td>input</td>
<td style="text-align:center">输入</td>
<td>output</td>
<td style="text-align:center">输出</td>
</tr>
<tr>
<td>encode</td>
<td style="text-align:center">编码</td>
<td>decode</td>
<td style="text-align:center">解码</td>
</tr>
<tr>
<td>encrypt</td>
<td style="text-align:center">加密</td>
<td>decrypt</td>
<td style="text-align:center">解密</td>
</tr>
<tr>
<td>compress</td>
<td style="text-align:center">压缩</td>
<td>decompress</td>
<td style="text-align:center">解压缩</td>
</tr>
<tr>
<td>pack</td>
<td style="text-align:center">打包</td>
<td>unpack</td>
<td style="text-align:center">解包</td>
</tr>
<tr>
<td>parse</td>
<td style="text-align:center">解析</td>
<td>emit</td>
<td style="text-align:center">生成</td>
</tr>
<tr>
<td>connect</td>
<td style="text-align:center">连接</td>
<td>disconnect</td>
<td style="text-align:center">断开</td>
</tr>
<tr>
<td>send</td>
<td style="text-align:center">发送</td>
<td>receive</td>
<td style="text-align:center">接收</td>
</tr>
<tr>
<td>download</td>
<td style="text-align:center">下载</td>
<td>upload</td>
<td style="text-align:center">上传</td>
</tr>
<tr>
<td>refresh</td>
<td style="text-align:center">刷新</td>
<td>synchronize</td>
<td style="text-align:center">同步</td>
</tr>
<tr>
<td>update</td>
<td style="text-align:center">更新</td>
<td>revert</td>
<td style="text-align:center">复原</td>
</tr>
<tr>
<td>lock</td>
<td style="text-align:center">锁定</td>
<td>unlock</td>
<td style="text-align:center">解锁</td>
</tr>
<tr>
<td>check</td>
<td style="text-align:center">out</td>
<td>签出</td>
<td style="text-align:center">/check in 签入</td>
</tr>
<tr>
<td>submit</td>
<td style="text-align:center">提交</td>
<td>commit</td>
<td style="text-align:center">交付</td>
</tr>
<tr>
<td>push</td>
<td style="text-align:center">推</td>
<td>pull</td>
<td style="text-align:center">拉</td>
</tr>
<tr>
<td>expand</td>
<td style="text-align:center">展开</td>
<td>collapse</td>
<td style="text-align:center">折叠</td>
</tr>
<tr>
<td>begin</td>
<td style="text-align:center">起始</td>
<td>end</td>
<td style="text-align:center">结束</td>
</tr>
<tr>
<td>start</td>
<td style="text-align:center">开始</td>
<td>finish</td>
<td style="text-align:center">完成</td>
</tr>
<tr>
<td>enter</td>
<td style="text-align:center">进入</td>
<td>exit</td>
<td style="text-align:center">退出</td>
</tr>
<tr>
<td>abort</td>
<td style="text-align:center">放弃</td>
<td>quit</td>
<td style="text-align:center">离开</td>
</tr>
<tr>
<td>obsolete</td>
<td style="text-align:center">废弃</td>
<td>depreciate</td>
<td style="text-align:center">废旧</td>
</tr>
<tr>
<td>collect</td>
<td style="text-align:center">收集</td>
<td>aggregate</td>
<td style="text-align:center">聚集</td>
</tr>
</tbody>
</table>
<p>附上一段代码细细品味</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//类名</span></div><div class="line"><span class="keyword">var</span> ClassName = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//私有变量</span></div><div class="line">	<span class="keyword">var</span> _FieldName = <span class="string">"Test Field"</span>;</div><div class="line">	<span class="comment">//属性</span></div><div class="line">	<span class="keyword">this</span>.PropertyName = <span class="string">"Test Property Name"</span>;</div><div class="line">	<span class="comment">//私有方法</span></div><div class="line">	<span class="keyword">var</span> functionName = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">&#125;</div><div class="line">A：加 _ 下划线前缀  </div><div class="line"></div><div class="line"><span class="keyword">this</span>.PublicFunctionName = <span class="function"><span class="keyword">function</span><span class="params">(pTestName)</span></span>&#123;<span class="comment">//公有方法 pTestName:参数</span></div><div class="line">    <span class="comment">//局部变量</span></div><div class="line">    <span class="keyword">var</span> condition = <span class="string">"condition"</span>;</div><div class="line">    <span class="comment">//判断</span></div><div class="line">    <span class="keyword">if</span>(condition)&#123;</div><div class="line">        <span class="keyword">return</span> functionName();</div><div class="line">    &#125;<span class="keyword">else</span>&#123;&#125;</div><div class="line">    B：小写开头</div><div class="line">    <span class="comment">//数组</span></div><div class="line">    <span class="keyword">var</span> nameCol = [<span class="string">"a"</span>,<span class="string">"b"</span>]; </div><div class="line">    <span class="comment">//数组项</span></div><div class="line">    <span class="keyword">var</span> nameItem = nameCol[<span class="number">0</span>]; </div><div class="line">    <span class="comment">//循环</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nameCol.length; i++)&#123;</div><div class="line">    &#125;</div><div class="line">    C:大写开头</div><div class="line">    <span class="keyword">var</span> selectName = <span class="string">"item"</span>;</div><div class="line">    <span class="comment">//选择</span></div><div class="line">    <span class="keyword">switch</span>(selectName)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">"item"</span>:</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    D：加小写p前缀</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>要避免全局变量泛滥， 可以考虑使用匿名函数， 把不需要在外部访问的变量或者函数限制在一个比较小的范围内。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">例如以下代码:</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">var</span> list = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++)&#123;</div><div class="line">            <span class="comment">//..</span></div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    func1(); <span class="comment">//　自动运行</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这段代码的作用是在页面加载的时候自动执行某些操作， 并不需要被外部调用， 但是它执行过后却留下了一个全局的函数。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">像这种情况， 非常有必要使用匿名函数：</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">var</span> list = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++)&#123;</div><div class="line">            <span class="comment">//..</span></div><div class="line">        &#125;;</div><div class="line">    &#125;)(); <span class="comment">//　自动运行</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="匿名函数的格式："><a href="#匿名函数的格式：" class="headerlink" title="匿名函数的格式："></a>匿名函数的格式：</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">// 代码块</span></div><div class="line">&#125;)();</div><div class="line">如果要带参数的话：</div><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">(arg1, arg2, argN)</span></span>&#123;</div><div class="line">    <span class="comment">//..</span></div><div class="line">&#125;)(arg1, arg2, argN);</div></pre></td></tr></table></figure>
<h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>还有另外一个方法可以减少全局变量， 那就是命名空间， 在JS中可以用”对象-属性”来模拟命名空间；</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">window</span>.com = &#123;&#125;</div><div class="line"><span class="keyword">window</span>.com.bytter = &#123;&#125;</div><div class="line"><span class="keyword">window</span>.com.bytter.hello = <span class="keyword">function</span>()&#123;</div><div class="line">    alert(<span class="string">"hello"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你要给某个已经存在的页面增加功能， 可能要增加十多个函数， 而那个页面已经存在大量的全局变量和函数， 甚至还有函数跟你新增的函数同名， 怎么办？<br>命名空间是比较好的选择， 你可以创建一个命名空间， 把你的新函数都放在那个命名空间之下， 例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"pg.check.userAcc()"</span>&gt;</span>检查用户名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"pg.check.userAcc()"</span>&gt;</span>检查帐号<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">window</span>.pg = &#123;&#125;</div><div class="line">    <span class="built_in">window</span>.pg.check = &#123;</div><div class="line">        <span class="comment">// 检查用户名</span></div><div class="line">        userName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="comment">//..</span></div><div class="line">        &#125;,</div><div class="line">        <span class="comment">// 检查帐号</span></div><div class="line">        userAcc: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="comment">//..</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="互不干扰"><a href="#互不干扰" class="headerlink" title="互不干扰"></a>互不干扰</h3><p>结合上述的匿名函数和命名空间的使用， 可以把一个页面中自己维护的代码与其它的代码分隔开来， 将与外部代码的耦合降低到最小。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="comment">// 页面命名空间</span></div><div class="line">    <span class="built_in">window</span>.pg = &#123;&#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 检查用户信息</span></div><div class="line">    <span class="comment">// 作者：张三</span></div><div class="line">    <span class="comment">// 最后更新： 2012.12.31</span></div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 私有变量</span></div><div class="line">        <span class="keyword">var</span> a, b, c;</div><div class="line"></div><div class="line">        <span class="comment">// 检查用户信息的相关方法</span></div><div class="line">        <span class="built_in">window</span>.pg.check = &#123;</div><div class="line">            <span class="comment">// 检查用户名</span></div><div class="line">            userName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="comment">//..</span></div><div class="line">            &#125;,</div><div class="line">            <span class="comment">// 检查帐号</span></div><div class="line">            userAcc: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="comment">//..</span></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">    &#125;)(); <span class="comment">// end 张三的代码</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// xxx功能</span></div><div class="line">    <span class="comment">// 作者：李四</span></div><div class="line">    <span class="comment">// 最后更新： 2012.1.1</span></div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">window</span>.pg.xxx = &#123;</div><div class="line">            <span class="comment">//..</span></div><div class="line">        &#125;</div><div class="line">    &#125;)(); <span class="comment">// end 李四的代码</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>变量必须在使用前用var进行声明；<br>变量的声明应该放在代码块或者函数的头部；<br>可在一行内声明多个变量， 但要考虑美观易读；</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 银行名称, 银行帐号 </span></div><div class="line"><span class="keyword">var</span> type, acc;</div><div class="line"></div><div class="line"><span class="comment">// 银行名称, 银行帐号</span></div><div class="line"><span class="keyword">var</span> type = <span class="string">"中国银行"</span>, acc = <span class="string">"xxxxxx"</span>;</div><div class="line"><span class="keyword">var</span> type = <span class="string">"中国银行"</span>,   <span class="comment">// 银行名称</span></div><div class="line">    acc = <span class="string">"xxxxxx"</span>;      <span class="comment">// 银行帐号</span></div><div class="line">尽量使用易于理解的变量名，如：</div><div class="line"><span class="keyword">var</span> bankType = <span class="string">"中国银行"</span>,</div><div class="line">    bankAccount = <span class="string">"xxxxxx"</span>; </div><div class="line"><span class="comment">### 命名</span></div><div class="line">普通变量名和函数名采用<span class="string">"小驼峰式命名法"</span>， 如：firstName、lastName</div><div class="line">作为构造函数的函数采用<span class="string">"大驼峰式命名法"</span>， 如：</div><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//..</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> me = <span class="keyword">new</span> Person();</div><div class="line">常量用大写和下划线表示，如：</div><div class="line"><span class="keyword">var</span> ROOT_PATH = <span class="string">"/v10/"</span>;</div><div class="line">分号</div><div class="line">每条语句必须使用分号结尾（特别是需要压缩的js，省略分号常常会导致压缩失败）；</div><div class="line">大括号</div><div class="line"><span class="keyword">if</span>语句、函数定义、<span class="keyword">try</span>语句等带大括号的结构， 左大括号应紧跟前面的部分：</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//..</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//..</span></div><div class="line">&#125;</div><div class="line">使用复合语句时不要省略大括号&#123;&#125;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ary.length; i++)&#123;</div><div class="line">    <span class="keyword">list</span>.push(ary[i]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ary.length; i++)</div><div class="line">    <span class="keyword">list</span>.push(ary[i]);</div><div class="line">以提高代码可读性为前提，允许例外：</div><div class="line"><span class="keyword">if</span>(!data) <span class="keyword">return</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(row) <span class="keyword">list</span>.push(row);</div></pre></td></tr></table></figure>
<h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><p>数值操作符(如, +/-/*/% 等)、比较符（大于、小于、等于）两边留空格；<br>逗号、冒号、分号后要留一个空格（如果后面还有内容的话）；<br>行尾不要有空格;<br>点号前后不要出现空格；<br>函数名末尾和左括号之间不要出现空格；<br>字符串<br>表示字符串用单引号或双引号均可， 建议统一使用双引号，<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">但表示html标签时一律使用单引号， 如：</div><div class="line">var html = '&lt;div class=<span class="string">"msg"</span> &gt;&lt;/div&gt;';</div><div class="line">数组</div><div class="line">使用简便的方式定义数组：</div><div class="line"><span class="comment">// good</span></div><div class="line">var <span class="type">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">var <span class="type">list</span> = new Array();</div><div class="line"><span class="type">list</span>[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line"><span class="type">list</span>[<span class="number">1</span>] = <span class="number">2</span>;</div><div class="line"><span class="type">list</span>[<span class="number">2</span>] = <span class="number">3</span>;</div></pre></td></tr></table></figure></p>
<h2 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><pre><code>语法：
// 这是单行注释
</code></pre><p>使用方式：</p>
<blockquote>
<ol>
<li>单独一行：//(双斜线)与注释文字之间保留一个空格。</li>
<li>在代码后面添加注释：//(双斜线)与代码之间保留一个空格，并且//(双斜线)与注释文字之间保留一个空格。</li>
<li>注释代码：//(双斜线)与代码之间保留一个空格。</li>
</ol>
</blockquote>
<p>示例：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 调用了一个函数；1)单独在一行</span></div><div class="line">setTitle();</div><div class="line"><span class="keyword">var</span> maxCount = <span class="number">10</span>; <span class="comment">// 设置最大量；2)在代码后面注释</span></div><div class="line"><span class="comment">// setName(); // 3)注释代码</span></div></pre></td></tr></table></figure>
<h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><pre><code>语法：/* 注释说明 */
</code></pre><p>使用方法：</p>
<blockquote>
<ol>
<li>若开始(/<em>)和结束(</em>/)都在一行，推荐采用单行注释。</li>
<li>若至少三行注释时，第一行为/<em>，最后行为</em>/，其他行以<em>开始，并且注释文字与</em>保留一个空格。</li>
</ol>
</blockquote>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">* 代码执行到这里后会调用<span class="built_in">set</span>Title()函数</div><div class="line">* <span class="built_in">set</span>Title()：设置title的值</div><div class="line">*/</div><div class="line"><span class="built_in">set</span>Title();</div></pre></td></tr></table></figure>
<h3 id="函数-方法-注释"><a href="#函数-方法-注释" class="headerlink" title="函数(方法)注释"></a>函数(方法)注释</h3><p>说明：函数(方法)注释也是多行注释的一种，但是包含了特殊的注释要求，参照 javadoc(百度百科)。</p>
<p>语法：</p>
<pre><code>/** 
* 函数说明 
* @关键字 
*/
</code></pre><p>常用注释关键字：(只列出一部分，并不是全部)</p>
<p>示例：</p>
<table>
<thead>
<tr>
<th style="text-align:left">注释名</th>
<th>语法</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">@name</td>
<td>@name 名称</td>
<td>@name WacthClock</td>
</tr>
<tr>
<td style="text-align:left">@author</td>
<td>@author 作者 邮箱</td>
<td>@author Luuman <a href="&#x6d;&#97;&#x69;&#108;&#116;&#x6f;&#x3a;&#x6c;&#117;&#x75;&#x6d;&#97;&#110;&#115;&#64;&#113;&#x71;&#x2e;&#99;&#111;&#x6d;">&#x6c;&#117;&#x75;&#x6d;&#97;&#110;&#115;&#64;&#113;&#x71;&#x2e;&#99;&#111;&#x6d;</a></td>
</tr>
<tr>
<td style="text-align:left">@brief</td>
<td>@brief  描述</td>
<td>@brief this is watch for clock in canvas.</td>
</tr>
<tr>
<td style="text-align:left">@dateTime</td>
<td>@dateTime 时间</td>
<td>@dateTime 2016-11-27</td>
</tr>
<tr>
<td style="text-align:left">@moreInfo</td>
<td>@moreInfo 链接</td>
<td>@moreInfo luuman.github.io/[link]</td>
</tr>
<tr>
<td style="text-align:left">@version</td>
<td>@version XX.XX.XX</td>
<td>@version 1.0.3</td>
</tr>
<tr>
<td style="text-align:left">@param</td>
<td>@param 名 {[type]}  描述信息</td>
<td>@param name {String} 传入名称</td>
</tr>
<tr>
<td style="text-align:left">@return</td>
<td>@return {[type]} 描述信息</td>
<td>@return {Boolean} true:可执行;false:不可执行</td>
</tr>
<tr>
<td style="text-align:left">@example</td>
<td>@example 示例代码</td>
<td>@example WacthClock({});</td>
</tr>
</tbody>
</table>
<figure class="highlight julia"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * <span class="meta">@name</span>     WacthClock              watch clock js</div><div class="line"> * <span class="meta">@author</span>   Luuman                  &lt;luumans<span class="meta">@qq</span>.com&gt;</div><div class="line"> * <span class="meta">@brief</span>    this is watch <span class="keyword">for</span> clock <span class="keyword">in</span> canvas.</div><div class="line"> * <span class="meta">@dateTime</span> <span class="number">2016</span>-<span class="number">11</span>-<span class="number">27</span></div><div class="line"> * <span class="meta">@moreInfo</span> luuman.github.io/[link]</div><div class="line"> * <span class="meta">@version</span>  <span class="number">1.0</span><span class="number">.0</span></div><div class="line"> * <span class="meta">@param</span>    &#123;[<span class="keyword">type</span>]&#125;</div><div class="line"> * <span class="meta">@param</span>    &#123;[<span class="keyword">type</span>]&#125;</div><div class="line"> * <span class="meta">@param</span>    &#123;[<span class="keyword">type</span>]&#125;</div><div class="line"> * <span class="meta">@return</span>   &#123;[<span class="keyword">type</span>]&#125;</div><div class="line"> * <span class="meta">@example</span> WacthClock(&#123;&#125;);</div><div class="line"> */</div></pre></td></tr></table></figure>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/<span class="symbol">*</span><span class="symbol">*</span></div><div class="line"><span class="symbol">*</span> 合并Grid的行</div><div class="line"><span class="symbol">*</span> <span class="meta">@param</span> grid &#123;Ext.Grid.Panel&#125; 需要合并的Grid</div><div class="line"><span class="symbol">*</span> <span class="meta">@param</span> cols &#123;Array&#125; 需要合并列的Index(序号)数组；从0开始计数，序号也包含。</div><div class="line"><span class="symbol">*</span> <span class="meta">@param</span> isAllSome &#123;Boolean&#125; ：是否2个tr的cols必须完成一样才能进行合并。true：完成一样；false(默认)：不完全一样</div><div class="line"><span class="symbol">*</span> <span class="meta">@return</span> void</div><div class="line"><span class="symbol">*</span> <span class="meta">@author</span> polk6 2015/07/21 </div><div class="line"><span class="symbol">*</span> <span class="meta">@example</span></div><div class="line"><span class="symbol">*</span> _________________                             _________________</div><div class="line"><span class="symbol">*</span> |<span class="string">  年龄 </span>|<span class="string">  姓名 </span>|<span class="string">                             </span>|<span class="string">  年龄 </span>|<span class="string">  姓名 </span>|</div><div class="line"><span class="symbol">*</span> -----------------      mergeCells(grid,[0])   -----------------</div><div class="line"><span class="symbol">*</span> |<span class="string">  18   </span>|<span class="string">  张三 </span>|<span class="string">              =&gt;             </span>|<span class="string">       </span>|<span class="string">  张三 </span>|</div><div class="line"><span class="symbol">*</span> -----------------                             -  18   ---------</div><div class="line"><span class="symbol">*</span> |<span class="string">  18   </span>|<span class="string">  王五 </span>|<span class="string">                             </span>|<span class="string">       </span>|<span class="string">  王五 </span>|</div><div class="line"><span class="symbol">*</span> -----------------                             -----------------</div><div class="line"><span class="symbol">*</span>/</div><div class="line">function mergeCells(grid, cols, isAllSome) &#123;</div><div class="line">    // Do Something</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://www.cnblogs.com/polk6/p/4660195.html" target="_blank" rel="external">JavaScript 开发规范</a><br><a href="http://www.codeweblog.com/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/" target="_blank" rel="external">javascript学习笔记(一)基础知识</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;规范：&lt;/strong&gt;你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！&lt;br&gt;
    
    </summary>
    
      <category term="Norm" scheme="http://luuman.github.io/categories/Norm/"/>
    
    
      <category term="Javascript" scheme="http://luuman.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>HTML前端代码规范</title>
    <link href="http://luuman.github.io/2016/12/31/Skill/norm/normhtml/"/>
    <id>http://luuman.github.io/2016/12/31/Skill/norm/normhtml/</id>
    <published>2016-12-31T10:29:00.000Z</published>
    <updated>2017-03-20T03:04:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>规范：</strong>你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！<br><a id="more"></a></p>
<h2 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h2><h3 id="HTML基础设施"><a href="#HTML基础设施" class="headerlink" title="HTML基础设施"></a>HTML基础设施</h3><p>文件应以“&lt;!DOCTYPE ……&gt;”首行顶格开始，推荐使用“&lt;!DOCTYPE html&gt;”。<br>必须申明文档的编码charset，且与文件本身编码保持一致，推荐使用UTF-8编码<meta charset="utf-8">。<br>根据页面内容和需求填写适当的keywords和description。<br>页面title是极为重要的不可缺少的一项。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>NEC：更好的CSS方案<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/style.css"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"img/favicon.ico"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">href</span>=<span class="string">"img/touchicon.png"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="结构顺序和视觉顺序基本保持一致"><a href="#结构顺序和视觉顺序基本保持一致" class="headerlink" title="结构顺序和视觉顺序基本保持一致"></a>结构顺序和视觉顺序基本保持一致</h3><p>按照从上至下、从左到右的视觉顺序书写HTML结构。<br>有时候为了便于搜索引擎抓取，我们也会将重要内容在HTML结构顺序上提前。<br>用div代替table布局，可以使HTML更具灵活性，也方便利用CSS控制。<br>table不建议用于布局，但表现具有明显表格形式的数据，table还是首选。<br>结构、表现、行为三者分离，避免内联<br>使用link将css文件引入，并置于head中。<br>使用script将js文件引入，并置于body底部。<br>保持良好的简洁的树形结构<br>每一个块级元素都另起一行，每一行都使用Tab缩进对齐（head和body的子元素不需要缩进）。删除冗余的行尾的空格。<br>使用4个空格代替1个Tab（大多数编辑器中可设置）。<br>对于内容较为简单的表格，建议将tr写成单行。<br>你也可以在大的模块之间用空行隔开，使模块更清晰。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 侧栏内容区 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"m-side"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"side"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidein"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 热门标签 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sideblk"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"m-hd3"</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"tit"</span>&gt;</span>热门标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                ...</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 最热TOP5 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sideblk"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"m-hd3"</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"tit"</span>&gt;</span>最热TOP5<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"s-fc02 f-fr"</span>&gt;</span>更多»<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                ...</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- /侧栏内容区 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="另外，请做到以下几点"><a href="#另外，请做到以下几点" class="headerlink" title="另外，请做到以下几点"></a>另外，请做到以下几点</h3><ol>
<li>结构上如果可以并列书写，就不要嵌套。如果可以写成<code>&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;</code>那么就不要写成<code>&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;</code></li>
<li>如果结构已经可以满足视觉和语义的要求，那么就不要有额外的冗余的结构。比如<code>&lt;div&gt;&lt;h2&gt;&lt;/h2&gt;&lt;/div&gt;</code>已经能满足要求，那么就不要再写成<code>&lt;div&gt;&lt;div&gt;&lt;h2&gt;&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;</code></li>
<li>一个标签上引用的className不要过多，越少越好。比如不要出现这种情况：<code>&lt;div class=&quot;class1 class2 class3 class4&quot;&gt;&lt;/div&gt;</code></li>
<li>对于一个语义化的内部标签，应尽量避免使用className。比如在这样一个列表中，li标签中的itm应去除：<code>&lt;ul class=&quot;m-help&quot;&gt;&lt;li class=&quot;itm&quot;&gt;&lt;/li&gt;&lt;li class=&quot;itm&quot;&gt;&lt;/li&gt;&lt;/ul&gt;</code></li>
</ol>
<h2 id="代码格式"><a href="#代码格式" class="headerlink" title="代码格式"></a>代码格式</h2><h3 id="说明文案的注释方法"><a href="#说明文案的注释方法" class="headerlink" title="说明文案的注释方法"></a>说明文案的注释方法</h3><p>采用类似标签闭合的写法，与HTML统一格式；注释文案两头空格，与CSS注释统一格式。</p>
<p>开始注释：<!-- 注释文案 -->（文案两头空格）。<br>结束注释：<!-- /注释文案 -->（文案前加“/”符号，类似标签的闭合）。<br>允许只有开始注释！</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 头部 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"g-hd"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- LOGO --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"m-logo"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>LOGO<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- /LOGO --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 导航 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"m-nav"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>NAV1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>NAV2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 更多导航项 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- /导航 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- /头部 --&gt;</span></div></pre></td></tr></table></figure>
<h3 id="代码本身的注释方法"><a href="#代码本身的注释方法" class="headerlink" title="代码本身的注释方法"></a>代码本身的注释方法</h3><p>单行代码的注释也保持同行，两端空格；多行代码的注释起始和结尾都另起一行并左缩进对齐。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- &lt;h1 class="m-logo"&gt;&lt;a href="#"&gt;LOGO&lt;/a&gt;&lt;/h1&gt; --&gt;</span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">&lt;ul class="m-nav"&gt;</div><div class="line">    &lt;li&gt;&lt;a href="#"&gt;NAV1&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;li&gt;&lt;a href="#"&gt;NAV2&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">--&gt;</div></pre></td></tr></table></figure>
<h3 id="HTML注释在IE6中的BUG"><a href="#HTML注释在IE6中的BUG" class="headerlink" title="HTML注释在IE6中的BUG"></a>HTML注释在IE6中的BUG</h3><p>如果两个浮动元素之间存在注释，那么可能导致布局错位或文字的BUG。<br>所以，这种情况下，我们通常将注释去掉，或者索性采用模板语言（ftl、vm）的注释。</p>
<h3 id="严格的嵌套"><a href="#严格的嵌套" class="headerlink" title="严格的嵌套"></a>严格的嵌套</h3><p>尽可能以最严格的xhtml strict标准来嵌套，比如内联元素不能包含块级元素等等。<br>正确闭合标签且必须闭合。</p>
<h3 id="严格的属性"><a href="#严格的属性" class="headerlink" title="严格的属性"></a>严格的属性</h3><p>属性和值全部小写，每个属性都必须有一个值，每个值必须加双引号。<br>没有值的属性必须使用自己的名称做为值（checked、disabled、readonly、selected等等）。<br>可以省略style标签和script标签的type属性。</p>
<h3 id="常用的标签"><a href="#常用的标签" class="headerlink" title="常用的标签"></a>常用的标签</h3><table>
<thead>
<tr>
<th>标签</th>
<th>语义</th>
<th style="text-align:center">嵌套常见错误</th>
<th>常用属性（加粗的为不可缺少的或建议的）</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>超链接/锚</td>
<td style="text-align:center">a不可嵌套a</td>
<td>href,name,title,rel,target</td>
</tr>
<tr>
<td>br</td>
<td>换行</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>button</td>
<td>按钮</td>
<td style="text-align:center">不可嵌套表单元素</td>
<td>type,disabled</td>
</tr>
<tr>
<td>dd</td>
<td>定义列表中的定义（描述内容）</td>
<td style="text-align:center">只能以dl为父容器，对应一个dt</td>
<td></td>
</tr>
<tr>
<td>del</td>
<td>文本删除</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>div</td>
<td>块级容器</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>dl</td>
<td>定义列表</td>
<td style="text-align:center">只能嵌套dt和dd</td>
<td></td>
</tr>
<tr>
<td>dt</td>
<td>定义列表中的定义术语</td>
<td style="text-align:center">只能以dl为父容器，对应多个dd</td>
<td></td>
</tr>
<tr>
<td>em</td>
<td>强调文本</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>form</td>
<td>表单</td>
<td style="text-align:center">action</td>
<td>,target,method,name</td>
</tr>
<tr>
<td>h1</td>
<td>标题</td>
<td style="text-align:center">从h1到h6，不可嵌套块级元素</td>
<td></td>
</tr>
<tr>
<td>iframe</td>
<td>内嵌一个网页</td>
<td style="text-align:center">frameborder</td>
<td>,width,height,src,scrolling,name</td>
</tr>
<tr>
<td>img</td>
<td>图像</td>
<td style="text-align:center">alt</td>
<td>,src,width,height</td>
</tr>
<tr>
<td>input</td>
<td>各种表单控件</td>
<td style="text-align:center">type</td>
<td>,name,value,checked,disabled,maxlength,readonly,accesskey</td>
</tr>
<tr>
<td>label</td>
<td>标签为input元素定义标注</td>
<td style="text-align:center">for</td>
<td></td>
</tr>
<tr>
<td>li</td>
<td>列表项</td>
<td style="text-align:center">只能以ul或ol为父容器</td>
<td></td>
</tr>
<tr>
<td>link</td>
<td>引用样式或icon</td>
<td style="text-align:center">不可嵌套任何元素</td>
<td>type,rel,href</td>
</tr>
<tr>
<td>meta</td>
<td>文档信息</td>
<td style="text-align:center">只用于head</td>
<td>content,http-equiv,name</td>
</tr>
<tr>
<td>ol</td>
<td>有序列表</td>
<td style="text-align:center">只能嵌套li</td>
<td></td>
</tr>
<tr>
<td>option</td>
<td>select中的一个选项</td>
<td style="text-align:center">仅用于select</td>
<td>value,selected,disabled</td>
</tr>
<tr>
<td>p</td>
<td>段落</td>
<td style="text-align:center">不能嵌套块级元素</td>
<td></td>
</tr>
<tr>
<td>script</td>
<td>引用脚本</td>
<td style="text-align:center">不可嵌套任何元素</td>
<td>type,src</td>
</tr>
<tr>
<td>select</td>
<td>列表框或下拉框</td>
<td style="text-align:center">只能嵌套option或optgroup</td>
<td>name,disabled,multiple</td>
</tr>
<tr>
<td>span</td>
<td>内联容器</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>strong</td>
<td>强调文本</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>style</td>
<td>引用样式</td>
<td style="text-align:center">不可嵌套任何元素</td>
<td>type,media</td>
</tr>
<tr>
<td>sub</td>
<td>下标</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>sup</td>
<td>上标</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>table</td>
<td>表格</td>
<td style="text-align:center">只可嵌套表格元素</td>
<td>width,align,background,cellpadding,cellspacing,summary,border</td>
</tr>
<tr>
<td>tbody</td>
<td>表格主体</td>
<td style="text-align:center">只用于table</td>
<td></td>
</tr>
<tr>
<td>td</td>
<td>表格中的单元格</td>
<td style="text-align:center">只用于tr</td>
<td>colspan,rowspan</td>
</tr>
<tr>
<td>textarea</td>
<td>多行文本输入控件</td>
<td style="text-align:center">name</td>
<td>,accesskey,disabled,readonly,rows,cols</td>
</tr>
<tr>
<td>tfoot</td>
<td>表格表尾</td>
<td style="text-align:center">只用于table</td>
<td></td>
</tr>
<tr>
<td>th</td>
<td>表格中的标题单元格</td>
<td style="text-align:center">只用于tr</td>
<td>colspan,rowspan</td>
</tr>
<tr>
<td>thead</td>
<td>表格表头</td>
<td style="text-align:center">只用于table</td>
<td></td>
</tr>
<tr>
<td>title</td>
<td>文档标题</td>
<td style="text-align:center">只用于head</td>
<td></td>
</tr>
<tr>
<td>tr</td>
<td>表格行</td>
<td style="text-align:center">嵌套于table或thead、tbody、tfoot</td>
<td></td>
</tr>
<tr>
<td>ul</td>
<td>无序列表</td>
<td style="text-align:center">只能嵌套li</td>
</tr>
</tbody>
</table>
<h2 id="内容语义"><a href="#内容语义" class="headerlink" title="内容语义"></a>内容语义</h2><h3 id="CSS文件的分类"><a href="#CSS文件的分类" class="headerlink" title="CSS文件的分类"></a>CSS文件的分类</h3><h3 id="内容类型决定使用的语义标签"><a href="#内容类型决定使用的语义标签" class="headerlink" title="内容类型决定使用的语义标签"></a>内容类型决定使用的语义标签</h3><p>在网页中某种类型的内容必定需要某种特定的HTML标签来承载，也就是我们常常提到的根据你的内容语义化HTML结构。</p>
<h3 id="加强“资源型”内容的可访问性和可用性"><a href="#加强“资源型”内容的可访问性和可用性" class="headerlink" title="加强“资源型”内容的可访问性和可用性"></a>加强“资源型”内容的可访问性和可用性</h3><p>在资源型的内容上加入描述文案，比如给img添加alt属性，在audio内加入文案和链接等等。</p>
<h3 id="加强“不可见”内容的可访问性"><a href="#加强“不可见”内容的可访问性" class="headerlink" title="加强“不可见”内容的可访问性"></a>加强“不可见”内容的可访问性</h3><p>背景图上的文字应该同时写在html中，并使用css使其不可见，有利于搜索引擎抓取你的内容，也可以在css失效的情况下看到内容。</p>
<h3 id="适当使用实体"><a href="#适当使用实体" class="headerlink" title="适当使用实体"></a>适当使用实体</h3><p>以实体代替与HTML语法相同的字符，避免浏览解析错误。</p>
<h3 id="常用HTML字符实体（建议使用实体）："><a href="#常用HTML字符实体（建议使用实体）：" class="headerlink" title="常用HTML字符实体（建议使用实体）："></a>常用HTML字符实体（建议使用实体）：</h3><table>
<thead>
<tr>
<th>字符</th>
<th style="text-align:center">名称</th>
<th>实体名</th>
<th style="text-align:center">实体数</th>
</tr>
</thead>
<tbody>
<tr>
<td>“</td>
<td style="text-align:center">双引号</td>
<td>&quot;</td>
<td style="text-align:center">&#34;</td>
</tr>
<tr>
<td>&amp;</td>
<td style="text-align:center">&amp;符</td>
<td>&amp;</td>
<td style="text-align:center">&#38;</td>
</tr>
<tr>
<td>&lt;</td>
<td style="text-align:center">左尖括号（小于号）</td>
<td>&lt;</td>
<td style="text-align:center">&#60;</td>
</tr>
<tr>
<td>&gt;</td>
<td style="text-align:center">右尖括号（大于号）</td>
<td>&gt;</td>
<td style="text-align:center">&#62;</td>
</tr>
<tr>
<td></td>
<td style="text-align:center">空格</td>
<td>&nbsp;</td>
<td style="text-align:center">&#160;</td>
</tr>
<tr>
<td></td>
<td style="text-align:center">中文全角空格</td>
<td></td>
<td style="text-align:center">&#12288;</td>
</tr>
</tbody>
</table>
<p>常用特殊字符实体（不建议使用实体）：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th style="text-align:center">名称</th>
<th>实体名</th>
<th style="text-align:center">实体数</th>
</tr>
</thead>
<tbody>
<tr>
<td>¥</td>
<td style="text-align:center">元</td>
<td>&yen;</td>
<td style="text-align:center">&#165;</td>
</tr>
<tr>
<td>¦</td>
<td style="text-align:center">断竖线</td>
<td>&brvbar;</td>
<td style="text-align:center">&#166;</td>
</tr>
<tr>
<td>©</td>
<td style="text-align:center">版权</td>
<td>&copy;</td>
<td style="text-align:center">&#169;</td>
</tr>
<tr>
<td>®</td>
<td style="text-align:center">注册商标R</td>
<td>&reg;</td>
<td style="text-align:center">&#174;</td>
</tr>
<tr>
<td>™</td>
<td style="text-align:center">商标TM</td>
<td>&trade;</td>
<td style="text-align:center">&#8482;</td>
</tr>
<tr>
<td>·</td>
<td style="text-align:center">间隔符</td>
<td>&middot;</td>
<td style="text-align:center">&#183;</td>
</tr>
<tr>
<td>«</td>
<td style="text-align:center">左双尖括号</td>
<td>&laquo;</td>
<td style="text-align:center">&#171;</td>
</tr>
<tr>
<td>»</td>
<td style="text-align:center">右双尖括号</td>
<td>&raquo;</td>
<td style="text-align:center">&#187;</td>
</tr>
<tr>
<td>°</td>
<td style="text-align:center">度</td>
<td>&deg;</td>
<td style="text-align:center">&#176;</td>
</tr>
<tr>
<td>×</td>
<td style="text-align:center">乘</td>
<td>&times;</td>
<td style="text-align:center">&#215;</td>
</tr>
<tr>
<td>÷</td>
<td style="text-align:center">除</td>
<td>&divide;</td>
<td style="text-align:center">&#247;</td>
</tr>
<tr>
<td>‰</td>
<td style="text-align:center">千分比</td>
<td>&permil;</td>
<td style="text-align:center">&#8240;</td>
</tr>
</tbody>
</table>
<h2 id="邮件内容"><a href="#邮件内容" class="headerlink" title="邮件内容"></a>邮件内容</h2><h3 id="邮件环境"><a href="#邮件环境" class="headerlink" title="邮件环境"></a>邮件环境</h3><p>邮件内容所在上下文或者说所在外部容器（以下简称环境）都是由邮箱服务商决定的，这就要求邮件内容需要在任何一种情况下都要正确显示。<br>这些环境可能是以下某几种情况：</p>
<ol>
<li>可能是个iframe，你的内容是被放在body里面的；可能只是个div，你的内容就被放在这个div里面。</li>
<li>可能邮箱自身设置了些css，他可能对你产生未知的影响。</li>
<li>可能根本没有申明doctype，即使申明了，也不是你想要的doctype。</li>
</ol>
<h3 id="避免被嵌套在不正确的容器里"><a href="#避免被嵌套在不正确的容器里" class="headerlink" title="避免被嵌套在不正确的容器里"></a>避免被嵌套在不正确的容器里</h3><p>惑：因为容器可能是body或div，所以，我们邮件内容不应该是一个完整的html。<br>解：所以邮件内容应该是以div为根节点的html片段。</p>
<h3 id="避免css冲突或被覆盖"><a href="#避免css冲突或被覆盖" class="headerlink" title="避免css冲突或被覆盖"></a>避免css冲突或被覆盖</h3><p>惑：因为环境中可能已经设置了css，比如一些reset、一些.class。<br>解：所以我们只能使用行内style来确保我们的效果，并且在内容根节点上设置基础style，并且尽量使用div、span等无语义标签。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 根节点 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:600px;text-align:left;color:#000;font:normal 12px/15px arial,simsun;background:#fff;"</span>&gt;</span></div><div class="line">    内容区域</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 根节点-邮件内容居中 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:600px;margin:0 auto;text-align:left;color:#000;font:normal 12px/15px arial,simsun;background:#fff;"</span>&gt;</span></div><div class="line">        内容区域</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 如果使用语义化标签，那么需要多写一些style，以避免被环境中的css覆盖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">"width:100px;height:100px;margin:0;padding:0;fong-weight:normal;font-size:12px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 而使用无语义标签，就可以省下很多style --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:100px;height:100px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="避免盒模型错误"><a href="#避免盒模型错误" class="headerlink" title="避免盒模型错误"></a>避免盒模型错误</h3><p>惑：因为doctype的不确定性，我们在写style的时候，应该考虑无论doctype是什么情况，都可以正常显示，doctype影响最大的就是盒模型的解析。<br>解：所以我们要将盒模型拆分开来写，比如我们将原本要定义在某个div上的height和padding分别写到这个div和他的父元素或子元素上。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:100px;padding:20px 0;"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 上面的写法应该改成以下写法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"padding:20px 0;"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:100px;"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h3><p>因为只能使用行内style，所以清除浮动需要使用额外标签。<br>避免使用绝对定位，可能会被过滤。<br>避免使用js，可能会被过滤。<br>避免使用table布局，不易于修改维护。<br>背景图片或内容图片上的文字信息，必须在代码中可见。<br>如果没有特殊要求，所有a链接都要从新窗口打开，即target=”_blank”，且a标签内容不能为空。<br>所有链接必须设置使用颜色、是否下划线，即style=”text-decoration:;color:;”。<br>重点检查ie！！！</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:600px;text-align:left;color:#000;font:normal 12px/15px simsun;background:#d9d9d9;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:268px;background:url(images/bg1.jpg) no-repeat;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:228px;"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"padding:21px 0 0 21px;"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://yuedu.163.com/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">style</span>=<span class="string">"display:block;width:111px;height:28px;overflow:hidden;text-indent:-2000px;text-decoration:none;"</span> <span class="attr">title</span>=<span class="string">"网易阅读-随时随地品质阅读"</span>&gt;</span>网易阅读-随时随地品质阅读<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">"margin:0;padding:0;width:0;height:0;overflow:hidden;text-indent:-2000px;"</span>&gt;</span>你的iPad够有料吗？iPad不等于愤怒的小鸟！不等于切水果！下载网易阅读，给你的iPad添点料，打造你独一无二的iPad！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"padding:0 0 0 35px;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://itunes.apple.com/cn/app/id421092396?mt=8"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">style</span>=<span class="string">"color:#f00;text-decoration:none;"</span> <span class="attr">title</span>=<span class="string">"下载网易阅读"</span>&gt;</span>下载网易阅读<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="发现的问题及解决方案"><a href="#发现的问题及解决方案" class="headerlink" title="发现的问题及解决方案"></a>发现的问题及解决方案</h3><p>问题：部分智能手机的邮件客户端可能会有只显示部分的bug（宽度被截）。<br>解决：在外面套一个同宽的table即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;table width=<span class="string">"600"</span> cellpadding=<span class="string">"0"</span> cellspacing=<span class="string">"0"</span> border=<span class="string">"0"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:600px;text-align:left;color:#000;font:normal 12px/15px simsun;background:#d9d9d9;"</span>&gt;</span></div><div class="line">        ......</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="使用框架"><a href="#使用框架" class="headerlink" title="使用框架"></a>使用框架</h3><p>推荐使用 email框架 来创建邮件内容。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">border</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:600px;text-align:left;font:12px/15px simsun;color:#000;background:#fff;"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 水平居左的邮件 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">style</span>=<span class="string">"margin:0 auto;"</span>&gt;</span><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:600px;text-align:left;font:12px/15px simsun;color:#000;background:#fff;"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 水平居中的邮件 --&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://www.jianshu.com/p/8d291d823cc0#" title="web前端规范" target="_blank" rel="external">web前端规范</a><br><a href="https://github.com/mishe/blog/issues/125" title="前端开发 @ 资邦集团（上海）" target="_blank" rel="external">新公司的前端开发规范（初稿） #125</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;规范：&lt;/strong&gt;你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！&lt;br&gt;
    
    </summary>
    
      <category term="Norm" scheme="http://luuman.github.io/categories/Norm/"/>
    
    
      <category term="CSS" scheme="http://luuman.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>前端开发代码规范</title>
    <link href="http://luuman.github.io/2016/12/31/Skill/norm/normdev/"/>
    <id>http://luuman.github.io/2016/12/31/Skill/norm/normdev/</id>
    <published>2016-12-31T10:29:00.000Z</published>
    <updated>2017-03-20T03:04:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>规范：</strong>你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！<br><a id="more"></a></p>
<h2 id="开发准备"><a href="#开发准备" class="headerlink" title="开发准备"></a>开发准备</h2><h3 id="了解产品和设计"><a href="#了解产品和设计" class="headerlink" title="了解产品和设计"></a>了解产品和设计</h3><ol>
<li>参加需求、交互、视觉会议，了解产品设计和项目成员。</li>
<li>了解产品面向的设备和平台。</li>
<li>了解产品对兼容性的要求以及是否采用响应式设计等。</li>
<li>了解产品要使用的技术（WEB技术、桌面技术、APP技术、模板语言、混合模式等）。</li>
</ol>
<h3 id="提出疑问和见解"><a href="#提出疑问和见解" class="headerlink" title="提出疑问和见解"></a>提出疑问和见解</h3><ol>
<li>在交互或视觉会议中结合技术要求，提出疑问和见解。</li>
<li>提出可能存在的问题（技术实现问题、性能问题等），协商解决方案（如优雅退化）并达成共识。</li>
<li>提出已有新技术可能在产品中的应用场景，协助产品创新。</li>
</ol>
<h3 id="技术调研和培训"><a href="#技术调研和培训" class="headerlink" title="技术调研和培训"></a>技术调研和培训</h3><ol>
<li>是否需要技术调研，提出可能存在的风险。</li>
<li>进行技术调研，产出技术demo，展示demo，反馈调研结果。</li>
<li>技术调研的内容可以先咨询经验丰富的前端工程师或前端技术组。</li>
<li>经验不足或新入职员工，可提出培训申请。</li>
<li>你可以把难以解决的技术问题提交给NEC，NEC将帮助你解决问题。</li>
<li>了解NEC，特别是代码规范和技术demo。</li>
</ol>
<h3 id="预算人力和时间"><a href="#预算人力和时间" class="headerlink" title="预算人力和时间"></a>预算人力和时间</h3><ol>
<li>根据项目时间要求及工作量，预算人力和时间。</li>
<li>预算开发周期和阶段性产出。</li>
<li>提醒需求方在项目管理平台中创建项目并加入项目成员，创建SVN并设置成员权限。</li>
</ol>
<h2 id="开发准备-1"><a href="#开发准备-1" class="headerlink" title="开发准备"></a>开发准备</h2><h3 id="CSS文件的分类"><a href="#CSS文件的分类" class="headerlink" title="CSS文件的分类"></a>CSS文件的分类</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;规范：&lt;/strong&gt;你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！&lt;br&gt;
    
    </summary>
    
      <category term="Norm" scheme="http://luuman.github.io/categories/Norm/"/>
    
    
      <category term="Development" scheme="http://luuman.github.io/tags/Development/"/>
    
  </entry>
  
  <entry>
    <title>React Native Text</title>
    <link href="http://luuman.github.io/2016/12/27/FrontFrame/ReactNative/Components/RNCText/"/>
    <id>http://luuman.github.io/2016/12/27/FrontFrame/ReactNative/Components/RNCText/</id>
    <published>2016-12-27T10:29:00.000Z</published>
    <updated>2017-03-20T03:04:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><p>按官方文档的话来说，Text它也支持嵌套，样式和触摸处理。</p>
<h4 id="Props属性"><a href="#Props属性" class="headerlink" title="Props属性"></a>Props属性</h4><h5 id="accessible-bool"><a href="#accessible-bool" class="headerlink" title="accessible bool"></a>accessible bool</h5><p>文本可以显示的行数<br>clip is working only for iOS</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">accessible</span>=&#123;<span class="literal">true</span>&#125;</div></pre></td></tr></table></figure>
<h5 id="numberOfLines-number"><a href="#numberOfLines-number" class="headerlink" title="numberOfLines number"></a>numberOfLines number</h5><p>文本可以显示的行数</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">numberOfLines</span>=&#123;<span class="number">1</span>&#125;</div></pre></td></tr></table></figure>
<h5 id="onLayout-function"><a href="#onLayout-function" class="headerlink" title="onLayout function"></a>onLayout function</h5><p>布局发生变化时调用</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attribute">nativeEvent</span>: &#123;layout: &#123;x, y, width, height&#125;&#125;&#125;</div></pre></td></tr></table></figure>
<h5 id="onLongPress-function"><a href="#onLongPress-function" class="headerlink" title="onLongPress function"></a>onLongPress function</h5><p>长按事件</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">onLongPress</span>=&#123;this.increaseSize&#125;&gt;</div></pre></td></tr></table></figure>
<h5 id="onPress-function"><a href="#onPress-function" class="headerlink" title="onPress function"></a>onPress function</h5><p>按下或者点击事件</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onPress=&#123;<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'1st'</span>)&#125;</div></pre></td></tr></table></figure>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="嵌套："><a href="#嵌套：" class="headerlink" title="嵌套："></a>嵌套：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, Text &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TitleNested</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Text</span>&gt;</span></span></div><div class="line">        TitleNested地方</div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;&#123;fontWeight:</span> '<span class="attr">bold</span>', <span class="attr">fontSize:</span> <span class="attr">20</span>&#125;&#125;&gt;</span></div><div class="line">          I am bold地方</div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span> '<span class="attr">red</span>'&#125;&#125;&gt;</span></div><div class="line">            and red地方</div><div class="line">          <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'TitleNested'</span>, () =&gt; TitleNested);</div></pre></td></tr></table></figure>
<h4 id="简书："><a href="#简书：" class="headerlink" title="简书："></a>简书：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TitleStyle</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.title_view&#125;</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.title_text&#125;</span>&gt;</span>简书<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">numberOfLines</span>=<span class="string">&#123;1&#125;</span> <span class="attr">style</span>=<span class="string">&#123;styles.content_title_text&#125;</span>&gt;</span>不想过低配的人生，请先看看这本书<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.source_view&#125;</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.source_text&#125;</span>&gt;</span>余小鱼MsYu<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.source_text&#125;</span>&gt;</span>阅读7975<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">accessibilityLabel</span>=<span class="string">&#123;</span>'<span class="attr">Tap</span> <span class="attr">me</span>!'&#125; <span class="attr">accessible</span>=<span class="string">&#123;true&#125;</span> <span class="attr">numberOfLines</span>=<span class="string">&#123;2&#125;</span> <span class="attr">style</span>=<span class="string">&#123;styles.content_title_text&#125;</span>&gt;</span>我们熟悉的两种人生姿势：“飞黄腾达”和“赖在地上”。雾满拦江告诉你第三种：两脚不离大地，拼命向上生长。 ——《我不过低配的人生》<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.content_text&#125;</span>&gt;</span>作者是雾满拦江。乍一看，这名字很熟，似乎在哪里见过或听过，但具体不太了解。随即翻开简介，了解到：著名作家，“心学讲武堂”创始人，幽默写史领军人物。他写历史、职场，也写百态人情。其人特立独行、学识颇丰，其文辛辣生猛、犀利幽默，读之可以下酒。代表作有《神奇圣人王阳明》《别笑，这是大清正史》《民国就是这么生猛》《推背图中的历史》等。<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">container</span>: &#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">backgroundColor</span>:<span class="string">'#FFF'</span>,</div><div class="line">  &#125;,</div><div class="line">   <span class="attr">title_view</span>:&#123;</div><div class="line">    <span class="attr">flexDirection</span>:<span class="string">'row'</span>,</div><div class="line">    <span class="attr">height</span>:<span class="number">50</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'#E45E46'</span>,</div><div class="line">  &#125;,</div><div class="line">   <span class="attr">title_text</span>:&#123;</div><div class="line">    <span class="attr">color</span>:<span class="string">'#FFF'</span>,</div><div class="line">    <span class="attr">fontSize</span>:<span class="number">20</span>,</div><div class="line">    <span class="attr">textAlign</span>:<span class="string">'center'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">source_view</span>:&#123;</div><div class="line">    <span class="attr">flexDirection</span>:<span class="string">'row'</span>,</div><div class="line">    <span class="attr">height</span>:<span class="number">20</span>,</div><div class="line">    <span class="attr">marginTop</span>:<span class="number">10</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'space-between'</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">backgroundColor</span>:<span class="string">'#FFF'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">source_text</span>:&#123;</div><div class="line">    <span class="attr">color</span>:<span class="string">'#b1b1b1'</span>,</div><div class="line">    <span class="attr">fontSize</span>:<span class="number">14</span>,</div><div class="line">    <span class="attr">marginLeft</span>:<span class="number">25</span>,</div><div class="line">    <span class="attr">marginRight</span>:<span class="number">25</span>,</div><div class="line">    <span class="attr">textAlign</span>:<span class="string">'center'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">content_title_text</span>:&#123;</div><div class="line">    <span class="attr">color</span>:<span class="string">'#343434'</span>,</div><div class="line">    <span class="attr">fontSize</span>:<span class="number">20</span>,</div><div class="line">    <span class="attr">marginTop</span>:<span class="number">8</span>,</div><div class="line">    <span class="attr">marginLeft</span>:<span class="number">25</span>,</div><div class="line">    <span class="attr">marginRight</span>:<span class="number">25</span>,</div><div class="line">    <span class="attr">textAlign</span>:<span class="string">'left'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">content_text</span>:&#123;</div><div class="line">    <span class="attr">color</span>:<span class="string">'#b2b2b2'</span>,</div><div class="line">    <span class="attr">fontSize</span>:<span class="number">14</span>,</div><div class="line">    <span class="attr">lineHeight</span>: <span class="number">22</span>,</div><div class="line">    <span class="attr">marginTop</span>:<span class="number">12</span>,</div><div class="line">    <span class="attr">marginLeft</span>:<span class="number">25</span>,</div><div class="line">    <span class="attr">marginRight</span>:<span class="number">25</span>,</div><div class="line">    <span class="attr">textAlign</span>:<span class="string">'left'</span></div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line">AppRegistry.registerComponent(<span class="string">'TitleStyle'</span>, () =&gt; TitleStyle);</div></pre></td></tr></table></figure>
<h4 id="新浪："><a href="#新浪：" class="headerlink" title="新浪："></a>新浪：</h4><p>header.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  PixelRatio,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.flexs&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.title&#125;</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.wangyi&#125;</span>&gt;</span>网易<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.xinwen&#125;</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span>&gt;</span>有态度"<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">flexs</span>:&#123;</div><div class="line">    <span class="attr">marginTop</span>: <span class="number">25</span>,</div><div class="line">    <span class="attr">height</span>: <span class="number">50</span>,</div><div class="line">    <span class="attr">borderBottomWidth</span>: <span class="number">3</span>/PixelRatio.get(),</div><div class="line">    <span class="attr">borderBottomColor</span>: <span class="string">'#EF2D36'</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">title</span>:&#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">25</span>,</div><div class="line">    <span class="attr">fontWeight</span>: <span class="string">'bold'</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">wangyi</span>:&#123;</div><div class="line">    <span class="attr">color</span>: <span class="string">'#CD1D1C'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">xinwen</span>:&#123;</div><div class="line">    <span class="attr">color</span>: <span class="string">'#FFF'</span>,</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'#CD1D1C'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = Header;</div></pre></td></tr></table></figure></p>
<p>index.android.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  PixelRatio,</div><div class="line">  View,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="comment">// const Header = require('./header');</span></div><div class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'./header'</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.listItem&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.listItemFont&#125;</span>&gt;</span>&#123;this.props.title&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImportantNews</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  show(title)&#123;</div><div class="line">    alert(title);</div><div class="line">    <span class="built_in">console</span>.log(title);</div><div class="line">  &#125;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">var</span> news = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> <span class="keyword">this</span>.props.news)&#123;</div><div class="line">      <span class="keyword">var</span> text=(</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Text</span></span></span></div><div class="line">          <span class="attr">onPress</span>=<span class="string">&#123;this.show.bind(this,this.props.news[i])&#125;</span></div><div class="line">          <span class="attr">numberOfLines</span>=<span class="string">&#123;1&#125;</span></div><div class="line">          <span class="attr">style</span>=<span class="string">&#123;styles.newsItem&#125;</span></div><div class="line">          <span class="attr">key</span>=<span class="string">&#123;i&#125;</span></div><div class="line">        &gt;&#123;this.props.news[i]&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      );</div><div class="line">      news.push(text);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.flexs&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.newsTitle&#125;</span>&gt;</span>今日要闻<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        &#123;news&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">luumans</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.flexs&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Header</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">List</span> <span class="attr">title</span>=<span class="string">'这些 Android 技术会很火'</span>&gt;</span><span class="tag">&lt;/<span class="name">List</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">List</span> <span class="attr">title</span>=<span class="string">'为什么整个互联网行业都缺前端工程师？'</span>&gt;</span><span class="tag">&lt;/<span class="name">List</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">List</span> <span class="attr">title</span>=<span class="string">'Android 开发中的日常积累'</span>&gt;</span><span class="tag">&lt;/<span class="name">List</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">List</span> <span class="attr">title</span>=<span class="string">'一个神奇的控件'</span>&gt;</span><span class="tag">&lt;/<span class="name">List</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ImportantNews</span></span></div><div class="line">          <span class="attr">news</span>=<span class="string">&#123;[</span></div><div class="line">            '找到问题了 注解框架没有获取到控件<span class="attr">id</span> <span class="attr">:sweat:</span>',</div><div class="line">            '我之前也遇到过，可能是一个<span class="attr">bug</span>吧，不知道怎么解决',</div><div class="line">            '非常喜欢。准备看着你的打一遍，能看懂，但是自己就敲不出来了，谢谢分享',</div><div class="line">            '不知道怎么上的首页',</div><div class="line">          ]&#125;&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">ImportantNews</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">flexs</span>:&#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">listItem</span>:&#123;</div><div class="line">    <span class="attr">height</span>: <span class="number">40</span>,</div><div class="line">    <span class="attr">marginLeft</span>: <span class="number">10</span>,</div><div class="line">    <span class="attr">marginRight</span>: <span class="number">10</span>,</div><div class="line">    <span class="attr">borderBottomWidth</span>: <span class="number">3</span>/PixelRatio.get(),</div><div class="line">    <span class="attr">borderBottomColor</span>: <span class="string">'#DDD'</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">listItemFont</span>:&#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">16</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">newsTitle</span>:&#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">20</span>,</div><div class="line">    <span class="attr">fontWeight</span>: <span class="string">'bold'</span>,</div><div class="line">    <span class="attr">color</span>: <span class="string">'#CD1D1C'</span>,</div><div class="line">    <span class="attr">marginLeft</span>: <span class="number">10</span>,</div><div class="line">    <span class="attr">marginTop</span>: <span class="number">10</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">newsItem</span>:&#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">15</span>,</div><div class="line">    <span class="attr">lineHeight</span>: <span class="number">40</span>,</div><div class="line">    <span class="attr">marginLeft</span>: <span class="number">10</span>,</div><div class="line">    <span class="attr">marginRight</span>: <span class="number">10</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'luumans'</span>, () =&gt; luumans);</div></pre></td></tr></table></figure></p>
<!-- #### StyleSheet样式
##### color color
##### fontFamily ReactPropTypes.string
##### fontSize ReactPropTypes.number
##### fontStyle ReactPropTypes.oneOf(['normal', 'italic'])
##### fontWeight ReactPropTypes.oneOf(
    ['normal' /*default*/, 'bold','100', '200', '300', '400', '500', '600', '700', '800', '900']
)
##### Specifies font weight. The values 'normal' and 'bold' are supported for most fonts. Not all fonts have a variant for each of the numeric values, in that case the ##### closest one is chosen.

##### lineHeight ReactPropTypes.number
##### textAlign ReactPropTypes.oneOf(
    ['auto' /*default*/, 'left', 'right', 'center', 'justify']
)
##### Specifies text alignment. The value 'justify' is only supported on iOS and fallbacks to left on Android.

##### textDecorationLine ReactPropTypes.oneOf(
    ['none' /*default*/, 'underline', 'line-through', 'underline line-through']
)
##### textShadowColor color
##### textShadowOffset ReactPropTypes.shape(
    {width: ReactPropTypes.number, height: ReactPropTypes.number}
)
##### textShadowRadius ReactPropTypes.number
##### androidtextAlignVertical ReactPropTypes.oneOf(
    ['auto' /*default*/, 'top', 'bottom', 'center']
)
##### iosfontVariant ReactPropTypes.arrayOf(
    ReactPropTypes.oneOf([
      'small-caps',
      'oldstyle-nums',
      'lining-nums',
      'tabular-nums',
      'proportional-nums',
    ])
)
##### iosletterSpacing ReactPropTypes.number
##### iostextDecorationColor color
##### iostextDecorationStyle ReactPropTypes.oneOf(
    ['solid' /*default*/, 'double', 'dotted','dashed']
)
##### ioswritingDirection ReactPropTypes.oneOf(
    ['auto' /*default*/, 'ltr', 'rtl']
) -->
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;自用笔记：&lt;/strong&gt;本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why&lt;br&gt;
    
    </summary>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
    
      <category term="ReactNative" scheme="http://luuman.github.io/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>React Native Image</title>
    <link href="http://luuman.github.io/2016/12/27/FrontFrame/ReactNative/Components/RNCImage/"/>
    <id>http://luuman.github.io/2016/12/27/FrontFrame/ReactNative/Components/RNCImage/</id>
    <published>2016-12-27T10:29:00.000Z</published>
    <updated>2017-03-20T03:04:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a><br>看看官网的案例，提供两种来源的图片：本地、服务器。<!-- 当然它也支持在android中显 示GIF 和 WebP 图片，方式如下： --></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t';</div><div class="line"><span class="keyword">import</span> &#123; <span class="type">AppRegistry</span>, <span class="type">View</span>, <span class="type">Image</span> &#125; from <span class="symbol">'react</span>-native';</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DisplayAnImage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">View</span>&gt;</div><div class="line">        &lt;<span class="type">Image</span></div><div class="line">          source=&#123;require('./img/favicon.png')&#125;</div><div class="line">        /&gt;</div><div class="line">        &lt;<span class="type">Image</span></div><div class="line">          style=&#123;&#123;width: <span class="number">50</span>, height: <span class="number">50</span>&#125;&#125;</div><div class="line">          source=&#123;&#123;uri: <span class="symbol">'https</span>:<span class="comment">//facebook.github.io/react/img/logo_og.png'&#125;&#125;</span></div><div class="line">        /&gt;</div><div class="line">      &lt;/<span class="type">View</span>&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// App registration and rendering</span></div><div class="line"><span class="type">AppRegistry</span>.registerComponent(<span class="symbol">'DisplayAnImag</span>e', () =&gt; <span class="type">DisplayAnImage</span>);</div></pre></td></tr></table></figure>
<h3 id="图片样式"><a href="#图片样式" class="headerlink" title="图片样式"></a>图片样式</h3><p>关于图片样式的设计，介于前端开发我们会考虑适配问题，通过flex-rem来进行适配。但是做了demo发现以下特点：</p>
<ol>
<li>Image组件必须设置图片高度，否则不会显示。本地图片可以不设置尺寸，会按照图片的大小显示，服务器上的图片必须设置图片高度。</li>
<li>通过在两台Android手机测试发现，宽度可以不设置。高度不够，图片不会压扁，系统将截取中间部分，多余的图片将不会显示。（但是，官网提供的demo却不尽人意，原理是什么）</li>
<li>想要通过PixelRatio来控制显示的大小，但是同样的屏幕设备设备像素相同，但是分辨率却不同1.5/3</li>
<li>React Native 布局样式的单位是不是 pt、px，而是 dp。</li>
</ol>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="xml">'use strict';</span></div><div class="line">import React, <span class="template-variable">&#123; Component &#125;</span><span class="xml"> from 'react';</span></div><div class="line">import <span class="template-variable">&#123;</span></div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  PixelRatio,</div><div class="line">  Image,</div><div class="line">  ScrollView,</div><div class="line">  View,</div><div class="line">&#125;<span class="xml"> from 'react-native';</span></div><div class="line"></div><div class="line">class StyleImg extends Component <span class="template-variable">&#123;</span></div><div class="line">  render()&#123;</div><div class="line">    var url = (&#123;</div><div class="line">      uri: 'http://7u2psp.com2.z0.glb.qiniucdn.com/576d0f99f1f58390384.jpg?imageView2/1/w/'+ 1000 * PixelRatio.get() +'/h/' + 1000 * PixelRatio.get() +'/q/100'</div><div class="line">    &#125;<span class="xml">);</span></div><div class="line">    var image = (<span class="template-variable">&#123;</span></div><div class="line">      uri: 'http://7u2psp.com2.z0.glb.qiniucdn.com/576d0f99f1f58390384.jpg?imageView2/1/w/'+ 1000 * PixelRatio.get() +'/h/' + 1000 * PixelRatio.get() +'/q/100'</div><div class="line">    &#125;<span class="xml">);</span></div><div class="line">    return (</div><div class="line">      <span class="tag">&lt;<span class="name">ScrollView</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span> = </span><span class="template-variable">&#123;styles.pad&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span> = </span><span class="template-variable">&#123;styles.pad&#125;</span><span class="xml"><span class="tag">&gt;</span>图片裁剪是否压扁(同一片源)<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">Image</span> <span class="attr">source</span>=</span><span class="template-variable">&#123;url&#125;</span><span class="xml"><span class="tag"> <span class="attr">style</span>=</span></span><span class="template-variable">&#123;&#123;width: 180,height: 240&#125;</span><span class="xml"><span class="tag">&#125; /&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">Image</span> <span class="attr">source</span>=</span><span class="template-variable">&#123;url&#125;</span><span class="xml"><span class="tag"> <span class="attr">style</span>=</span></span><span class="template-variable">&#123;&#123;width: 180,height: 180&#125;</span><span class="xml"><span class="tag">&#125; /&gt;</span></span></div><div class="line">        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span> = </span><span class="template-variable">&#123;styles.pad&#125;</span><span class="xml"><span class="tag">&gt;</span>设备适配<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span>&gt;</span>PixelRatio：<span class="template-variable">&#123;PixelRatio.get()&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span> = </span><span class="template-variable">&#123;styles.pad&#125;</span><span class="xml"><span class="tag">&gt;</span>高度</span><span class="template-variable">&#123;300 * PixelRatio.get()&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span>&gt;</span>想用服务器的截图功能，但是好像rn实现了这样的功能。<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Image</span> <span class="attr">source</span>=</span><span class="template-variable">&#123;image&#125;</span><span class="xml"><span class="tag"> <span class="attr">style</span>=</span></span><span class="template-variable">&#123;&#123;height: 300 * PixelRatio.get()&#125;</span><span class="xml"><span class="tag">&#125; /&gt;</span></span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span> = </span><span class="template-variable">&#123;styles.pad&#125;</span><span class="xml"><span class="tag">&gt;</span>PixelRatio 设备适配<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span>&gt;</span>width: 160 * <span class="template-variable">&#123;PixelRatio.get()&#125;</span><span class="xml"> , height: 213 * </span><span class="template-variable">&#123;PixelRatio.get()&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Image</span> <span class="attr">source</span>=</span><span class="template-variable">&#123;url&#125;</span><span class="xml"><span class="tag"> <span class="attr">style</span>=</span></span><span class="template-variable">&#123;&#123;width: 160 * PixelRatio.get(),height: 213 * PixelRatio.get()&#125;</span><span class="xml"><span class="tag">&#125; /&gt;</span></span></div><div class="line">      <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(<span class="template-variable">&#123;</span></div><div class="line">  pad:&#123;</div><div class="line">    padding: 10,</div><div class="line">  &#125;<span class="xml">,</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent('StyleImg', () =&gt; StyleImg);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;自用笔记：&lt;/strong&gt;本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why&lt;br&gt;
    
    </summary>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
    
      <category term="ReactNative" scheme="http://luuman.github.io/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>React Native TextInput</title>
    <link href="http://luuman.github.io/2016/12/27/FrontFrame/ReactNative/Components/RNCTextInput/"/>
    <id>http://luuman.github.io/2016/12/27/FrontFrame/ReactNative/Components/RNCTextInput/</id>
    <published>2016-12-27T10:29:00.000Z</published>
    <updated>2017-03-20T03:04:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a><br>TextInput 是一个允许用户输入文本的基础组件。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, Text, TextInput, View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PizzaTranslator</span> <span class="keyword">extends</span> <span class="title">Component</span> &#123;</span></div><div class="line">  constructor(props) &#123;</div><div class="line">	<span class="keyword">super</span>(props);</div><div class="line">	<span class="keyword">this</span>.state = &#123;text: <span class="string">''</span>&#125;;</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">	<span class="keyword">return</span> (</div><div class="line">	  &lt;View style=&#123;&#123;padding: <span class="number">10</span>&#125;&#125;&gt;</div><div class="line">		&lt;TextInput</div><div class="line">		  style=&#123;&#123;height: <span class="number">40</span>&#125;&#125;</div><div class="line">		  placeholder=<span class="string">"Type here to translate!"</span></div><div class="line">		  onChangeText=&#123;(text) =&gt; <span class="keyword">this</span>.setState(&#123;text&#125;)&#125;</div><div class="line">		/&gt;</div><div class="line">		&lt;Text style=&#123;&#123;padding: <span class="number">10</span>, fontSize: <span class="number">42</span>&#125;&#125;&gt;</div><div class="line">		  &#123;<span class="keyword">this</span>.state.text.split(<span class="string">' '</span>).map(<span class="function"><span class="params">(word)</span> =&gt;</span> word &amp;&amp; <span class="string">'🍕'</span>).join(<span class="string">' '</span>)&#125;</div><div class="line">		&lt;/Text&gt;</div><div class="line">	  &lt;/View&gt;</div><div class="line">	);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">AppRegistry.registerComponent(<span class="string">'PizzaTranslator'</span>, <span class="function"><span class="params">()</span> =&gt;</span> PizzaTranslator);</div></pre></td></tr></table></figure>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="xml">import React, </span><span class="template-variable">&#123; Component &#125;</span><span class="xml"> from 'react';</span></div><div class="line">import <span class="template-variable">&#123;</span></div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  TextInput</div><div class="line">&#125;<span class="xml"> from 'react-native';</span></div><div class="line">class TextInputDemo extends Component <span class="template-variable">&#123;</span></div><div class="line">  render() &#123;</div><div class="line">	return (</div><div class="line">	  &lt;View style=&#123;styles.container&#125;<span class="xml">&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.top_half_view&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">		  <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.title_view&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">			 <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.title_text&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">			   邮箱登录</div><div class="line">			<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">		  <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">		 </div><div class="line">		  <span class="tag">&lt;<span class="name">TextInput</span> </span></div><div class="line">			  <span class="attr">style</span>=<span class="template-variable">&#123;styles.textinput&#125;</span><span class="xml"><span class="tag"></span></span></div><div class="line">			  <span class="attr">placeholder</span>=<span class="string">'邮箱'</span></div><div class="line">			  <span class="attr">numberOfLines</span>=<span class="template-variable">&#123;1&#125;</span><span class="xml"><span class="tag"></span></span></div><div class="line">			  <span class="attr">autoFocus</span>=<span class="template-variable">&#123;true&#125;</span><span class="xml"><span class="tag"></span></span></div><div class="line">			  <span class="attr">underlineColorAndroid</span>=<span class="template-variable">&#123;'#e1e1e1'&#125;</span><span class="xml"><span class="tag"></span></span></div><div class="line">		  /&gt;</div><div class="line">		   <span class="tag">&lt;<span class="name">TextInput</span> </span></div><div class="line">			  <span class="attr">style</span>=<span class="template-variable">&#123;styles.textinput&#125;</span><span class="xml"><span class="tag"></span></span></div><div class="line">			  <span class="attr">placeholder</span>=<span class="string">'密码'</span></div><div class="line">			  <span class="attr">numberOfLines</span>=<span class="template-variable">&#123;1&#125;</span><span class="xml"><span class="tag"></span></span></div><div class="line">			  <span class="attr">secureTextEntry</span>=<span class="template-variable">&#123;true&#125;</span><span class="xml"><span class="tag"></span></span></div><div class="line">			  <span class="attr">underlineColorAndroid</span>=<span class="template-variable">&#123;'#e1e1e1'&#125;</span><span class="xml"><span class="tag"></span></span></div><div class="line">		  /&gt;</div><div class="line">		  <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;&#123;backgroundColor:'#ffffff',flexDirection:'row',alignItems:'center',justifyContent:'center'&#125;</span><span class="xml"><span class="tag">&#125;&gt;</span></span></div><div class="line">			 <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.style_view_register&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">			  <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;&#123;color:'#5ac4ef'&#125;</span><span class="xml"><span class="tag">&#125;&gt;</span></span></div><div class="line">				注册</div><div class="line">			  <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">			 <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">			 </div><div class="line">			 <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.style_view_login&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">			  <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;&#123;color:'white'&#125;</span><span class="xml"><span class="tag">&#125;&gt;</span></span></div><div class="line">				登录</div><div class="line">			  <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">			 <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">		  <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">		  <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.bottom_text&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">			忘了密码?点此找回</div><div class="line">		  <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.bottom_half_view&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">		<span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">	  <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">	);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">const styles = StyleSheet.create(<span class="template-variable">&#123;</span></div><div class="line">  container: &#123;</div><div class="line">	flex: 1,</div><div class="line">	backgroundColor: 'white',</div><div class="line">  &#125;<span class="xml">,</span></div><div class="line">  title_view:<span class="template-variable">&#123;</span></div><div class="line">	flexDirection:'row',</div><div class="line">	height:50,</div><div class="line">	alignItems: 'center',</div><div class="line">	backgroundColor:'#27b5ee',</div><div class="line">  &#125;<span class="xml">,</span></div><div class="line">  title_text:<span class="template-variable">&#123;</span></div><div class="line">	color:'white',</div><div class="line">	fontSize:22,</div><div class="line">	marginLeft:20,</div><div class="line">	textAlign:'center'</div><div class="line">  &#125;<span class="xml">,</span></div><div class="line">  top_half_view:<span class="template-variable">&#123;</span></div><div class="line">	flex: 1.3,</div><div class="line">	backgroundColor: 'white',</div><div class="line">  &#125;<span class="xml">,</span></div><div class="line">  bottom_half_view:<span class="template-variable">&#123;</span></div><div class="line">	flex: 1,</div><div class="line">	backgroundColor: '#eeeeee',</div><div class="line">  &#125;<span class="xml">,</span></div><div class="line">  textinput: <span class="template-variable">&#123;</span></div><div class="line">	backgroundColor:'#fff',</div><div class="line">	marginTop:5,</div><div class="line">	marginLeft:20,</div><div class="line">	marginRight:20,</div><div class="line">	textAlign:'left',</div><div class="line">  &#125;<span class="xml">,</span></div><div class="line">  style_view_login:<span class="template-variable">&#123;  </span></div><div class="line">	  flex:1,</div><div class="line">	  marginTop:20,</div><div class="line">	  marginLeft:20,</div><div class="line">	  marginRight:20,</div><div class="line">	  backgroundColor:'#27b5ee',</div><div class="line">	  height:35,</div><div class="line">	  borderRadius:5,</div><div class="line">	  justifyContent: 'center',</div><div class="line">	  alignItems: 'center',</div><div class="line">  &#125;<span class="xml">,</span></div><div class="line">  style_view_register:<span class="template-variable">&#123;  </span></div><div class="line">	  flex:1,</div><div class="line">	  marginTop:20,</div><div class="line">	  marginLeft:20,</div><div class="line">	  marginRight:20,</div><div class="line">	  borderColor:'#5ac4ef',</div><div class="line">	  borderWidth: 1,</div><div class="line">	  height:35,</div><div class="line">	  borderRadius:5,</div><div class="line">	  justifyContent: 'center',</div><div class="line">	  alignItems: 'center',</div><div class="line">  &#125;<span class="xml">,</span></div><div class="line">  bottom_text:<span class="template-variable">&#123;</span></div><div class="line">	color:'#27b5ee',</div><div class="line">	fontSize:14,</div><div class="line">	marginTop:10,</div><div class="line">	marginLeft:20,</div><div class="line">	textAlign:'left',</div><div class="line">	fontWeight:'bold'</div><div class="line">  &#125;<span class="xml">,</span></div><div class="line">&#125;);</div><div class="line">AppRegistry.registerComponent('TextInputDemo', () =&gt; TextInputDemo);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;自用笔记：&lt;/strong&gt;本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why&lt;br&gt;
    
    </summary>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
    
      <category term="ReactNative" scheme="http://luuman.github.io/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>React Native 组件</title>
    <link href="http://luuman.github.io/2016/12/27/FrontFrame/ReactNative/Components/RNComponents/"/>
    <id>http://luuman.github.io/2016/12/27/FrontFrame/ReactNative/Components/RNComponents/</id>
    <published>2016-12-27T10:29:00.000Z</published>
    <updated>2017-03-20T03:04:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<p>我们要想理解React Native应用的基本结构，我们首先需要先了解一些基本的React的概念，比如JSX语法、组件、state状态以及props属性。所以这篇我们重点讲讲Props，state和style样式。今天讲解的内容，都是根据React Native官方文档上的内容来的。</p>
<h3 id="组件化开发："><a href="#组件化开发：" class="headerlink" title="组件化开发："></a>组件化开发：</h3><p>组件的颗粒度设计主要取决于应用的结构设计。将公共部分拆分复用，提供公共组件。</p>
<p>导出组件Header：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = Header;</div></pre></td></tr></table></figure></p>
<p>引入组件Header：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const <span class="type">Header</span> = require('./header');</div><div class="line"><span class="keyword">import</span> <span class="type">Header</span> from './header';</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">luumans</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">Header</span>&gt;&lt;/<span class="type">Header</span>&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>AppRegistry模式是React Native中最基本的模块，也是最常用的模块。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  PixelRatio,</div><div class="line">  View,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">luumans</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.flexs&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span> = <span class="string">&#123;[styles.item,styles.center]&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.title&#125;</span>&gt;</span>酒店<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span> = <span class="string">&#123;[styles.item,styles.lineLeftRight]&#125;</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[styles.flexs,styles.center,styles.lineCenter]&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.title&#125;</span>&gt;</span>海外酒店<span class="tag">&lt;/<span class="name">Text</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[styles.flexs,styles.center]&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.title&#125;</span>&gt;</span>特色酒店<span class="tag">&lt;/<span class="name">Text</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span> = <span class="string">&#123;styles.item&#125;</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[styles.flexs,styles.center,styles.lineCenter]&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.title&#125;</span>&gt;</span>团购<span class="tag">&lt;/<span class="name">Text</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[styles.flexs,styles.center]&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.title&#125;</span>&gt;</span>客栈、公寓<span class="tag">&lt;/<span class="name">Text</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">container</span>:&#123;</div><div class="line">    <span class="attr">flexDirection</span>: <span class="string">'row'</span>,</div><div class="line">    <span class="attr">height</span>: <span class="number">80</span>,</div><div class="line">    <span class="attr">borderRadius</span>: <span class="number">5</span>,</div><div class="line">    <span class="attr">marginTop</span>: <span class="number">200</span>,</div><div class="line">    <span class="attr">marginLeft</span>: <span class="number">5</span>,</div><div class="line">    <span class="attr">marginRight</span>: <span class="number">5</span>,</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'#FF0067'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">item</span>:&#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">height</span>: <span class="number">80</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">title</span>:&#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">16</span>,</div><div class="line">    <span class="attr">fontWeight</span>: <span class="string">'bold'</span>,</div><div class="line">    <span class="attr">color</span>: <span class="string">'#FFF'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">center</span>:&#123;</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">flexs</span>:&#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">lineCenter</span>: &#123;</div><div class="line">    <span class="attr">borderBottomWidth</span>: <span class="number">1</span>/PixelRatio.get(),</div><div class="line">    <span class="attr">borderColor</span>: <span class="string">'#FFF'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">lineLeftRight</span>: &#123;</div><div class="line">    <span class="attr">borderLeftWidth</span>: <span class="number">1</span>/PixelRatio.get(),</div><div class="line">    <span class="attr">borderRightWidth</span>: <span class="number">1</span>/PixelRatio.get(),</div><div class="line">    <span class="attr">borderColor</span>: <span class="string">'#FFF'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'luumans'</span>, () =&gt; luumans);</div></pre></td></tr></table></figure>
<h3 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h3><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><h5 id="configureScene"><a href="#configureScene" class="headerlink" title="configureScene"></a>configureScene</h5><p>可选的函数，用来配置场景动画和手势。会带有两个参数调用，一个是当前的路由，一个是当前的路由栈。然后它应当返回一个场景配置对象<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(route, routeStack) =&gt; Navigator<span class="selector-class">.SceneConfigs</span><span class="selector-class">.FloatFromRight</span></div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>环境依赖：</th>
</tr>
</thead>
<tbody>
<tr>
<td>PushFromRight (默认)</td>
</tr>
<tr>
<td>FloatFromRight</td>
</tr>
<tr>
<td>FloatFromLeft</td>
</tr>
<tr>
<td>FloatFromBottom</td>
</tr>
<tr>
<td>FloatFromBottomAndroid</td>
</tr>
<tr>
<td>FadeAndroid</td>
</tr>
<tr>
<td>HorizontalSwipeJump</td>
</tr>
<tr>
<td>HorizontalSwipeJumpFromRight</td>
</tr>
<tr>
<td>VerticalUpSwipeJump</td>
</tr>
<tr>
<td>VerticalDownSwipeJump</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  PixelRatio,</div><div class="line">  Navigator,</div><div class="line">  Image,</div><div class="line">  View,</div><div class="line">  ScrollView,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> Xinlang <span class="keyword">from</span> <span class="string">'./app/page/xinlang'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;&#125;;</div><div class="line">  &#125;</div><div class="line">  _pressButton()&#123;</div><div class="line">    <span class="keyword">const</span> &#123;navigator&#125; = <span class="keyword">this</span>.props;</div><div class="line">    <span class="comment">//为什么这里可以取得 props.navigator?请看上文:</span></div><div class="line">    <span class="comment">//&lt;Component &#123;...route.params&#125; navigator=&#123;navigator&#125; /&gt;</span></div><div class="line">    <span class="comment">//这里传递了navigator作为props</span></div><div class="line">    <span class="keyword">if</span>(navigator)&#123;</div><div class="line">      navigator.push(&#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'Xinlang'</span>,</div><div class="line">        <span class="attr">component</span>: Xinlang,</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">ScrollView</span> <span class="attr">style</span>=<span class="string">&#123;styles.flex&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.listItem&#125;</span> <span class="attr">onPress</span>=<span class="string">&#123;this._pressButton.bind(this)&#125;</span>&gt;</span>这些Android技术会很火<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.listItem&#125;</span> <span class="attr">onPress</span>=<span class="string">&#123;this._pressButton.bind(this)&#125;</span>&gt;</span>为什么整个互联网行业都缺前端工程师？<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.listItem&#125;</span> <span class="attr">onPress</span>=<span class="string">&#123;this._pressButton.bind(this)&#125;</span>&gt;</span>一个神奇的控件<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Detail</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;&#125;;</div><div class="line">  &#125;</div><div class="line">  _pressButton()&#123;</div><div class="line">    <span class="keyword">const</span> &#123;navigator&#125; = <span class="keyword">this</span>.props;</div><div class="line">    <span class="keyword">if</span>(navigator)&#123;</div><div class="line">      <span class="comment">//很熟悉吧，入栈出栈~ 把当前的页面pop掉，这里就返回到了上一个页面:List了</span></div><div class="line">      navigator.pop();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">ScrollView</span> <span class="attr">style</span>=<span class="string">&#123;styles.flex&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.listItem&#125;</span> <span class="attr">onPress</span>=<span class="string">&#123;this._pressButton.bind(this)&#125;</span>&gt;</span>name<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">luumans</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">let</span> defaultName = <span class="string">'List'</span>;</div><div class="line">    <span class="keyword">let</span> defaultComponent = List;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;Navigator</div><div class="line">        initialRoute = &#123;&#123;name: defaultName, component: defaultComponent&#125;&#125;</div><div class="line">        //配置场景</div><div class="line">        configureScene = &#123;</div><div class="line">          (route) =&gt; &#123;</div><div class="line">            //这个是页面之间跳转时候的动画，具体有哪些？可以看这个目录下，有源代码的: node_modules/react-native/Libraries/CustomComponents/Navigator/NavigatorSceneConfigs.js</div><div class="line">            return Navigator.SceneConfigs.PushFromRight;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        renderScene = &#123;</div><div class="line">          (route,navigator) =&gt; &#123;</div><div class="line">            let Component = route.component;</div><div class="line">            return &lt;Component &#123;...route.params&#125; navigator = &#123;navigator&#125; /&gt;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  flexs:&#123;</div><div class="line">    flex: 1,</div><div class="line">  &#125;,</div><div class="line">  listItem:&#123;</div><div class="line">    height: 40,</div><div class="line">    marginLeft: 10,</div><div class="line">    marginRight: 10,</div><div class="line">    borderBottomWidth: 3/PixelRatio.get(),</div><div class="line">    borderBottomColor: '#DDD',</div><div class="line">    justifyContent: 'center',</div><div class="line">    lineHeight: 30,</div><div class="line">    fontSize: 16,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent('luumans', () =&gt; luumans);</div></pre></td></tr></table></figure>
<h3 id="NavigatorIOS"><a href="#NavigatorIOS" class="headerlink" title="NavigatorIOS"></a>NavigatorIOS</h3><h3 id="TextInput"><a href="#TextInput" class="headerlink" title="TextInput"></a>TextInput</h3><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><h5 id="placeholder"><a href="#placeholder" class="headerlink" title="placeholder"></a>placeholder</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">placeholder</span>=<span class="string">"Red placeholder text color"</span></div></pre></td></tr></table></figure>
<h5 id="placeholderTextColor"><a href="#placeholderTextColor" class="headerlink" title="placeholderTextColor"></a>placeholderTextColor</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">placeholderTextColor</span>=<span class="string">"red"</span></div></pre></td></tr></table></figure>
<h5 id="defaultValue"><a href="#defaultValue" class="headerlink" title="defaultValue"></a>defaultValue</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">defaultValue</span>=<span class="string">"Same BackgroundColor as View "</span></div></pre></td></tr></table></figure>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">#####</div></pre></td></tr></table></figure>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#####</div></pre></td></tr></table></figure>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="clean">#####</span></div></pre></td></tr></table></figure>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="clean">#####</span></div></pre></td></tr></table></figure>
<p>```</p>
<p><a href="&quot;&quot;"></a></p>
<h3 id="ActivityIndicator"><a href="#ActivityIndicator" class="headerlink" title="ActivityIndicator"></a>ActivityIndicator</h3><h3 id="ActivityIndicatorIOS"><a href="#ActivityIndicatorIOS" class="headerlink" title="ActivityIndicatorIOS"></a>ActivityIndicatorIOS</h3><h3 id="DatePickerIOS"><a href="#DatePickerIOS" class="headerlink" title="DatePickerIOS"></a>DatePickerIOS</h3><h3 id="DrawerLayoutAndroid"><a href="#DrawerLayoutAndroid" class="headerlink" title="DrawerLayoutAndroid"></a>DrawerLayoutAndroid</h3><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><h3 id="KeyboardAvoidingView"><a href="#KeyboardAvoidingView" class="headerlink" title="KeyboardAvoidingView"></a>KeyboardAvoidingView</h3><h3 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h3><h3 id="MapView"><a href="#MapView" class="headerlink" title="MapView"></a>MapView</h3><h3 id="Modal"><a href="#Modal" class="headerlink" title="Modal"></a>Modal</h3><h3 id="Navigator-1"><a href="#Navigator-1" class="headerlink" title="Navigator"></a>Navigator</h3><h3 id="NavigatorIOS-1"><a href="#NavigatorIOS-1" class="headerlink" title="NavigatorIOS"></a>NavigatorIOS</h3><h3 id="Picker"><a href="#Picker" class="headerlink" title="Picker"></a>Picker</h3><h3 id="PickerIOS"><a href="#PickerIOS" class="headerlink" title="PickerIOS"></a>PickerIOS</h3><h3 id="ProgressBarAndroid"><a href="#ProgressBarAndroid" class="headerlink" title="ProgressBarAndroid"></a>ProgressBarAndroid</h3><h3 id="ProgressViewIOS"><a href="#ProgressViewIOS" class="headerlink" title="ProgressViewIOS"></a>ProgressViewIOS</h3><h3 id="RefreshControl"><a href="#RefreshControl" class="headerlink" title="RefreshControl"></a>RefreshControl</h3><h3 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h3><h3 id="SegmentedControlIOS"><a href="#SegmentedControlIOS" class="headerlink" title="SegmentedControlIOS"></a>SegmentedControlIOS</h3><h3 id="Slider"><a href="#Slider" class="headerlink" title="Slider"></a>Slider</h3><h3 id="SliderIOS"><a href="#SliderIOS" class="headerlink" title="SliderIOS"></a>SliderIOS</h3><h3 id="StatusBar"><a href="#StatusBar" class="headerlink" title="StatusBar"></a>StatusBar</h3><h3 id="SnapshotViewIOS"><a href="#SnapshotViewIOS" class="headerlink" title="SnapshotViewIOS"></a>SnapshotViewIOS</h3><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><h3 id="SwitchAndroid"><a href="#SwitchAndroid" class="headerlink" title="SwitchAndroid"></a>SwitchAndroid</h3><h3 id="SwitchIOS"><a href="#SwitchIOS" class="headerlink" title="SwitchIOS"></a>SwitchIOS</h3><h3 id="TabBarIOS"><a href="#TabBarIOS" class="headerlink" title="TabBarIOS"></a>TabBarIOS</h3><h3 id="TabBarIOS-Item"><a href="#TabBarIOS-Item" class="headerlink" title="TabBarIOS.Item"></a>TabBarIOS.Item</h3><h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><h3 id="TextInput-1"><a href="#TextInput-1" class="headerlink" title="TextInput"></a>TextInput</h3><h3 id="ToolbarAndroid"><a href="#ToolbarAndroid" class="headerlink" title="ToolbarAndroid"></a>ToolbarAndroid</h3><h3 id="TouchableHighlight"><a href="#TouchableHighlight" class="headerlink" title="TouchableHighlight"></a>TouchableHighlight</h3><h3 id="TouchableNativeFeedback"><a href="#TouchableNativeFeedback" class="headerlink" title="TouchableNativeFeedback"></a>TouchableNativeFeedback</h3><h3 id="TouchableOpacity"><a href="#TouchableOpacity" class="headerlink" title="TouchableOpacity"></a>TouchableOpacity</h3><h3 id="TouchableWithoutFeedback"><a href="#TouchableWithoutFeedback" class="headerlink" title="TouchableWithoutFeedback"></a>TouchableWithoutFeedback</h3><h3 id="View-1"><a href="#View-1" class="headerlink" title="View"></a>View</h3><h3 id="ViewPagerAndroid"><a href="#ViewPagerAndroid" class="headerlink" title="ViewPagerAndroid"></a>ViewPagerAndroid</h3><h3 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;自用笔记：&lt;/strong&gt;本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why&lt;br&gt;
    
    </summary>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
    
      <category term="ReactNative" scheme="http://luuman.github.io/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>React Native 实战封装组件</title>
    <link href="http://luuman.github.io/2016/12/26/FrontFrame/ReactNative/RNTest/"/>
    <id>http://luuman.github.io/2016/12/26/FrontFrame/ReactNative/RNTest/</id>
    <published>2016-12-26T10:29:00.000Z</published>
    <updated>2017-03-20T03:04:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h2 id="JSX实战"><a href="#JSX实战" class="headerlink" title="JSX实战"></a>JSX实战</h2><p>Reactnative中没有DOM的概念，只有组件的概念，所以我们HTML标签、DOM操作是无效的。但是组件的生命周期、JSX语法、事件绑定、自定义属性等，ReactNative与React.js是一样的。</p>
<h3 id="封装Box组件"><a href="#封装Box组件" class="headerlink" title="封装Box组件"></a>封装Box组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[BoxStyles.box,BoxStyles[this.props.width],BoxStyles[this.props.height]]&#125;</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">View</span>  <span class="attr">style</span>=<span class="string">&#123;[BoxStyles.top,BoxStyles.height50,BoxStyles[this.props.classBg]]&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">Text</span>&gt;</span>top<span class="tag">&lt;/<span class="name">Text</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[BoxStyles[this.props.childName]]&#125;</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[BoxStyles.left,BoxStyles[this.props.classBg]]&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">Text</span>&gt;</span>left<span class="tag">&lt;/<span class="name">Text</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">            &#123;this.props.children&#125;</div><div class="line">            <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[BoxStyles.right,BoxStyles[this.props.classBg]]&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">Text</span>&gt;</span>right<span class="tag">&lt;/<span class="name">Text</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[BoxStyles.bottom,BoxStyles.height50,BoxStyles[this.props.classBg]]&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">Text</span>&gt;</span>bottom<span class="tag">&lt;/<span class="name">Text</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[BoxStyles.label]&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">Text</span>&gt;</span>&#123;this.props.boxName&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MargginBox</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[BoxStyles.margginBox]&#125;</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">Box</span>  <span class="attr">childName</span>=<span class="string">"borderBox"</span>  <span class="attr">height</span>=<span class="string">"height400"</span> <span class="attr">width</span>=<span class="string">"width400"</span> <span class="attr">boxName</span>=<span class="string">"margin"</span> <span class="attr">classBg</span>=<span class="string">"bgred"</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">Box</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BorderBox</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Box</span> <span class="attr">childName</span>=<span class="string">"paddingBox"</span>  <span class="attr">height</span>=<span class="string">"height300"</span> <span class="attr">width</span>=<span class="string">"width300"</span> <span class="attr">boxName</span>=<span class="string">"border"</span> <span class="attr">classBg</span>=<span class="string">"bggreen"</span> &gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">Box</span>&gt;</span></span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaddingBox</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Box</span> <span class="attr">childName</span>=<span class="string">"elementBox"</span>  <span class="attr">height</span>=<span class="string">"height200"</span> <span class="attr">width</span>=<span class="string">"width200"</span> <span class="attr">boxName</span>=<span class="string">"padding"</span> <span class="attr">classBg</span>=<span class="string">"bgyellow"</span> &gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">Box</span>&gt;</span></span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElementBox</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[BoxStyles.box,BoxStyles.height100]&#125;</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[BoxStyles.measureBox]&#125;</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[BoxStyles.right]&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">Text</span>&gt;</span>height<span class="tag">&lt;/<span class="name">Text</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[BoxStyles.bottom,BoxStyles.height50]&#125;</span> &gt;</span><span class="tag">&lt;<span class="name">Text</span>&gt;</span>width<span class="tag">&lt;/<span class="name">Text</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[BoxStyles.label]&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">Text</span>&gt;</span>element<span class="tag">&lt;/<span class="name">Text</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[BoxStyles.widthdashed]&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[BoxStyles.heightdashed]&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">luumans</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">MargginBox</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">BorderBox</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">PaddingBox</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">ElementBox</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">ElementBox</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">PaddingBox</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">BorderBox</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">MargginBox</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> BoxStyles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">height50</span>:&#123;</div><div class="line">    <span class="attr">height</span>: <span class="number">50</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">height400</span>:&#123;</div><div class="line">    <span class="attr">height</span>: <span class="number">400</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">height300</span>:&#123;</div><div class="line">    <span class="attr">height</span>: <span class="number">300</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">height200</span>:&#123;</div><div class="line">    <span class="attr">height</span>: <span class="number">200</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">height100</span>:&#123;</div><div class="line">    <span class="attr">height</span>: <span class="number">100</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">width400</span>:&#123;</div><div class="line">    <span class="attr">width</span>: <span class="number">400</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">width300</span>:&#123;</div><div class="line">    <span class="attr">width</span>: <span class="number">300</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">width200</span>:&#123;</div><div class="line">    <span class="attr">width</span>: <span class="number">200</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">width100</span>:&#123;</div><div class="line">    <span class="attr">width</span>: <span class="number">100</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">bgred</span>: &#123;</div><div class="line">    <span class="attr">backgroundColor</span>:<span class="string">'#6AC5AC'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">bggreen</span>: &#123;</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'#414142'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">bgyellow</span>: &#123;</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'#D64078'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">box</span>: &#123;</div><div class="line">    <span class="attr">flexDirection</span>: <span class="string">'column'</span>,</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">position</span>: <span class="string">'relative'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">label</span>: &#123;</div><div class="line">    <span class="attr">top</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">left</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">paddingTop</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">paddingRight</span>: <span class="number">3</span>,</div><div class="line">    <span class="attr">paddingBottom</span>: <span class="number">3</span>,</div><div class="line">    <span class="attr">paddingLeft</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">position</span>: <span class="string">'absolute'</span>,</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'#FDC72F'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">top</span>: &#123;</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">bottom</span>: &#123;</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">right</span>: &#123;</div><div class="line">    <span class="attr">width</span>: <span class="number">50</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'space-around'</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">left</span>: &#123;</div><div class="line">    <span class="attr">width</span>: <span class="number">50</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'space-around'</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">heightdashed</span>: &#123;</div><div class="line">    <span class="attr">bottom</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">top</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">right</span>: <span class="number">20</span>,</div><div class="line">    <span class="attr">borderLeftWidth</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">position</span>: <span class="string">'absolute'</span>,</div><div class="line">    <span class="attr">borderLeftColor</span>: <span class="string">'#FDC72F'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">widthdashed</span>: &#123;</div><div class="line">    <span class="attr">bottom</span>: <span class="number">25</span>,</div><div class="line">    <span class="attr">left</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">right</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">borderTopWidth</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">position</span>: <span class="string">'absolute'</span>,</div><div class="line">    <span class="attr">borderTopColor</span>: <span class="string">'#FDC72F'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">yellow</span>: &#123;</div><div class="line">    <span class="attr">color</span>: <span class="string">'#FDC72F'</span>,</div><div class="line">    <span class="attr">fontWeight</span>:<span class="string">'900'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">white</span>: &#123;</div><div class="line">    <span class="attr">color</span>: <span class="string">'white'</span>,</div><div class="line">    <span class="attr">fontWeight</span>:<span class="string">'900'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">margginBox</span>:&#123;</div><div class="line">    <span class="attr">position</span>: <span class="string">'absolute'</span>,</div><div class="line">    <span class="attr">top</span>: <span class="number">100</span>,</div><div class="line">    <span class="attr">paddingLeft</span>:<span class="number">7</span>,</div><div class="line">    <span class="attr">paddingRight</span>:<span class="number">7</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">borderBox</span>:&#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'space-between'</span>,</div><div class="line">    <span class="attr">flexDirection</span>: <span class="string">'row'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">paddingBox</span>:&#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'space-between'</span>,</div><div class="line">    <span class="attr">flexDirection</span>: <span class="string">'row'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">elementBox</span>:&#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'space-between'</span>,</div><div class="line">    <span class="attr">flexDirection</span>: <span class="string">'row'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">measureBox</span>:&#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">flexDirection</span>: <span class="string">'row'</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'flex-end'</span>,</div><div class="line">    <span class="attr">alignItems</span>:<span class="string">'flex-end'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">container</span>: &#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'#F5FCFF'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">welcome</span>: &#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">20</span>,</div><div class="line">    <span class="attr">textAlign</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">margin</span>: <span class="number">10</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">instructions</span>: &#123;</div><div class="line">    <span class="attr">textAlign</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">color</span>: <span class="string">'#333333'</span>,</div><div class="line">    <span class="attr">marginBottom</span>: <span class="number">5</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'luumans'</span>, () =&gt; luumans);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;自用笔记：&lt;/strong&gt;本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why&lt;br&gt;
    
    </summary>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
    
      <category term="ReactNative" scheme="http://luuman.github.io/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>React Native 基础</title>
    <link href="http://luuman.github.io/2016/12/26/FrontFrame/ReactNative/RNBasics/"/>
    <id>http://luuman.github.io/2016/12/26/FrontFrame/ReactNative/RNBasics/</id>
    <published>2016-12-26T02:29:00.000Z</published>
    <updated>2017-03-20T03:04:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a><br>React Native看起来和react.js很像，最近也有不少框架开源，Weex基于Vue.js。ReactNative通过自定义组件，来实现接近原生操作，实现开平台效果。</p>
<p>官方文档地址：<br><a href="https://facebook.github.io/react-native/docs/props.html" target="_blank" rel="external">Props</a><br><a href="https://facebook.github.io/react-native/docs/state.html" target="_blank" rel="external">state</a><br><a href="https://facebook.github.io/react-native/docs/style.html" target="_blank" rel="external">style</a></p>
<h2 id="props-属性"><a href="#props-属性" class="headerlink" title="props 属性"></a>props 属性</h2><p>大多数组件在创建的时候就可以用各种参数来进行定制。用于定制的这些参数就称为props（属性）。所谓props，就是属性传递，而且是单向传递的。属性多的时候，可以传递一个对象，这是es6中的语法。</p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t';</div><div class="line"><span class="keyword">import</span> &#123; <span class="type">AppRegistry</span>, <span class="type">Image</span> &#125; from <span class="symbol">'react</span>-native';</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">luumans</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">	let pic = &#123;</div><div class="line">	  uri: <span class="symbol">'https</span>:<span class="comment">//upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'</span></div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">return</span> (</div><div class="line">	  &lt;<span class="type">Image</span> source=&#123;pic&#125; style=&#123;&#123;width: <span class="number">193</span>, height: <span class="number">110</span>&#125;&#125;/&gt;</div><div class="line">	);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">AppRegistry</span>.registerComponent(<span class="symbol">'luuman</span>s', () =&gt; luumans);</div></pre></td></tr></table></figure>
<p>当我们使用Image组件，可以使用source的props属性uri来控制显示什么图片。</p>
<p>注意：<br>注意{pic}外围有一层括号，我们需要用括号来把pic这个变量嵌入到JSX语句中。我们可以把任意合法的JavaScript表达式通过括号嵌入到JSX语句中。</p>
<p>为了更好的说明props的用法和概念，我把上面的例子又修改了一下，我的这个例子只是为了更好的说明props属性的用法，不建议大家这么使用，毕竟image是现成的基础组件。</p>
<h3 id="官网自定义属性"><a href="#官网自定义属性" class="headerlink" title="官网自定义属性"></a>官网自定义属性</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t';</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  <span class="type">AppRegistry</span>,</div><div class="line">  <span class="type">StyleSheet</span>,</div><div class="line">  <span class="type">Text</span>,</div><div class="line">  <span class="type">Image</span>,</div><div class="line">  <span class="type">View</span></div><div class="line">&#125; from <span class="symbol">'react</span>-native';</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Img</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">	<span class="keyword">return</span> (</div><div class="line">	  &lt;<span class="type">Image</span> source=&#123;<span class="keyword">this</span>.props.url&#125; style=&#123;&#123;width: <span class="number">120</span>, height: <span class="number">80</span>&#125;&#125;/&gt;</div><div class="line">	);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UrlProps</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">	let pic = &#123;</div><div class="line">	  uri: <span class="symbol">'https</span>:<span class="comment">//upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'</span></div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">return</span> (</div><div class="line">	  &lt;<span class="type">View</span> style=&#123;&#123;padding: <span class="number">10</span>&#125;&#125;&gt;</div><div class="line">		&lt;<span class="type">Img</span> url =&#123;pic&#125;/&gt;</div><div class="line">	  &lt;/<span class="type">View</span>&gt;</div><div class="line">	);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">AppRegistry</span>.registerComponent(<span class="symbol">'UrlProp</span>s', () =&gt; <span class="type">UrlProps</span>);</div></pre></td></tr></table></figure>
<p>自己定义了个自定义组件Img，定义了个image的属性，通过单向数据传递实现。在自定义的Img组件中的，Image组件中引用了我们定义的image属性。这样一对比，可能大家就更能清楚的理解了props的用法了。说白了就是定制属性，然后传值。</p>
<p>注意：image是小些的， 大些的Image是官方图片基础组件。</p>
<h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t';</div><div class="line"><span class="keyword">import</span> &#123; <span class="type">AppRegistry</span>, <span class="type">Text</span>, <span class="type">View</span> &#125; from <span class="symbol">'react</span>-native';</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">	<span class="keyword">return</span> (</div><div class="line">	  &lt;<span class="type">Text</span>&gt;<span class="type">Hello</span> &#123;<span class="keyword">this</span>.props.name&#125;!&lt;/<span class="type">Text</span>&gt;</div><div class="line">	);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LotsOfGreetings</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">	<span class="keyword">return</span> (</div><div class="line">	  &lt;<span class="type">View</span> style=&#123;&#123;alignItems: <span class="symbol">'cente</span>r'&#125;&#125;&gt;</div><div class="line">		&lt;<span class="type">Greeting</span> name=<span class="symbol">'Rexxa</span>r' /&gt;</div><div class="line">		&lt;<span class="type">Greeting</span> name=<span class="symbol">'Jain</span>a' /&gt;</div><div class="line">		&lt;<span class="type">Greeting</span> name=<span class="symbol">'Valeer</span>a' /&gt;</div><div class="line">	  &lt;/<span class="type">View</span>&gt;</div><div class="line">	);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">AppRegistry</span>.registerComponent(<span class="symbol">'LotsOfGreeting</span>s', () =&gt; <span class="type">LotsOfGreetings</span>);</div></pre></td></tr></table></figure>
<p>意思就是：自定义了一个名为Greeting的组件，然后，属性名为name，传不同的name值，在Text显示不同的名字。</p>
<h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>React靠一个state来维护状态，当state发生变化则更新DOM。控制一个组件，一般有两种数据类型，一种是props，一种是state。props是在父组件中设置，一旦指定，它的生命周期是不可以改变的。对于组件中数据的变化，我们是通过state来控制的。<br>一般情况下，我们初始化state状态，是在constructor构造函数中，然后如果需要改变时，我们可以调用setState方法。官方给的例子时一个闪烁的文字的例子，看看官网的例子是如何制作文字闪烁效果的。</p>
<h3 id="定时刷新"><a href="#定时刷新" class="headerlink" title="定时刷新"></a>定时刷新</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t';</div><div class="line"><span class="keyword">import</span> &#123; <span class="type">AppRegistry</span>, <span class="type">Text</span>, <span class="type">View</span> &#125; from <span class="symbol">'react</span>-native';</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RTitle</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">	<span class="keyword">super</span>(props);</div><div class="line">	<span class="keyword">this</span>.state = &#123; showText: <span class="literal">true</span> &#125;;</div><div class="line">	<span class="comment">// 每1000毫秒对showText状态做一次取反操作</span></div><div class="line">	setInterval(() =&gt; &#123;</div><div class="line">	  <span class="keyword">this</span>.setState(&#123; showText: !<span class="keyword">this</span>.state.showText &#125;);</div><div class="line">	&#125;, <span class="number">1000</span>);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">	<span class="comment">// 根据当前showText的值决定是否显示text内容</span></div><div class="line">	let display = <span class="keyword">this</span>.state.showText ? <span class="keyword">this</span>.props.text : ' ';</div><div class="line">	<span class="keyword">return</span> (</div><div class="line">	  &lt;<span class="type">Text</span>&gt;&#123;display&#125;&lt;/<span class="type">Text</span>&gt;</div><div class="line">	);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReloadTitle</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">	<span class="keyword">return</span> (</div><div class="line">	  &lt;<span class="type">View</span>&gt;</div><div class="line">		&lt;<span class="type">RTitle</span> text=<span class="symbol">'I</span> love to <span class="type">RTitle</span>' /&gt;</div><div class="line">		&lt;<span class="type">RTitle</span> text=<span class="symbol">'Yes</span> <span class="type">RTitleing</span> is so great' /&gt;</div><div class="line">		&lt;<span class="type">RTitle</span> text=<span class="symbol">'Why</span> did they ever take <span class="keyword">this</span> out of <span class="type">HTML</span>' /&gt;</div><div class="line">		&lt;<span class="type">RTitle</span> text=<span class="symbol">'Look</span> at me look at me look at me' /&gt;</div><div class="line">	  &lt;/<span class="type">View</span>&gt;</div><div class="line">	);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">AppRegistry</span>.registerComponent(<span class="symbol">'ReloadTitl</span>e', () =&gt; <span class="type">ReloadTitle</span>);</div></pre></td></tr></table></figure>
<p>自定义了一个RTitle组件，在构造函数中初始化了state，然后写了一个定时器，每个1秒改变一次状态，然后setState,然后在渲染render()方法中，判断状态的变化，如果是true，显示文字，false显示空。这样一闪一闪的效果就出来了。<br>然后我们在ReloadTitle中使用RTitle组件，并传入我们需要的文字内容即可。<br>其实在实际开发中，我们不需要设置定时器来改变状态，一般情况下，我们都是在获取到服务器的数据时或者用户输入时，更新状态去显示最新的数据。这是我们就是通过setState来做到的。</p>
<h2 id="StyleSheet"><a href="#StyleSheet" class="headerlink" title="StyleSheet"></a>StyleSheet</h2><p>在React Native中，你并不需要学习什么特殊的语法来定义样式。我们仍然是使用JavaScript来写样式。所有的核心组件都接受名为style的属性。这些样式名基本上是遵循了web上的CSS的命名，只是按照JS的语法要求使用了驼峰命名法，例如将background-color改为backgroundColor。</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const <span class="string">[name]</span> = StyleSheet.create(&#123;</div><div class="line">  <span class="string">[name]</span>: &#123;</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="样式引入"><a href="#样式引入" class="headerlink" title="样式引入"></a>样式引入</h3><ol>
<li><p>外联</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span> = <span class="string">&#123;styles.item&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>内联</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span> = <span class="string">&#123;&#123;flex:</span> <span class="attr">1</span>,<span class="attr">height:</span> <span class="attr">80</span>,<span class="attr">borderWidth:</span> <span class="attr">1</span>,<span class="attr">borderColor:</span> '#<span class="attr">000</span>',&#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>多个样式</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;View style = &#123;[styles<span class="selector-class">.item</span>,styles<span class="selector-class">.items</span>,&#123;<span class="attribute">flex</span>: <span class="number">1</span>,height: <span class="number">80</span>,borderWidth: <span class="number">1</span>,borderColor: <span class="string">'#000'</span>,&#125;]&#125;&gt;&lt;/View&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="TitleStyle"><a href="#TitleStyle" class="headerlink" title="TitleStyle"></a>TitleStyle</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, StyleSheet, Text, View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TitleStyle</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.red&#125;</span>&gt;</span>just red<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.bigblue&#125;</span>&gt;</span>just bigblue<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;[styles.bigblue,</span> <span class="attr">styles.red</span>]&#125;&gt;</span>bigblue, then red<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;[styles.red,</span> <span class="attr">styles.bigblue</span>]&#125;&gt;</span>red, then bigblue<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span>'<span class="attr">red</span>' , <span class="attr">fontSize:30</span>&#125;&#125;&gt;</span></div><div class="line">          Style </div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span>'<span class="attr">blue</span>'&#125;&#125;&gt;</span></div><div class="line">            Title</div><div class="line">          <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">bigblue</span>: &#123;</div><div class="line">  <span class="attr">color</span>: <span class="string">'blue'</span>,</div><div class="line">  <span class="attr">fontWeight</span>: <span class="string">'bold'</span>,</div><div class="line">  <span class="attr">fontSize</span>: <span class="number">30</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">red</span>: &#123;</div><div class="line">  <span class="attr">color</span>: <span class="string">'red'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line">AppRegistry.registerComponent(<span class="string">'TitleStyle'</span>, () =&gt; TitleStyle);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;自用笔记：&lt;/strong&gt;本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why&lt;br&gt;
    
    </summary>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
    
      <category term="ReactNative" scheme="http://luuman.github.io/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>React Native IOS环境搭建</title>
    <link href="http://luuman.github.io/2016/12/25/FrontFrame/ReactNative/RNSetOX/"/>
    <id>http://luuman.github.io/2016/12/25/FrontFrame/ReactNative/RNSetOX/</id>
    <published>2016-12-25T11:29:00.000Z</published>
    <updated>2017-03-20T03:04:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h2 id="React-Native初探"><a href="#React-Native初探" class="headerlink" title="React Native初探"></a>React Native初探</h2><!-- learn once,write everywhere! -->
<p>ReactNative是Facebook在2015年React开发者大会上公开的应用开发框架，一个可以用React开发原生应用的框架。</p>
<h3 id="技术背景"><a href="#技术背景" class="headerlink" title="技术背景"></a>技术背景</h3><p>FaceBook =&gt; HTML5、NativeApp<br>HybridApp =&gt; Native + Web 混合模式</p>
<h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><p>JSX语法（扩展的JS语法）、组件化模式、Virtual Dom、DataBinding单向数据流、可以实现Chrome的调试</p>
<h3 id="基本模式："><a href="#基本模式：" class="headerlink" title="基本模式："></a>基本模式：</h3><p>每个React应用可视为组件的组合，而每个React组件由属性（Property）和状态（state）来配置，当状态发生变化时更新UI，组件的结构是由虚拟的DOM来维护，确保了实际更新的DOM只包括真正产生了状态变化的部分。</p>
<h3 id="同类型的代码："><a href="#同类型的代码：" class="headerlink" title="同类型的代码："></a>同类型的代码：</h3><p>GoogleSky、Titanium、NativeScript（太重）、鸟巢（支付宝）、BeeFrameWork<br>综合起来：强大的社区，简单的学习，简单的开发、简单的应用。</p>
<h3 id="跨平台开发框架"><a href="#跨平台开发框架" class="headerlink" title="跨平台开发框架"></a>跨平台开发框架</h3><p>优点；</p>
<ol>
<li>跨平台、兼容web、ios、android三大主流平台</li>
<li>React调用原生控件，性能优于H5框架</li>
<li>更好的手势识别</li>
<li>实时部署更新，再也不用担心应用市场审核缓慢</li>
</ol>
<p>设计理念：既拥有Native的用户体验，又保留React的开发效率！</p>
<p>Facebook官方使用React Native开发的应用：Groups、Ads Manager、F8、Adverts Manger、天猫IPad、Chinese Flashcards</p>
<h3 id="ReactNative提供了那些能力"><a href="#ReactNative提供了那些能力" class="headerlink" title="ReactNative提供了那些能力"></a>ReactNative提供了那些能力</h3><ol>
<li>基于原生UI组件</li>
<li>手势识别</li>
<li>基于FlexBox的CSS布局模式</li>
<li>跨平台开发</li>
<li>基于React、jsx组件化开发模式</li>
</ol>
<h2 id="IOS环境搭建"><a href="#IOS环境搭建" class="headerlink" title="IOS环境搭建"></a>IOS环境搭建</h2><table>
<thead>
<tr>
<th>环境依赖：</th>
</tr>
</thead>
<tbody>
<tr>
<td>OSX</td>
</tr>
<tr>
<td>Xcode</td>
</tr>
<tr>
<td>Node</td>
</tr>
<tr>
<td>sublime</td>
</tr>
</tbody>
</table>
<h3 id="安装Homebrew："><a href="#安装Homebrew：" class="headerlink" title="安装Homebrew："></a>安装Homebrew：</h3><p>Homebrew, Mac系统的包管理器，用于安装NodeJS和一些其他必需的工具软件。通过homebrew安装Node、watchman、flow</p>
<h4 id="安装Homebrew：-1"><a href="#安装Homebrew：-1" class="headerlink" title="安装Homebrew："></a>安装<a href="http://brew.sh/" title="Homebrew官网" target="_blank" rel="external">Homebrew</a>：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure>
<p>注：在Max OS X 10.11（El Capitan)版本中，homebrew在安装软件时可能会碰到/usr/local目录不可写的权限问题。可以使用下面的命令修复：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chown -R `whoami` /usr/<span class="built_in">local</span></div></pre></td></tr></table></figure>
<h4 id="查看是否安装homebrew"><a href="#查看是否安装homebrew" class="headerlink" title="查看是否安装homebrew"></a>查看是否安装homebrew</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span>-v</div></pre></td></tr></table></figure>
<h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install node</div></pre></td></tr></table></figure>
<h3 id="Watchman"><a href="#Watchman" class="headerlink" title="Watchman"></a>Watchman</h3><p>Watchman是由Facebook提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能（packager可以快速捕捉文件的变化从而实现实时刷新）。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install watchman 检测文件变化</div></pre></td></tr></table></figure></p>
<h3 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h3><p>Flow是一个静态的JS类型检查工具。译注：你在很多示例中看到的奇奇怪怪的冒号问号，以及方法参数中像类型一样的写法，都是属于这个flow工具的语法。这一语法并不属于ES标准，只是Facebook自家的代码规范。所以新手可以直接跳过（即不需要安装这一工具，也不建议去费力学习flow相关语法）。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install flow 检测js语法</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clear 清理屏幕</div></pre></td></tr></table></figure>
<h3 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h3><p>React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g react-native-cli 全局安装react native</div></pre></td></tr></table></figure></p>
<p>如果你看到EACCES: permission denied这样的权限报错，那么请参照上文的homebrew译注，修复/usr/local目录的所有权：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chown -R `whoami` /usr/<span class="built_in">local</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;自用笔记：&lt;/strong&gt;本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why&lt;br&gt;
    
    </summary>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
    
      <category term="ReactNative" scheme="http://luuman.github.io/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>React Native Android环境搭建（Window）</title>
    <link href="http://luuman.github.io/2016/12/25/FrontFrame/ReactNative/RNSetAndroid/"/>
    <id>http://luuman.github.io/2016/12/25/FrontFrame/ReactNative/RNSetAndroid/</id>
    <published>2016-12-25T10:29:00.000Z</published>
    <updated>2017-03-20T03:04:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h2 id="Android环境搭建（Window下）"><a href="#Android环境搭建（Window下）" class="headerlink" title="Android环境搭建（Window下）"></a>Android环境搭建（Window下）</h2><table>
<thead>
<tr>
<th>环境依赖：</th>
</tr>
</thead>
<tbody>
<tr>
<td>Git</td>
</tr>
<tr>
<td>Node</td>
</tr>
<tr>
<td>Python 2</td>
</tr>
<tr>
<td>Android Studio</td>
</tr>
<tr>
<td>react-native-cli</td>
</tr>
<tr>
<td>Microsoft C++ 环境</td>
</tr>
<tr>
<td>android 6.0 真机</td>
</tr>
</tbody>
</table>
<h3 id="安装java-JDk"><a href="#安装java-JDk" class="headerlink" title="安装java JDk"></a>安装java JDk</h3><p>从Java官网下载<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">Java SE Development Kit 7 Downloads</a>并安装。请注意选择x86还是x64版本。推荐将JDK的bin目录加入系统PATH环境变量。（安装JDK、JRE）</p>
<h4 id="配置环境变量："><a href="#配置环境变量：" class="headerlink" title="配置环境变量："></a>配置环境变量：</h4><blockquote>
<p>系统变量→新建 JAVA_HOME 变量</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C:\Program Files\Java\jdk1.7.0_79</div></pre></td></tr></table></figure>
<blockquote>
<p>系统变量→寻找 Path 变量→编辑</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</div></pre></td></tr></table></figure>
<blockquote>
<p>系统变量→新建 CLASSPATH 变量→编辑</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar</div></pre></td></tr></table></figure>
<blockquote>
<p>java -version 查看Java版本</p>
</blockquote>
<h3 id="安装Python-2"><a href="#安装Python-2" class="headerlink" title="安装Python 2"></a>安装Python 2</h3><p>从官网下载并安装<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000" title="Python 2.7教程 - 廖雪峰的官方网站" target="_blank" rel="external">python 2.7.x</a>（3.x版本不行）</p>
<h3 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h3><p><a href="http://www.android-studio.org/index.php/download" target="_blank" rel="external">Android Studio</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;自用笔记：&lt;/strong&gt;本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why&lt;br&gt;
    
    </summary>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
    
      <category term="ReactNative" scheme="http://luuman.github.io/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>React Native开发工具</title>
    <link href="http://luuman.github.io/2016/12/25/FrontFrame/ReactNative/RNTools/"/>
    <id>http://luuman.github.io/2016/12/25/FrontFrame/ReactNative/RNTools/</id>
    <published>2016-12-25T10:29:00.000Z</published>
    <updated>2017-03-20T03:04:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h2 id="Sublime-3"><a href="#Sublime-3" class="headerlink" title="Sublime 3"></a>Sublime 3</h2><h3 id="ReactJS"><a href="#ReactJS" class="headerlink" title="ReactJS"></a><a href="https://github.com/facebookarchive/sublime-react" target="_blank" rel="external">ReactJS</a></h3><h3 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a><a href="&quot;Ctrl + E&quot;">Emmet</a></h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">View</span>&gt;Text</div><div class="line"></div><div class="line"><span class="section">&lt;View&gt;</span></div><div class="line">  <span class="section">&lt;Text&gt;</span><span class="section">&lt;/Text&gt;</span></div><div class="line"><span class="section">&lt;/View&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a><a href="&quot;&quot;">Terminal</a></h3><p>上面添加了Terminal插件，在sublime里，直接用快捷键 command+shift+T，打开终端，然后执行如下命令运行 Android 应用程序：</p>
<h3 id="react-native-snippets"><a href="#react-native-snippets" class="headerlink" title="react-native-snippets"></a><a href="https://github.com/Shrugs/react-native-snippets" target="_blank" rel="external">react-native-snippets</a></h3><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a><a href="https://github.com/babel/babel-sublime" target="_blank" rel="external">Babel</a></h3><p>babel插件支持ES6语法和JSX语法，要比sublime-react看起来更舒服。出现问题也会提示。</p>
<p>安装：<br>搜索“Babel”，安装后将jsx文件格式设置成（Syntax -&gt; Open all with current extension as… -&gt; Babel -&gt; JavaScript (Babel)）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;自用笔记：&lt;/strong&gt;本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why&lt;br&gt;
    
    </summary>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
    
      <category term="ReactNative" scheme="http://luuman.github.io/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>React Native初探</title>
    <link href="http://luuman.github.io/2016/12/25/FrontFrame/ReactNative/RN/"/>
    <id>http://luuman.github.io/2016/12/25/FrontFrame/ReactNative/RN/</id>
    <published>2016-12-25T01:29:00.000Z</published>
    <updated>2017-03-20T03:04:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h2 id="React-Native初探"><a href="#React-Native初探" class="headerlink" title="React Native初探"></a>React Native初探</h2><!-- learn once,write everywhere! -->
<p>ReactNative是Facebook在2015年React开发者大会上公开的应用开发框架，一个可以用React开发原生应用的框架。</p>
<h3 id="技术背景"><a href="#技术背景" class="headerlink" title="技术背景"></a>技术背景</h3><p>FaceBook =&gt; HTML5、NativeApp<br>HybridApp =&gt; Native + Web 混合模式</p>
<h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><p>JSX语法（扩展的JS语法）、组件化模式、Virtual Dom、DataBinding单向数据流、可以实现Chrome的调试</p>
<h3 id="基本模式："><a href="#基本模式：" class="headerlink" title="基本模式："></a>基本模式：</h3><p>每个React应用可视为组件的组合，而每个React组件由属性（Property）和状态（state）来配置，当状态发生变化时更新UI，组件的结构是由虚拟的DOM来维护，确保了实际更新的DOM只包括真正产生了状态变化的部分。</p>
<h3 id="同类型的代码："><a href="#同类型的代码：" class="headerlink" title="同类型的代码："></a>同类型的代码：</h3><p>GoogleSky、Titanium、NativeScript（太重）、鸟巢（支付宝）、BeeFrameWork<br>综合起来：强大的社区，简单的学习，简单的开发、简单的应用。</p>
<h3 id="跨平台开发框架"><a href="#跨平台开发框架" class="headerlink" title="跨平台开发框架"></a>跨平台开发框架</h3><p>优点；</p>
<ol>
<li>跨平台、兼容web、ios、android三大主流平台</li>
<li>React调用原生控件，性能优于H5框架</li>
<li>更好的手势识别</li>
<li>实时部署更新，再也不用担心应用市场审核缓慢</li>
</ol>
<p>设计理念：既拥有Native的用户体验，又保留React的开发效率！</p>
<p>Facebook官方使用React Native开发的应用：Groups、Ads Manager、F8、Adverts Manger、天猫IPad、Chinese Flashcards</p>
<h3 id="ReactNative提供了那些能力"><a href="#ReactNative提供了那些能力" class="headerlink" title="ReactNative提供了那些能力"></a>ReactNative提供了那些能力</h3><ol>
<li>基于原生UI组件</li>
<li>手势识别</li>
<li>基于FlexBox的CSS布局模式</li>
<li>跨平台开发</li>
<li>基于React、jsx组件化开发模式</li>
</ol>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">ReactNative     (项目名称)</div><div class="line"><span class="string">|–node_modules                  node模块</span></div><div class="line">    <span class="string">|–react-native              ReactNative引用工程文件</span></div><div class="line"><span class="string">|–app                           app页面</span></div><div class="line">    <span class="string">|–index.android.js          android工程备份</span></div><div class="line">    <span class="string">|–index.ios.js              ios工程备份</span></div><div class="line"><span class="string">|–index.android.js              android工程（开发文件）</span></div><div class="line"><span class="string">|–index.ios.js                  ios工程（开发文件）</span></div><div class="line"><span class="string">|–android              android项目</span></div><div class="line"><span class="string">|–ios                  ios项目</span></div><div class="line">    <span class="string">|–*.xcodeproj               Xcode启动文件</span></div><div class="line"><span class="string">|–package.json         工程信息数据</span></div></pre></td></tr></table></figure>
<p>注：android与ios有什么区别？<br>关于android与ios开发，大部分只要将开发好的文件相互拷贝，修改android与ios独有的部分控件即可。整体的逻辑思路保持一致即可。</p>
<h3 id="设备调试工具"><a href="#设备调试工具" class="headerlink" title="设备调试工具"></a>设备调试工具</h3><p>摇晃设备或按Menu键</p>
<table>
<thead>
<tr>
<th>chance</th>
<th>选项</th>
</tr>
</thead>
<tbody>
<tr>
<td>Reload</td>
<td>刷新</td>
</tr>
<tr>
<td>Debug Js Remotely</td>
<td>远程调试js</td>
</tr>
<tr>
<td>Enable Live Reload</td>
<td>启动实时刷新</td>
</tr>
<tr>
<td>Enable Hot Reloading</td>
<td>启动热刷新</td>
</tr>
<tr>
<td>Toggle Inspector</td>
<td>标签调试</td>
</tr>
<tr>
<td>Show Perf Monitor</td>
<td>显示性能监视器</td>
</tr>
<tr>
<td>Capture Heap</td>
<td></td>
</tr>
<tr>
<td>Start/Stop Sampling Profiler</td>
<td>启动/停止检测器</td>
</tr>
<tr>
<td>Dev Settings</td>
<td>设备设置</td>
</tr>
</tbody>
</table>
<h4 id="Debug-Js-Remotely-js远程调试"><a href="#Debug-Js-Remotely-js远程调试" class="headerlink" title="Debug Js Remotely   js远程调试"></a>Debug Js Remotely   js远程调试</h4><p>此时，会打开页面调试Tab页面<a href="http://localhost:8081/debugger-ui" target="_blank" rel="external">Tab页面</a>，可以用浏览器访问<a href="http://localhost:8081/index.android.bundle?platform=android" title="link" target="_blank" rel="external">android</a>看看是否可以看到打包后的脚本（看到很长的js代码就对了）。第一次访问通常需要十几秒，并且在packager的命令行可以看到形如[====]的进度条。</p>
<p>如果你遇到了ERROR Watcher took too long to load的报错，请尝试修改node_modules/react-native/packager/react-packager/src/FileWatcher/index.js，将其中的MAX_WAIT_TIME 从25000改为更大的值（单位是毫秒）</p>
<h4 id="Enable-Live-Reload-启动实时刷新"><a href="#Enable-Live-Reload-启动实时刷新" class="headerlink" title="Enable Live Reload   启动实时刷新"></a>Enable Live Reload   启动实时刷新</h4><h4 id="Enable-Hot-Reloading-启动热刷新"><a href="#Enable-Hot-Reloading-启动热刷新" class="headerlink" title="Enable Hot Reloading   启动热刷新"></a>Enable Hot Reloading   启动热刷新</h4><p><a href="http://mp.weixin.qq.com/s?__biz=MzAwMTYwNzE2Mg==&amp;mid=2651036597&amp;idx=1&amp;sn=8169e1d806ebece54403ff6902b05e36#rd&amp;utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">React Native 热加载（Hot Reload）原理简介</a></p>
<h4 id="Toggle-Inspector-标签调试"><a href="#Toggle-Inspector-标签调试" class="headerlink" title="Toggle Inspector   标签调试"></a>Toggle Inspector   标签调试</h4><h4 id="Show-Perf-Monitor-显示性能监视器"><a href="#Show-Perf-Monitor-显示性能监视器" class="headerlink" title="Show Perf Monitor   显示性能监视器"></a>Show Perf Monitor   显示性能监视器</h4><h4 id="Capture-Heap"><a href="#Capture-Heap" class="headerlink" title="Capture Heap"></a>Capture Heap</h4><h4 id="Start-Stop-Sampling-Profiler-启动-停止检测器"><a href="#Start-Stop-Sampling-Profiler-启动-停止检测器" class="headerlink" title="Start/Stop Sampling Profiler   启动/停止检测器"></a>Start/Stop Sampling Profiler   启动/停止检测器</h4><h4 id="Dev-Settings-设备设置"><a href="#Dev-Settings-设备设置" class="headerlink" title="Dev Settings   设备设置"></a>Dev Settings   设备设置</h4><p><a href="&quot;&quot;"></a><br>Bebugging 调试<br>Debug server host &amp; port for device 调试服务器主机和端口</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">adb</span> <span class="selector-tag">devices</span> 查询设备<span class="selector-tag">ID</span></div><div class="line"></div><div class="line"><span class="selector-tag">adb</span> <span class="selector-tag">reverse</span> <span class="selector-tag">tcp</span><span class="selector-pseudo">:8081</span> <span class="selector-tag">tcp</span><span class="selector-pseudo">:8081</span></div></pre></td></tr></table></figure>
<h4 id="提示信息"><a href="#提示信息" class="headerlink" title="提示信息"></a>提示信息</h4><p>应用内的错误与警告提示（红屏和黄屏）#红屏或黄屏提示都只会在开发版本中显示，正式的离线包中是不会显示的。</p>
<p><a href="http://blog.csdn.net/quanqinyang/article/details/52215652" target="_blank" rel="external">React Native调试技巧与心得</a></p>
<h4 id="简单的列表Demo"><a href="#简单的列表Demo" class="headerlink" title="简单的列表Demo"></a>简单的列表Demo</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="xml">import React, </span><span class="template-variable">&#123; Component &#125;</span><span class="xml"> from 'react';</span></div><div class="line">import <span class="template-variable">&#123;</span></div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  ScrollView,</div><div class="line">  Image,</div><div class="line">&#125;<span class="xml"> from 'react-native';</span></div><div class="line"></div><div class="line">export default class luumans extends Component <span class="template-variable">&#123;</span></div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;ScrollView style=&#123;styles.container&#125;<span class="xml">&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Image</span></span></div><div class="line">          <span class="attr">source</span>=<span class="template-variable">&#123;&#123;uri: 'http://jiuye-res.jikexueyuan.com/zhiye/showcase/attach-/20161013/2a7bf0a0-d94d-40d4-a244-20e5a5e359e6.jpg'&#125;</span><span class="xml"><span class="tag">&#125;</span></span></div><div class="line">          <span class="attr">style</span>=<span class="template-variable">&#123;styles.images&#125;</span><span class="xml"><span class="tag"></span></span></div><div class="line">        /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.title&#125;</span><span class="xml"><span class="tag">&gt;</span>『微信小程序』从基础到实战<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.teacher&#125;</span><span class="xml"><span class="tag">&gt;</span>勾股<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.time&#125;</span><span class="xml"><span class="tag">&gt;</span>2013-07-11<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Image</span></span></div><div class="line">          <span class="attr">source</span>=<span class="template-variable">&#123;&#123;uri: 'http://jiuye-res.jikexueyuan.com/zhiye/showcase/attach-59b4a27d-e431-4f49-aa25-6b94cccd8229.jpg'&#125;</span><span class="xml"><span class="tag">&#125;</span></span></div><div class="line">          <span class="attr">style</span>=<span class="template-variable">&#123;styles.images&#125;</span><span class="xml"><span class="tag"></span></span></div><div class="line">        /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.title&#125;</span><span class="xml"><span class="tag">&gt;</span>基于Go语言的短链接服务实战<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.teacher&#125;</span><span class="xml"><span class="tag">&gt;</span>小鱼<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.time&#125;</span><span class="xml"><span class="tag">&gt;</span>2013-07-11<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Image</span></span></div><div class="line">          <span class="attr">source</span>=<span class="template-variable">&#123;&#123;uri: 'http://jiuye-res.jikexueyuan.com/zhiye/showcase/attach-0da69660-4fcc-45d1-9b84-88271851f57f.jpg'&#125;</span><span class="xml"><span class="tag">&#125;</span></span></div><div class="line">          <span class="attr">style</span>=<span class="template-variable">&#123;styles.images&#125;</span><span class="xml"><span class="tag"></span></span></div><div class="line">        /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.title&#125;</span><span class="xml"><span class="tag">&gt;</span>基于Python的静态爬虫实战<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.teacher&#125;</span><span class="xml"><span class="tag">&gt;</span>飞雪<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.time&#125;</span><span class="xml"><span class="tag">&gt;</span>2013-07-11<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(<span class="template-variable">&#123;</span></div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    backgroundColor: '#F2F2F2',</div><div class="line">    margin: 5,</div><div class="line">    borderWidth: 1,</div><div class="line">    borderColor: '#d2d2d2',</div><div class="line">  &#125;<span class="xml">,</span></div><div class="line">  title: <span class="template-variable">&#123;</span></div><div class="line">    fontSize: 15,</div><div class="line">    marginLeft: 10,</div><div class="line">    color: '#333333',</div><div class="line">    textAlign: 'left',</div><div class="line">  &#125;<span class="xml">,</span></div><div class="line">  images: <span class="template-variable">&#123;</span></div><div class="line">    height: 200,</div><div class="line">    margin: 10,</div><div class="line">  &#125;<span class="xml">,</span></div><div class="line">  teacher: <span class="template-variable">&#123;</span></div><div class="line">    fontSize: 13,</div><div class="line">    marginLeft: 10,</div><div class="line">    color: '#525252',</div><div class="line">    textAlign: 'left',</div><div class="line">  &#125;<span class="xml">,</span></div><div class="line">  time: <span class="template-variable">&#123;</span></div><div class="line">    fontSize: 13,</div><div class="line">    marginLeft: 10,</div><div class="line">    color: '#2d854a',</div><div class="line">    textAlign: 'left',</div><div class="line">  &#125;<span class="xml">,</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">AppRegistry.registerComponent('luumans', () =&gt; luumans);</div></pre></td></tr></table></figure>
<p>列表控件Listview：</p>
<h2 id="Flexbox布局"><a href="#Flexbox布局" class="headerlink" title="Flexbox布局"></a>Flexbox布局</h2><p><img src="http://www.th7.cn/d/file/p/2016/08/30/532c0a8f1bc8b3d4037a61d7efc61d36.jpg" alt=""></p>
<h3 id="什么事Flexbox"><a href="#什么事Flexbox" class="headerlink" title="什么事Flexbox"></a>什么事Flexbox</h3><p>Flexbox是css 3中引入的布局模型“弹性盒子模型”，通过弹性的方式来对齐和分布容器中的内容空间，使其能够适应不同屏幕的宽度。React Native中Flexbox是这个规范的子集。</p>
<h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>浮动布局<br>不同宽度屏幕的适配<br>宽度自动分配<br>水平垂直居中</p>
<h3 id="相关资料："><a href="#相关资料：" class="headerlink" title="相关资料："></a>相关资料：</h3><p><a href="https://github.com/facebook/react-native" title="A framework for building native apps with React." target="_blank" rel="external">facebook/react-native</a><br><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="external">A Complete Guide to Flexbox</a><br><a href="https://github.com/tmallfe/tmallfe.github.io/issues/19" target="_blank" rel="external">react-native 之布局篇</a><br><a href="http://caibaojian.com/flexbox-guide.html" target="_blank" rel="external">flexbox-CSS3弹性盒模型flexbox完整版教程</a><br><a href="http://blog.csdn.net/u014486880/article/details/51385688" target="_blank" rel="external">React-Native之flexbox布局篇</a><br><a href="http://www.lcode.org/react-native/" title="qing" target="_blank" rel="external">React Native专题</a><br><a href="http://godcoder.me/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/React-Native/" title="非著名程序员" target="_blank" rel="external">React Native专题</a></p>
<p><a href="http://www.w3.org/TR/css3-flexbox/" target="_blank" rel="external">Flexbox in the CSS specifications</a><br><a href="https://developer.mozilla.org/en-US/docs/CSS/Tutorials/Using_CSS_flexible_boxes" target="_blank" rel="external">Flexbox at MDN</a><br><a href="http://dev.opera.com/articles/view/flexbox-basics/" target="_blank" rel="external">Flexbox at Opera</a><br><a href="http://weblog.bocoup.com/dive-into-flexbox/" target="_blank" rel="external">Diving into Flexbox by Bocoup</a><br><a href="http://css-tricks.com/using-flexbox/" target="_blank" rel="external">Mixing syntaxes for best browser support on CSS-Tricks</a><br><a href="http://www.alsacreations.com/tuto/lire/1493-css3-flexbox-layout-module.html" target="_blank" rel="external">Flexbox by Raphael Goetter (FR)</a><br><a href="http://bennettfeely.com/flexplorer/" target="_blank" rel="external">Flexplorer by Bennett Feely</a><br><a href="http://devbryce.com/site/flexbox/" target="_blank" rel="external">http://devbryce.com/site/flexbox/</a><br><a href="http://css.doyoe.com/properties/flex/index.htm" target="_blank" rel="external">http://css.doyoe.com/properties/flex/index.htm</a><br><a href="http://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="external">http://css-tricks.com/snippets/css/a-guide-to-flexbox/</a><br><a href="http://facebook.github.io/react-native/docs/style.html" target="_blank" rel="external">样式测试</a></p>
<h2 id="ES6语法问题"><a href="#ES6语法问题" class="headerlink" title="ES6语法问题"></a>ES6语法问题</h2><p><a href="http://www.infoq.com/cn/articles/es6-in-depth-let-and-const/" target="_blank" rel="external">深入浅出ES6（十四）：let和const</a><br><a href="&quot;&quot;"></a></p>
<h2 id="问题：首页白屏"><a href="#问题：首页白屏" class="headerlink" title="问题：首页白屏"></a>问题：首页白屏</h2><p><a href="https://segmentfault.com/a/1190000004743424" target="_blank" rel="external">ReactNative安卓首屏白屏优化</a></p>
<h2 id="react-native学习列表"><a href="#react-native学习列表" class="headerlink" title="react-native学习列表"></a>react-native学习列表</h2><p>收集了react-native一些学习资源，列表会继续更新，大家有好的资源欢迎Pull Requests！</p>
<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p><a href="http://facebook.github.io/react-native/" title="English" target="_blank" rel="external">React Native</a><br><a href="http://reactnative.cn/" title="最专业的翻译，最及时的资讯，最火爆的社区" target="_blank" rel="external">React Native 中文网</a><br><a href="https://www.youtube.com/watch?v=KVZ-P-ZI6W4" target="_blank" rel="external">官方视频</a><br><a href="https://github.com/joggerplus/ReactNativeRollingExamples/blob/master/react-native_Study_List.md" target="_blank" rel="external">react-native学习列表</a><br><a href="https://github.com/vczero/react-native-lesson" target="_blank" rel="external">React-Native入门指南</a><br><a href="http://www.tuicool.com/articles/zaInUbA" target="_blank" rel="external">整理了一份React-Native学习指南</a><br><a href="http://www.cocoachina.com/ios/20150408/11513.html" target="_blank" rel="external">深入浅出 React Native：使用 JavaScript 构建原生应用</a></p>
<p><a href="http://segmentfault.com/blog/cnsnake11_react_native" title="segmentfault" target="_blank" rel="external">React Native系列文章</a><br><a href="http://gold.xitu.io/#/tag/React%20Native" title="掘金" target="_blank" rel="external">React Native系列文章</a><br><a href="http://bbs.reactnative.cn/" target="_blank" rel="external">React Native中文社区</a><br><a href="https://github.com/tmallfe/tmallfe.github.io/issues" target="_blank" rel="external">天猫前端</a></p>
<p><a href="https://js.coach/react-native/" target="_blank" rel="external">React-native组件库</a><br><a href="http://reactnativemodules.com/" target="_blank" rel="external">React Native Modules</a></p>
<h4 id="库"><a href="#库" class="headerlink" title="库"></a>库</h4><p><a href="https://github.com/ptmt/react-native-desktop" title="通过React Native构建macOS app" target="_blank" rel="external">react-native-desktop</a><br><a href="https://github.com/Microsoft/react-native-code-push" title="微软出的热更新平台" target="_blank" rel="external">react-native-code-push</a><br><a href="https://github.com/wix/react-native-invoke" title="从JS调用native的代码而不需要任何的封装" target="_blank" rel="external">react-native-invoke</a> </p>
<h3 id="相关书籍"><a href="#相关书籍" class="headerlink" title="相关书籍"></a>相关书籍</h3><p><a href="http://es6.ruanyifeng.com/" title="阮一峰" target="_blank" rel="external">ECMAScript 6入门</a><br><a href="http://bbs.reactnative.cn/topic/15/react-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8" target="_blank" rel="external">React/React Native 的ES5 ES6写法对照表</a></p>
<h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><p><a href="https://github.com/jondot/awesome-react-native" target="_blank" rel="external">awesome-react-native</a><br><a href="https://github.com/sivan/javascript-style-guide" target="_blank" rel="external">Airbnb JavaScript Style Guide 中文版</a><br><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="external">React 入门实例教程-阮一峰</a><br><a href="http://reactjs.cn/" target="_blank" rel="external">ReactJS中文文档</a><br><a href="https://github.com/ele828/react-native-guide" title=":React Native指南汇集了react-native学习资源与各类开源app" target="_blank" rel="external">react-native-guide</a><br><a href="https://github.com/vczero/react-native-lesson" title=":React Native入门指南" target="_blank" rel="external">React-Native-lesson</a><br><a href="https://github.com/WildDylan/ReactNativeDemo" target="_blank" rel="external">ReactNativeDemo</a><br><a href="http://javascript.ruanyifeng.com/nodejs/npm.html" target="_blank" rel="external">npm模块管理器</a><br><a href="http://www.gruntjs.net/getting-started" target="_blank" rel="external">快速入门-Grunt中文网</a><br><a href="http://camsong.github.io/redux-in-chinese/" target="_blank" rel="external">Redux 中文文档</a><br><a href="http://reactjs.cn/react/docs/flux-overview.html" target="_blank" rel="external">reactjs.cn - Flux应用架构</a><br><a href="https://github.com/cnsnake11/blog" target="_blank" rel="external">cnsnake11研究react-native的blog</a><br><a href="http://www.jianshu.com/p/28e9c7957d0c" target="_blank" rel="external">Facebook F8App-ReactNative项目源码分析系列</a><br><a href="https://github.com/Kennytian/learning-react-native" target="_blank" rel="external">React Native 学习笔记</a><br><a href="http://f8-app.liaohuqiu.net/" target="_blank" rel="external">构建 F8 App / React Native 开发指南</a><br><a href="https://github.com/Code-T/salon-resources/tree/master/%E5%8C%97%E4%BA%AC%202016:05:28" target="_blank" rel="external">React Native：移动开发时代的巴别塔 - 专题分享</a></p>
<h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><p><a href="http://www.w3cplus.com/css3/a-guide-to-flexbox.html" target="_blank" rel="external">一个完整的Flexbox指南</a><br><a href="http://reactjs.cn/react/docs/component-specs.html" target="_blank" rel="external">组件的详细说明和生命周期（Component Specs and Lifecycle）</a><br><a href="http://reactjs.cn/react/tips/if-else-in-JSX.html&quot;&quot;" target="_blank" rel="external">JSX 中的 If-Else</a></p>
<p><a href="http://reactjs.cn/react/tips/communicate-between-components.html" target="_blank" rel="external">组件间的通信</a><br><a href="https://developer.mozilla.org/cn/docs/Web/JavaScript/Closures" target="_blank" rel="external">mozilla-闭包</a><br><a href="https://github.com/ericdum/mujiang.info/issues/6" target="_blank" rel="external">npm的package.json中文文档</a><br><a href="http://bluereader.org/article/73541139" target="_blank" rel="external">快来使用ECMAScript 2015吧</a><br><a href="http://lijianfei.sinaapp.com/?p=888" title="关于组件生命周期的讲得特别到位" target="_blank" rel="external">React-Native学习技术的三部曲</a><br><a href="http://bbs.reactnative.cn/topic/20/%E6%96%B0%E6%89%8B%E7%90%86%E8%A7%A3navigator%E7%9A%84%E6%95%99%E7%A8%8B" title="对于Navigator讲解的特别详细" target="_blank" rel="external">新手理解Navigator的教程</a><br><a href="http://bbs.reactnative.cn/topic/15/eact-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8" target="_blank" rel="external">React/React Native 的ES5 ES6写法对照表</a></p>
<p><a href="http://f2e.souche.com/blog/-ge-san-duan-kai-fa-zhe-yan-zhong-de-react-native/" title="对react-native从各个层面有一个比较深入的见解" target="_blank" rel="external">一个“三端”开发者眼中的React Native</a><br><a href="https://github.com/jabez128/jabez128.github.io/issues/1" target="_blank" rel="external">“指尖上的魔法” – 谈谈React-Native中的手势</a><br><a href="http://segmentfault.com/a/1190000004161358" title="包括Flux、Reflux、Redux" target="_blank" rel="external">ReactNative的组件架构设计</a><br><a href="http://www.jianshu.com/p/2c43860b0532" target="_blank" rel="external">在react-native中使用redux</a><br><a href="http://browniefed.com/blog/react-native-how-to-bridge-an-objective-c-view-component/" target="_blank" rel="external">怎么样桥接一个objective-c的视图组件</a></p>
<h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p><a href="http://bbs.reactnative.cn/topic/480/%E5%AE%89%E5%8D%93back%E9%94%AE%E7%9A%84%E5%A4%84%E7%90%86-%E5%9F%BA%E6%9C%AC-%E9%AB%98%E7%BA%A7%E7%AF%87" target="_blank" rel="external">安卓Back键的处理·基本+高级篇</a></p>
<h4 id="音视频相机"><a href="#音视频相机" class="headerlink" title="音视频相机"></a>音视频相机</h4><p><a href="http://gold.xitu.io/post/581755be2f301e005ce78a18?utm_source=gold_browser_extension" title="二维码扫描组件" target="_blank" rel="external">React Native 实现二维码扫描</a><br><a href="https://github.com/ideacreation/react-native-barcodescanner" title="二维码扫描组件" target="_blank" rel="external">react-native-barcodescanner</a><br><a href="https://github.com/lwansbrough/react-native-camera" title="相机组件" target="_blank" rel="external">react-native-camera</a><br><a href="https://github.com/marcshilling/react-native-image-picker" title="可以从相机或者相册选择图片" target="_blank" rel="external">react-native-image-picker</a>  </p>
<h4 id="图形动画"><a href="#图形动画" class="headerlink" title="图形动画"></a>图形动画</h4><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><p><a href="https://github.com/ide/react-native-button" title="按钮，因为react-native没有提供button" target="_blank" rel="external">react-native-button</a><br><a href="https://github.com/skv-headless/react-native-scrollable-tab-view" title="滑动的tab视图" target="_blank" rel="external">react-native-scrollable-tab-view</a> </p>
<h4 id="listview"><a href="#listview" class="headerlink" title="listview"></a>listview</h4><p><a href="https://github.com/sghiassy/react-native-sglistview" title="性能优化的listview" target="_blank" rel="external">react-native-sglistview</a><br><a href="https://github.com/aksonov/react-native-tableview" title="桥接了原生的UITableView" target="_blank" rel="external">react-native-tableview</a> </p>
<h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><p><a href="https://github.com/lixinso/html5" target="_blank" rel="external">HTML5 CSS3 code sample</a><br><a href="https://github.com/dsibiski/react-native-hybrid-app-examples" title="iOS原生项目集成react-native的示例项目" target="_blank" rel="external">react-native-hybrid-app-examples</a><br><a href="https://github.com/ninty90/react-native-redux-demo" title="react-native使用redux的demo，结合这篇文章看效果更好，" target="_blank" rel="external">react-native-redux-demo</a><br><a href="http://www.jianshu.com/p/2c43860b0532" target="_blank" rel="external">react-native中使用redux</a></p>
<h4 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h4><p><a href="https://github.com/Bob1993/React-Native-Gank" title="低俗无聊的扎设计，看看代码德勒" target="_blank" rel="external">React-Native-Gank</a><br><a href="https://github.com/fbsamples/f8app" title="facebook 官方f8 app" target="_blank" rel="external">f8app</a><br><a href="https://github.com/joemaddalone/react-native-todo" title="一个简单的to do 应用程序 jast IOS" target="_blank" rel="external">react-native-todo</a><br><a href="https://github.com/soliury/noder-react-native" title="Noder-cnodejs客户端" target="_blank" rel="external">noder-react-native</a><br><a href="https://github.com/7kfpun/FinanceReactNative" title="Finance - 股票报价app" target="_blank" rel="external">FinanceReactNative</a><br><a href="https://github.com/benoitvallon/react-native-nw-react-calculator" title="iOS/Android、Web、桌面多端的计算器app" target="_blank" rel="external">react-native-nw-react-calculator</a></p>
<h4 id="Mode"><a href="#Mode" class="headerlink" title="Mode"></a>Mode</h4><p><a href="https://github.com/leecade/react-native-swiper" title="The best Swiper component for React Native." target="_blank" rel="external">react-native-swiper</a></p>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><a href="https://github.com/decosoftware/deco-ide" target="_blank" rel="external">开源的react-native IDE</a><br><a href="https://github.com/rnpm/rnpm" title="React Native的包管理器" target="_blank" rel="external">rnpm</a><br><a href="https://github.com/oblador/react-native-vector-icons" title="为React Native集成了很多icon" target="_blank" rel="external">react-native-vector-icons</a><br><a href="https://github.com/reactjs/redux" title="Redux 就是用来确保 state 变化的可预测性，仓库readme中的代码很简洁的描述了redux的内容" target="_blank" rel="external">redux</a><br><a href="https://github.com/reactjs/react-redux" title="官方的React绑定redux" target="_blank" rel="external">react-redux</a><br><a href="https://github.com/gaearon/redux-thunk" title="redux的thunk中间件" target="_blank" rel="external">redux-thunk</a><br><a href="https://github.com/rt2zz/redux-persist" target="_blank" rel="external">redux-persist</a><br><a href="https://github.com/goatslacker/alt" title="flux的实现" target="_blank" rel="external">alt</a></p>
<p><a href="http://blog.csdn.net/liu__520/article/details/52903667" target="_blank" rel="external">携程技术中心React Native Meetup活动经验分享</a></p>
<p><a href="&quot;&quot;"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;自用笔记：&lt;/strong&gt;本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why&lt;br&gt;
    
    </summary>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
    
      <category term="ReactNative" scheme="http://luuman.github.io/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>移动Web解决方案</title>
    <link href="http://luuman.github.io/2016/05/08/Induce/Mobile/MobileGuide/"/>
    <id>http://luuman.github.io/2016/05/08/Induce/Mobile/MobileGuide/</id>
    <published>2016-05-08T06:11:20.000Z</published>
    <updated>2017-03-20T03:04:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　最近在系统的学习移动的坑，这里将他整理起来。<br><a id="more"></a></p>
<h2 id="前沿"><a href="#前沿" class="headerlink" title="前沿"></a>前沿</h2><p>这里没有绝对的标准，只是介绍不同的解决方案，从而提高用户体验。</p>
<h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><h3 id="通用约定"><a href="#通用约定" class="headerlink" title="通用约定"></a>通用约定</h3><h4 id="字体使用：使用无衬线字体"><a href="#字体使用：使用无衬线字体" class="headerlink" title="字体使用：使用无衬线字体"></a>字体使用：使用无衬线字体</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">"Helvetica Neue"</span>, Helvetica, STHeiTi, sans-serif;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="组件命名"><a href="#组件命名" class="headerlink" title="组件命名"></a>组件命名</h4><p>中fn,ui,text为保留字，除在指南中约定之外，建议不在其他场合进行使用，并且凡以此命名的类名，其中所有的数值的设定，皆为非important关键字【规范】</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fn_clear 清除浮动</div><div class="line">fn_left,fn_right 左右浮动</div><div class="line">fn_show,fn_hide 显示 <span class="built_in">display</span>:<span class="built_in">block</span>/隐藏 <span class="built_in">display</span>:none</div><div class="line">text_left,text_center,text_right 文字左中右居中</div></pre></td></tr></table></figure>
<h5 id="凡被JS使用的类名，在通常命名前加上J-或j-前缀-在同一个项目里需要保持形式的一致性"><a href="#凡被JS使用的类名，在通常命名前加上J-或j-前缀-在同一个项目里需要保持形式的一致性" class="headerlink" title="凡被JS使用的类名，在通常命名前加上J_或j-前缀,在同一个项目里需要保持形式的一致性"></a>凡被JS使用的类名，在通常命名前加上J_或j-前缀,在同一个项目里需要保持形式的一致性</h5><h4 id="特定浏览器CSS属性的前缀"><a href="#特定浏览器CSS属性的前缀" class="headerlink" title="特定浏览器CSS属性的前缀"></a>特定浏览器CSS属性的前缀</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml">采用以下两种，-webkit-和-ms-，由于手机只有webkit的内核和微软的IE浏览器。</span></div><div class="line"></div><div class="line">-webkit-<span class="template-variable">&#123;prop&#125;</span><span class="xml">:</span><span class="template-variable">&#123;value&#125;</span><span class="xml"></span></div><div class="line">-ms-<span class="template-variable">&#123;prop&#125;</span><span class="xml">:</span><span class="template-variable">&#123;value&#125;</span><span class="xml"></span></div><div class="line"><span class="template-variable">&#123;prop&#125;</span><span class="xml">:</span><span class="template-variable">&#123;value&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure>
<h4 id="通用业务组件名称，建议使用如下约定："><a href="#通用业务组件名称，建议使用如下约定：" class="headerlink" title="通用业务组件名称，建议使用如下约定："></a>通用业务组件名称，建议使用如下约定：</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">button</span> btn 按钮</div><div class="line"><span class="selector-tag">nav</span> 导航</div><div class="line">list 列表</div><div class="line">paging 分页</div><div class="line">tab 标签页</div><div class="line">select 下拉框</div><div class="line"><span class="selector-tag">input</span> 输入框</div><div class="line">group 特性相似的群，与list的区别在于，list有明确的列表布局的特性，group没有其特性</div><div class="line"><span class="selector-tag">form</span> 表单</div></pre></td></tr></table></figure>
<h4 id="常用模块状态名称"><a href="#常用模块状态名称" class="headerlink" title="常用模块状态名称"></a>常用模块状态名称</h4><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">current    当前模块状态</div><div class="line">selected    被选中状态</div><div class="line">disabled    失效状态</div><div class="line">focus    焦点集中状态</div><div class="line">blur    焦点失去状态</div><div class="line">checked    被勾选状态</div><div class="line"><span class="keyword">success    </span>成功状态</div><div class="line"><span class="keyword">error    </span>错误状态</div><div class="line"></div><div class="line">hover active    手指在模块上状态【讨论】</div></pre></td></tr></table></figure>
<h3 id="命名指南"><a href="#命名指南" class="headerlink" title="命名指南"></a>命名指南</h3><h4 id="组件命名是明晰的，从拼写的单词能直观的看出组件用途"><a href="#组件命名是明晰的，从拼写的单词能直观的看出组件用途" class="headerlink" title="组件命名是明晰的，从拼写的单词能直观的看出组件用途"></a>组件命名是明晰的，从拼写的单词能直观的看出组件用途</h4><p>建议不使用缩写，除对字母长度超过6个以上的单词。如果使用缩写建议缩写后的单词在4个字母以上，<br>谨慎使用3个字母及以下的缩写，除非该含义非常清晰可见，并没有歧义，比如说btn，不建议的缩写，例如 ui<br>组件命名采用层次命名的方式，中间采用-为间隔符，层次方式如下</p>
<p>[样式库名称] - [组件名称] (- [组件状态])? (- [子组件名称])? (- [子组件状态])?</p>
<p>例如：<br>amui库中有个list列表，里面有个按钮，当用户点击list中当前被选中的那个item中的按钮的时候，<br>产生一个按上去的效果，这个时候的命名方式建议如下：am-list-current-btn-active</p>
<p>样式库名称建议使用该样式库的名称简写，建议2~4个字母<br>样式库名称不建议使用宽泛且无具体意义的命名，比如说ui等【规范】<br>组件内部的类名需要体现上层的含义，体现的方式没有强行规定，但是可以直观看出</p>
<p>例如：list表中嵌套一个按钮，</p>
<h4 id="独立系统里统一命名风格【规范】"><a href="#独立系统里统一命名风格【规范】" class="headerlink" title="独立系统里统一命名风格【规范】"></a>独立系统里统一命名风格【规范】</h4><p>在一个完整的模块命名方式，对于相同类型的模块命名保持一致，比如说，使用了button作为模块类名之后，后面如果再需用到按钮，不再建议使用btn的方式。</p>
<h2 id="目录结构和文件命名规范"><a href="#目录结构和文件命名规范" class="headerlink" title="目录结构和文件命名规范"></a>目录结构和文件命名规范</h2><p>前端有哪些大小写区分，XHTML区分大小写、HTML不区分大小写、CSS与HTML有关、Javascript区分大小写。由此可以看出，文件建议使用小写加下划线命名。</p>
<p>我们单独一节来说明网站目录结构和命名规范的目的是让我们重视。因为无论你的XHTML、CSS、Javascript写得多熟练多好，而网站的目录结构和其命名是让人和搜索引擎读不懂的。<br>那么网站就没有真正做到标准化，而且整个网站的后期扩展和维护的成本和代价会很大。还有一点需重视就是xhmtl、css、js的代码注意缩进。<br>并保持格式整齐的并且提供注释，保证可阅性。同时为后期编写程序提供良好的开发条件。<br>首先网站的目录结构和文件命名清晰、XHTML里面的元素命名清晰会给SEO带来好处。例如文件的命名，如果使用全拼，那么Google是自动识别拼音进行排名的。关于SEO相关的知识(请参阅公司SEO相关文档)，就不在这里一一阐述了。接下来介绍目录结构和命名规范。</p>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>主要分为四类，需要注意的是，所有命名必须为小写英文、下划线，不能大写或中文。</p>
<ol>
<li><p>categorys(目录)<br>目录的命名尽可能使用英文或者全拼表达目录内的页面作用（语义化），需要注意的是不要使用中文词组简拼（eg:目录–&gt;ml）。<br>简拼容易出现重复、或者目录结构复杂的时候容易出现混乱，给后期维护带来很大的麻烦。</p>
</li>
<li><p>css目录命名可以为style、css、skin等，如果网站的目录结构不是很复杂的，尽量把css统一放在跟目录。<br>这样可以方便后期的维护操作。如果网站的目录结构很复杂，层次超过3层以上的，可以在对应的层设置目录页面结构的css。</p>
</li>
<li><p>js目录命名一般用js或scripts，这样一看就知道里面是放js脚本。同样js的目录结构也是和css一样。</p>
</li>
<li><p>images根据网站规模来调整放图片的目录，一般根目录设置的images是存放整站共用的图片（包括图片图标背景等），而各二级三级目录里面也可以设置相应的images目录存放当前级的图片。<br>根据具体的目录规范，做到前后台协商一致！当页面在引用css或者js的时候，大型的门户站点一般会在引用加上版本号或者日期。如：<br>这样的做法是为了维护的时候可以更清晰知道所引用的脚本或样式是什么时候什么版本的。</p>
</li>
</ol>
<h3 id="html命名"><a href="#html命名" class="headerlink" title="html命名"></a>html命名</h3><p>html应遵循页面的内容或用途（SEO）进行命名。不能使用中文词组的简拼进行命名。当使用英文或者中文词组全拼的时候，同样会给SEO带来好处。另外需注意的是，整个网站的html后缀要统一，避免同时出现html、htm两种不同的后缀。</p>
<h3 id="css命名可以按照内容和功能进行命名。"><a href="#css命名可以按照内容和功能进行命名。" class="headerlink" title="css命名可以按照内容和功能进行命名。"></a>css命名可以按照内容和功能进行命名。</h3><ol>
<li><p>css功能性质一般指：reset.css（重置默认的样式-属性选择符）、global.css(全局使用的类选择符)、<br>common.css(部分页面可共同使用的类选择符)等各种按功能分类的css。一般还可以将连接、段落、颜色等样式分离出来。</p>
</li>
<li><p>布局页面一般指:style.css(全站的整体框架布局)—–index.css(首页的布局)、reg.css(注册页面的布局)。</p>
</li>
<li><p>样式命名采用小写英文字母、数字、中扛线的组合，其中不得包含汉字、空格和特殊字符；多个单词<br>应采用中扛线分割。</p>
</li>
<li><p>样式名称字符不要超过20个,少用拼音写样式，使用限定词诸如（R(ight),L(eft),T(op),B(ottom),M(iddle)，<br>要把限定词放在最后,后缀限定词建议采用缩写形式，从而减少名称长度；</p>
</li>
<li><p>根据样式的性质和功能，将样式分为以下几种：<br>reset.css（重置默认的样式-属性选择符）global.css(全局使用的类选择符) common.css等各种按功能分类的css，各个功能模块页面的样式，视具体情况添加或修改。</p>
</li>
</ol>
<h3 id="js命名"><a href="#js命名" class="headerlink" title="js命名"></a>js命名</h3><p>js命名规范也和css的命名规范差不多，但是分前后台两种js文件，根据前后不用，使用不用的后缀区分。</p>
<ol>
<li><p>功能性质<br>js功能性质一般指:jquery.js(js库或框架)、global.js(全局使用的脚本)、common.js(部分页面需要用的脚本)</p>
</li>
<li><p>针对页面<br>针对某个目录的页面：js_toggle_reg.js,前面的js是为了统一所有针对页面而定出来的。可以根据个人的情况把js改成自己所定义的单词。</p>
</li>
<li>实际命名规范：<br>1、js库或框架文件，如jquery.js，就引用自身的命名。<br>2、与后台交互功能的js文件，命名规则就是:back_+js文件名如验证js：back<em>submitcheck.js3、前端页面效果的js文件，命名规则就是:front</em>+js文件名如焦点图效果js：front_focus.js</li>
</ol>
<h3 id="图片的命名"><a href="#图片的命名" class="headerlink" title="图片的命名"></a>图片的命名</h3><p>首先我们这里需要注意的是，切图的时候，可以去参考一些大型的网站如yahoo等的切图的方法。一般熟练css布局的都会将许多的小图标，背景图片集合到一张图，通过css来控制到具体的元素使用哪个图标或背景。另外目前国外和国内高标准的网站，一般都采用png图使用，但是我们公司根据异步的要求，必须用jpg的图片。图片根据图片的所处的页面位置名称作用来命名。图片的命名规范化更有利于css的编写。可以举几个例子:<br>index_header_navtab_bg.jpg—–字面理解到图片是index页面headher中导航TAB的背景products_content_title_icon.gif—–字面理解为products页面content中标题的iconindex_header_banner_pic.png—–字面理解为index页面header的banner图片<br>只有当图片的名称语义化了，在你写css或者页面需用到图片的时候，可以更快速的找到所需的。如果只是随便的取01.jpg、bg.jpg这类的命名，会给前端开发带来不便，更不用说后期维护了。<br>友情提示：本文中关于《WEB前端开发规范》给出的范例仅供您参考拓展思维使用，WEB前端开发规范：该篇文章建议您自主创作。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　最近在系统的学习移动的坑，这里将他整理起来。&lt;br&gt;
    
    </summary>
    
      <category term="Induce" scheme="http://luuman.github.io/categories/Induce/"/>
    
    
      <category term="Mobile" scheme="http://luuman.github.io/tags/Mobile/"/>
    
  </entry>
  
  <entry>
    <title>移动端设备显示限制，隐藏部分内容</title>
    <link href="http://luuman.github.io/2016/04/19/Induce/CSS/overflowMore/"/>
    <id>http://luuman.github.io/2016/04/19/Induce/CSS/overflowMore/</id>
    <published>2016-04-19T06:11:20.000Z</published>
    <updated>2017-03-20T03:04:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>困惑：</strong>移动端的开发，往往没有想象中的那么容易。不仅要考虑适配，还有不同场景的交互。开发手机版时，手机屏幕毕竟有限，文字过多时，往往采用一个折中的方法，将超出盒子width的部分用…代替。 </p>
<a id="more"></a>
<p>通过CSS判断，这个区域宽度</p>
<h3 id="省略"><a href="#省略" class="headerlink" title="省略"></a>省略</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 单行文本溢出 --&gt;</span></div><div class="line"></div><div class="line">text-overflow: ellipsis;</div><div class="line">white-space: nowrap;</div><div class="line">overflow: hidden;</div></pre></td></tr></table></figure>
<h3 id="一行省略"><a href="#一行省略" class="headerlink" title="一行省略"></a>一行省略</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 多行文本溢出 --&gt;</div><div class="line"></div><div class="line"><span class="attribute">display</span>: -webkit-box <span class="meta">!important</span>;</div><div class="line"><span class="attribute">overflow</span>: hidden;</div><div class="line"><span class="attribute">text-overflow</span>: ellipsis;</div><div class="line"><span class="attribute">word-break</span>: break-all;</div><div class="line">-webkit-box-orient: vertical;</div><div class="line">-webkit-line-clamp: <span class="number">2</span>;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;困惑：&lt;/strong&gt;移动端的开发，往往没有想象中的那么容易。不仅要考虑适配，还有不同场景的交互。开发手机版时，手机屏幕毕竟有限，文字过多时，往往采用一个折中的方法，将超出盒子width的部分用…代替。 &lt;/p&gt;
    
    </summary>
    
      <category term="Induce" scheme="http://luuman.github.io/categories/Induce/"/>
    
    
      <category term="Mobile" scheme="http://luuman.github.io/tags/Mobile/"/>
    
  </entry>
  
  <entry>
    <title>Gulp前端构建工具</title>
    <link href="http://luuman.github.io/2016/04/02/Plug/Gulp/InduceGulp/"/>
    <id>http://luuman.github.io/2016/04/02/Plug/Gulp/InduceGulp/</id>
    <published>2016-04-02T06:11:20.000Z</published>
    <updated>2017-03-20T03:04:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>Gulp前端自动化：</strong>Gulp的高度集成化开发环境，释放了前端开发中大量时间，如css压缩、js压缩、错误检查、合并js、压缩图片、压缩html、模块构造等，只要你能想到的基本都可以通过Gulp插件去实现。</p>
<a id="more"></a>
<h2 id="前端自动化的目的"><a href="#前端自动化的目的" class="headerlink" title="前端自动化的目的"></a>前端自动化的目的</h2><p>在一个项目过程中，重复而枯燥的工作太多了……绳命就这样浪费了。<br>我们需要一个自动化的工作流程，让我们更专注于coding，而不是coding外的繁琐工作。于是Gulp应运而生。可以想像，如果在node环境下，一行命令搞定一个场景，So Cool…</p>
<p>gulp是基于Nodejs的自动任务运行器， 她能自动化地完成 javascript/coffee/sass/less/html/image/css 等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。在实现上，她借鉴了<b>Unix操作系统的管道（pipe）</b>思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。通过本文，我们将学习如何使用Gulp来改变开发流程，从而使开发更加快速高效。<br>gulp 和 grunt 非常类似，但相比于 grunt 的频繁 IO 操作，gulp 的流操作，能更快地更便捷地完成构建工作。<br>本示例以gulp-less为例（将less编译成css的gulp插件）展示gulp的常规用法，只要我们学会使用一个gulp插件后，其他插件就差看看其帮助文档了。让我们一起来学习gulp吧！ ^_^</p>
<h3 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h3><blockquote>
<ol>
<li>版本控制</li>
<li>检查JS</li>
<li>图片合并</li>
<li>压缩CSS</li>
<li>压缩JS</li>
<li>编译SASS</li>
</ol>
</blockquote>
<h3 id="目前最知名的构建工具：-Gulp、Grunt、NPM-Webpack；"><a href="#目前最知名的构建工具：-Gulp、Grunt、NPM-Webpack；" class="headerlink" title="目前最知名的构建工具： Gulp、Grunt、NPM + Webpack；"></a>目前最知名的构建工具： Gulp、Grunt、NPM + Webpack；</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">grunt是前端工程化的先驱</div><div class="line"></div><div class="line">gulp更自然基于流的方式连接任务</div><div class="line"></div><div class="line">Webpack最年轻，擅长用于依赖管理，配置稍较复杂</div><div class="line"></div><div class="line">推荐使用Gulp，Gulp基于nodejs中stream，效率更好语法更自然,不需要编写复杂的配置文件</div></pre></td></tr></table></figure>
<h2 id="安装前准备："><a href="#安装前准备：" class="headerlink" title="安装前准备："></a>安装前准备：</h2><p>在学习前，先谈谈大致使用gulp的步骤，给读者以初步的认识。首先当然是安装nodejs，通过nodejs的npm全局安装和项目安装gulp，其次在项目里安装所需要的gulp插件，然后新建gulp的配置文件gulpfile.js并写好配置信息（定义gulp任务），最后通过命令提示符运行gulp任务即可。<br>安装nodejs -&gt; 全局安装gulp -&gt; 项目安装gulp以及gulp插件 -&gt; 配置gulpfile.js -&gt; 运行任务</p>
<h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><p>为了确保依赖环境正确，我们先执行几个简单的命令检查。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">luuman@luuman-PC MINGW64 ~</div><div class="line">$ <span class="keyword">node</span> <span class="title">-v</span></div><div class="line"></div><div class="line">v5.<span class="number">3.0</span></div><div class="line"></div><div class="line"><span class="keyword">Node</span><span class="title">是一个基于Chrome</span> JavaScript V8引擎建立的一个解释器</div><div class="line">检测<span class="keyword">Node</span><span class="title">是否已经安装，如果正确安装的话你会看到所安装的Node</span>的版本号</div></pre></td></tr></table></figure>
<h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>接下来看看npm，它是 node 的包管理工具，可以利用它安装 gulp 所需的包</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">luuman@luuman-PC MINGW64 ~</div><div class="line">$ <span class="built_in">npm</span> -v</div><div class="line"></div><div class="line"><span class="number">3.3</span><span class="number">.12</span></div><div class="line"></div><div class="line">这同样能得到<span class="built_in">npm</span>的版本号，装 Node 时已经自动安装了<span class="built_in">npm</span></div></pre></td></tr></table></figure>
<h3 id="npm-Node依赖包"><a href="#npm-Node依赖包" class="headerlink" title="npm Node依赖包"></a>npm Node依赖包</h3><ol>
<li>说明：npm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）；</li>
<li><p>使用npm安装插件：命令提示符执行<figure class="highlight plain"><figcaption><span>install <name> [-g] [--save-dev]；```</name></span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1、&lt;name&gt;：node插件名称。例：```npm install gulp-less --save-dev</div></pre></td></tr></table></figure></p>
<p> 2、-g：全局安装。将会安装在C:\Users\Administrator\AppData\Roaming\npm，并且写入系统环境变量；  非全局安装：将会安装在当前定位目录；  全局安装可以通过命令行在任何地方调用它，本地安装将安装在定位目录的node_modules文件夹下，通过require()调用；<br> 3、–save：将保存配置信息至package.json（package.json是nodejs项目配置文件）；<br> 4、-dev：保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点；一般保存在dependencies的像这些express/ejs/body-parser等等。<br> 5、为什么要保存至package.json？因为node插件包相对来说非常庞大，所以不加入版本管理，将配置信息写入package.json并将其加入版本管理，其他开发者对应下载即可（命令提示符执行npm install，则会根据package.json下载所有需要的包，npm install –production只下载dependencies节点的包）。</p>
</li>
<li><p>使用npm卸载插件：<figure class="highlight plain"><figcaption><span>uninstall <name> [-g] [--save-dev]```  PS：不要直接删除本地插件包</name></span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    1、删除全部插件：```npm uninstall gulp-less gulp-uglify gulp-concat``` ……???太麻烦</div><div class="line">    2、借助rimraf：```npm install rimraf -g``` 用法：rimraf node_modules</div><div class="line">4. 使用npm更新插件：```npm update &lt;name&gt; [-g] [--save-dev]</div></pre></td></tr></table></figure></p>
<p> 更新全部插件：<figure class="highlight plain"><figcaption><span>update [--save-dev]```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">5. 查看npm帮助：```npm help</div></pre></td></tr></table></figure></p>
</li>
<li><p>当前目录已安装插件：<figure class="highlight plain"><figcaption><span>list```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">PS：npm安装插件过程：从http://registry.npmjs.org下载对应的插件包（该网站服务器位于国外，所以经常下载缓慢或出现异常），解决办法往下看↓↓↓↓↓↓。</div><div class="line"></div><div class="line">### 选装cnpm</div><div class="line">因为npm安装插件是从国外服务器下载，受网络影响大，可能出现异常，如果npm的服务器在中国就好了，所以我们乐于分享的淘宝团队干了这事。</div><div class="line">来自官网：“这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。”；</div><div class="line"></div><div class="line">[官方网址：](http://npm.taobao.org &quot;&quot;)</div><div class="line">安装：命令提示符执行```npm install cnpm -g --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
</li>
</ol>
<p>注意：安装完后最好查看其版本号cnpm -v或关闭命令提示符重新打开，安装完直接使用有可能会出现错误；<br>注：cnpm跟npm用法完全一致，只是在执行命令时将npm改为cnpm（以下操作将以cnpm代替npm）。<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">luuman@luuman-PC MINGW64 /l/自动化</div><div class="line">$ npm install cnpm -g --registry=https://registry.npm.taobao.org</div><div class="line">npm WARN deprecated has-color@0.1.7: Renamed to supports-color. If you're usingchalk, upgrade to the latest version. https://github.com/chalk/supports-color</div><div class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\l</span>uuman<span class="symbol">\A</span>ppData<span class="symbol">\R</span>oaming<span class="symbol">\n</span>pm<span class="symbol">\c</span>npm -&gt; C:<span class="symbol">\U</span>sers<span class="symbol">\l</span>uuman<span class="symbol">\A</span>ppData<span class="symbol">\R</span>oaming<span class="symbol">\n</span>pm<span class="symbol">\n</span>ode_modules<span class="symbol">\c</span>npm<span class="symbol">\b</span>in<span class="symbol">\c</span>npm</div><div class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\l</span>uuman<span class="symbol">\A</span>ppData<span class="symbol">\R</span>oaming<span class="symbol">\n</span>pm<span class="symbol">\c</span>npm-sync -&gt; C:<span class="symbol">\U</span>sers<span class="symbol">\l</span>uuman<span class="symbol">\A</span>ppData<span class="symbol">\R</span>oaming<span class="symbol">\n</span>pm<span class="symbol">\n</span>ode_modules<span class="symbol">\c</span>npm<span class="symbol">\b</span>in<span class="symbol">\c</span>npm-sync</div><div class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\l</span>uuman<span class="symbol">\A</span>ppData<span class="symbol">\R</span>oaming<span class="symbol">\n</span>pm<span class="symbol">\c</span>npm-user -&gt; C:<span class="symbol">\U</span>sers<span class="symbol">\l</span>uuman<span class="symbol">\A</span>ppData<span class="symbol">\R</span>oaming<span class="symbol">\n</span>pm<span class="symbol">\n</span>ode_modules<span class="symbol">\c</span>npm<span class="symbol">\b</span>in<span class="symbol">\c</span>npm-user</div><div class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\l</span>uuman<span class="symbol">\A</span>ppData<span class="symbol">\R</span>oaming<span class="symbol">\n</span>pm<span class="symbol">\c</span>npm-check -&gt; C:<span class="symbol">\U</span>sers<span class="symbol">\l</span>uuman<span class="symbol">\A</span>ppData<span class="symbol">\R</span>oaming<span class="symbol">\n</span>pm<span class="symbol">\n</span>ode_modules<span class="symbol">\c</span>npm<span class="symbol">\b</span>in<span class="symbol">\c</span>npm-check</div><div class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\l</span>uuman<span class="symbol">\A</span>ppData<span class="symbol">\R</span>oaming<span class="symbol">\n</span>pm<span class="symbol">\c</span>npm-web -&gt; C:<span class="symbol">\U</span>sers<span class="symbol">\l</span>uuman<span class="symbol">\A</span>ppData<span class="symbol">\R</span>oaming<span class="symbol">\n</span>pm<span class="symbol">\n</span>ode_modules<span class="symbol">\c</span>npm<span class="symbol">\b</span>in<span class="symbol">\c</span>npm-web</div><div class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\l</span>uuman<span class="symbol">\A</span>ppData<span class="symbol">\R</span>oaming<span class="symbol">\n</span>pm<span class="symbol">\c</span>npm-doc -&gt; C:<span class="symbol">\U</span>sers<span class="symbol">\l</span>uuman<span class="symbol">\A</span>ppData<span class="symbol">\R</span>oaming<span class="symbol">\n</span>pm<span class="symbol">\n</span>ode_modules<span class="symbol">\c</span>npm<span class="symbol">\b</span>in<span class="symbol">\c</span>npm-doc</div><div class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\l</span>uuman<span class="symbol">\A</span>ppData<span class="symbol">\R</span>oaming<span class="symbol">\n</span>pm<span class="symbol">\c</span>npm-search -&gt; C:<span class="symbol">\U</span>sers<span class="symbol">\l</span>uuman<span class="symbol">\A</span>ppData<span class="symbol">\R</span>oaming<span class="symbol">\n</span>pm<span class="symbol">\n</span>ode_modules<span class="symbol">\c</span>npm<span class="symbol">\b</span>in<span class="symbol">\c</span>npm-search</div><div class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\l</span>uuman<span class="symbol">\A</span>ppData<span class="symbol">\R</span>oaming<span class="symbol">\n</span>pm</div><div class="line">├── abbrev@1.0.9</div><div class="line">├── aproba@1.0.4</div><div class="line">├─┬ cnpm@4.3.1</div><div class="line">│ ├── auto-correct@1.0.0</div><div class="line">│ ├── bagpipe@0.3.5</div></pre></td></tr></table></figure></p>
<h3 id="全局安装gulp"><a href="#全局安装gulp" class="headerlink" title="全局安装gulp"></a>全局安装gulp</h3><p>说明：全局安装gulp目的是为了通过她执行gulp任务；<br>安装：命令提示符执行<figure class="highlight plain"><figcaption><span>install gulp -g```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">查看是否正确安装：命令提示符执行gulp -v，出现版本号即为正确安装。</div></pre></td></tr></table></figure></p>
<p>luuman@luuman-PC MINGW64 /l/自动化<br>$ cnpm -v<br>4.3.1<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 开始全局安装Gulp</div></pre></td></tr></table></figure></p>
<p>luuman@luuman-PC MINGW64 ~<br>$ cnpm install -g gulp</p>
<p>npm WARN deprecated graceful-fs@3.0.8: graceful-fs version 3 and before will fail on newer node releases. Please update to graceful-fs@^4.0.0 as soon as possible.<br>npm WARN deprecated lodash@1.0.2: lodash@<3.0.0 3="" is="" no="" longer="" maintained.="" upgrade="" to="" lodash@^4.0.0.="" npm="" warn="" deprecated="" graceful-fs@1.2.3:="" graceful-fs="" version="" and="" before="" will="" fail="" on="" newer="" node="" releases.="" please="" update="" graceful-fs@^4.0.0="" as="" soon="" possible.="" c:\users\luuman\appdata\roaming\npm\gulp="" -=""> C:\Users\luuman\AppData\Roaming\npm\node_modules\gulp\bin\gulp.js<br>C:\Users\luuman\AppData\Roaming\npm<br>└─┬ gulp@3.9.1<br>  └─┬ gulp-util@3.0.7<br>    ├─┬ dateformat@1.0.12<br>    │ └─┬ meow@3.7.0<br>    │   └─┬ normalize-package-data@2.3.5<br>    │     └─┬ validate-npm-package-license@3.0.1<br>    │       └─┬ spdx-correct@1.0.2<br>    │         └── spdx-license-ids@1.2.1<br>    └─┬ fancy-log@1.2.0<br>      └── time-stamp@1.0.1<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></3.0.0></p>
<p>luuman@luuman-PC MINGW64 /l/Github<br>$ gulp -v</p>
<p>[18:39:18] CLI version 3.9.1</p>
<p>得到gulp的版本号，确认安装成功<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 创建工程</div><div class="line"></div><div class="line">### 演示项目目录结构</div></pre></td></tr></table></figure></p>
<p>└─┬ src — 源文件:<br>    ├──images<br>    ├──scripts<br>    ├──styles<br>├──build — 编译后文件输出到的生产文件夹:<br>├──images<br>├──scripts<br>├──styles</p>
<p>TestProject     (项目名称)<br>|–.git               通过git进行版本控制,项目自动生成这个文件<br>|–node_modules       组件包目录<br>|–dist               发布环境（编译自动生成的）<br>    |–css                 样式文件(style.css style.min.css)<br>    |–images              图片文件(压缩图片\合并后的图片)<br>    |–js                  js文件(main.js main.min.js)<br>    |–index.html          静态页面文件(压缩html)</p>
<p>|–src                开发环境<br>    |–sass                sass文件<br>    |–images              图片文件<br>    |–js                  js文件<br>    |–index.html          静态文件<br>|–gulpfile.js        gulp配置文件<br>|–package.json       依赖模块json文件,在项目目录下npm install会安装项目所有的依赖模块，简化项目的安装程序<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 创建<span class="keyword">package</span>.json</div><div class="line"></div><div class="line">我们先使用npm init来创建类似Nuget <span class="keyword">package</span>的<span class="keyword">package</span>.config一样的文件，这样我们就知道项目依赖哪些插件，而且我们不需要把插件提交到代码库，其它程序员只需要使用 npm install 就可以安装所有配置的插件</div></pre></td></tr></table></figure></p>
<p>$ npm init<br>This utility will walk you through creating a package.json file.<br>It only covers the most common items, and tries to guess sensible defaults.</p>
<p>See <code>npm help json</code> for definitive documentation on these fields<br>and exactly what they do.</p>
<p>Use <code>npm install &lt;pkg&gt; --save</code> afterwards to install a package and<br>save it as a dependency in the package.json file.</p>
<p>Press ^C at any time to quit.<br>name: (test) test                  //名称<br>version: (1.0.0) 1.0.0             //版本<br>description: test description      //描述<br>entry point: (index.js)            //<br>test command:                      //测试代码<br>git repository:                    //Git版本库<br>keywords:                          //关键词<br>author: luuman                     //作者<br>license: (ISC)                     //协议<br>About to write to F:\Gulp\test\package.json:</p>
<p>{<br>  “name”: “test”,<br>  “version”: “1.0.0”,<br>  “description”: “test description”,<br>  “main”: “index.js”,<br>  “scripts”: {<br>    “test”: “echo \”Error: no test specified\” &amp;&amp; exit 1”<br>  },<br>  “author”: “luuman”,<br>  “license”: “ISC”<br>}</p>
<p>Is this ok? (yes)</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 安装插件，加到项目依赖package.json中</div><div class="line"></div><div class="line">npm install gulp --save-dev <span class="comment">//将具体的gulp功能插件局部安装项目下</span></div></pre></td></tr></table></figure>
<p>$ npm install gulp –save-dev</p>
<p>npm WARN deprecated graceful-fs@3.0.8: graceful-fs version 3 and before will fail on newer node releases. Please update to graceful-fs@^4.0.0 as soon as possible.<br>npm WARN deprecated lodash@1.0.2: lodash@<3.0.0 3="" is="" no="" longer="" maintained.="" upgrade="" to="" lodash@^4.0.0.="" npm="" warn="" deprecated="" graceful-fs@1.2.3:="" graceful-fs="" version="" and="" before="" will="" fail="" on="" newer="" node="" releases.="" please="" update="" graceful-fs@^4.0.0="" as="" soon="" possible.="" f:\gulp\new="" └─┬="" gulp@3.9.1="" <figure="" class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">npm install gulp-sass --<span class="built_in">save</span>-<span class="built_in">dev</span> <span class="comment">//将具体的gulp功能插件局部安装项目下</span></div></pre></td></tr></table></3.0.0></p>
<p>$ npm install gulp-sass –save-dev<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 安装gulp功能插件依赖包</div><div class="line"></div><div class="line">npm install gulp-jshint gulp-sass gulp-concat gulp-uglify gulp-rename --save-dev</div><div class="line">gulp功能模块的文件会放在项目所在的目录的./node_modules 下,并在package.json中添加插件名称。</div><div class="line"></div><div class="line"></div><div class="line">### 引入插件包</div></pre></td></tr></table></figure></p>
<p>npm install</p>
<p>当package.json中已经有提示插件依赖包，node.js将会直接下载所有依赖插件包。<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">### 简单的功能：</span></div><div class="line"></div><div class="line">|<span class="string"> 插件 </span>|<span class="string"> 功能 </span>|</div><div class="line">|<span class="string">  ---- </span>|<span class="string"> ---- </span>|</div><div class="line">|<span class="string"> gulp-imagemin:   </span>|<span class="string"> 压缩图片</span></div><div class="line">|<span class="string"> gulp-ruby-sass:  </span>|<span class="string"> 支持sass，安装此版本需要安装ruby</span></div><div class="line">|<span class="string"> gulp-minify-css: </span>|<span class="string"> 压缩css</span></div><div class="line">|<span class="string"> gulp-jshint:     </span>|<span class="string"> 检查js</span></div><div class="line">|<span class="string"> gulp-uglify:     </span>|<span class="string"> 压缩js</span></div><div class="line">|<span class="string"> gulp-concat:     </span>|<span class="string"> 合并文件</span></div><div class="line">|<span class="string"> gulp-rename:     </span>|<span class="string"> 重命名文件</span></div><div class="line">|<span class="string"> gulp-htmlmin:    </span>|<span class="string"> 压缩html</span></div><div class="line">|<span class="string"> gulp-clean:      </span>|<span class="string"> 清空文件夹</span></div><div class="line">|<span class="string"> gulp-livereload: </span>|<span class="string"> 服务器控制客户端同步刷新（需配合chrome插件LiveReload及tiny-lr）</span></div><div class="line"></div><div class="line">#### gulp-jshint</div></pre></td></tr></table></figure></p>
<p>luuman@luuman-PC MINGW64 /f/Gulp/new<br>$ npm install gulp-jshint –save-dev</p>
<p>F:\Gulp\new<br>├─┬ gulp@3.9.1<br>├─┬ gulp-jshint@2.0.0</p>
<p>npm WARN EPEERINVALID gulp-jshint@2.0.0 requires a peer of jshint@2.x but none was installed.<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">### 补充：的前端开发软件环境</span></div><div class="line"></div><div class="line">```text</div><div class="line"><span class="keyword">Node</span>.<span class="title">Js</span>、NPM、Ruby、Java        基础环境</div><div class="line">Sublime + 插件                  用于编写前端代码</div><div class="line">Chrome、Firefox + Firebug       浏览器</div><div class="line">Internet Explorer               进行兼容测试和预览页面UI、动画效果和交互功能</div><div class="line"><span class="keyword">Node</span>.<span class="title">js</span>+Gulp                    进行前端自动化构建、JS语法验证、CSS压缩，图片压缩等；</div><div class="line">Koala                           实时编译Less、Sass、Compass、CoffeeScript;</div><div class="line">Github                          存储自己的代码库 、git或SVN用于版本控制和团队Code Review</div><div class="line">Tomcat、DedeAMPZ、MAMP          进行简单运行环境演示</div><div class="line">Photoshop CC 切图 + Sprites     合并小图标</div><div class="line">XMind                           画出清晰的工作或业务逻辑思维图</div></pre></td></tr></table></figure></p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">新建gulpfile.js 配置文件放在项目根目录下</div><div class="line"></div><div class="line">演示项目目录结构</div><div class="line">testProject     (项目名称)</div><div class="line"><span class="string">|–.git            通过git进行版本控制,项目自动生成这个文件</span></div><div class="line"><span class="string">|–node_modules    组件包目录</span></div><div class="line"><span class="string">|–dist            **发布环境**（编译自动生成的）</span></div><div class="line">    <span class="string">|–css         样式文件(style.css style.min.css)</span></div><div class="line">    <span class="string">|–images  图片文件(压缩图片\合并后的图片)</span></div><div class="line">    <span class="string">|–js      js文件(main.js main.min.js)</span></div><div class="line">    <span class="string">|–index.html  静态页面文件(压缩html)</span></div><div class="line"><span class="string">|–src             **开发环境**</span></div><div class="line">    <span class="string">|–sass                sass文件</span></div><div class="line">    <span class="string">|–images              图片文件</span></div><div class="line">    <span class="string">|–js                  js文件</span></div><div class="line">    <span class="string">|–index.html      静态文件</span></div><div class="line"><span class="string">|–gulpfile.js             gulp配置文件</span></div><div class="line"><span class="string">|–package.json            依赖模块json文件,在项目目录下npm install会安装项目所有的依赖模块，简化项目的安装程序</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">现在，项目文件夹都建好，组件也安装完毕了，我们需要编写gulpfile.js文件以指定gulp需要为我们完成什么任务。</div><div class="line"></div><div class="line">gulpfile.js内容如下：</div><div class="line"></div><div class="line"><span class="comment">// 引入gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 引入组件</span></div><div class="line"><span class="keyword">var</span> jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>);<span class="comment">//检查js</span></div><div class="line"><span class="keyword">var</span> sass   = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);  <span class="comment">//编译Sass</span></div><div class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);<span class="comment">//合并</span></div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);<span class="comment">//uglify 组件（用于压缩 JS）</span></div><div class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);<span class="comment">//重命名</span></div><div class="line"></div><div class="line"><span class="comment">// 检查js脚本的任务</span></div><div class="line">gulp.task(<span class="string">'lint'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'./js/*.js'</span>) <span class="comment">//可配置你需要检查脚本的具体名字。</span></div><div class="line">        .pipe(jshint())</div><div class="line">        .pipe(jshint.reporter(<span class="string">'default'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 编译Sass</span></div><div class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'./scss/*.scss'</span>)</div><div class="line">        .pipe(sass())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./css'</span>));<span class="comment">//dest()写入文件</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 合并，压缩js文件</span></div><div class="line"><span class="comment">// 找到 js/ 目录下的所有 js 文件，压缩，重命名，最后将处理完成的js存放在 dist/js/ 目录下</span></div><div class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'./js/*.js'</span>)</div><div class="line">        .pipe(concat(<span class="string">'all.js'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>))</div><div class="line">        .pipe(rename(<span class="string">'all.min.js'</span>))</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>));</div><div class="line"></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'gulp task is done'</span>);<span class="comment">//自定义提醒信息</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>…. // 其他任务类似</p>
<p>// 定义默认任务,执行gulp会自动执行的任务<br>gulp.task(‘default’, function(){<br>    gulp.run(‘lint’, ‘sass’, ‘scripts’);</p>
<pre><code>// 监听js文件变化，当文件发生变化后会自动执行任务
gulp.watch(&apos;./js/*.js&apos;, function(){
    gulp.run(&apos;lint&apos;,&apos;scripts&apos;);
});
</code></pre><p>});</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">现在，回到命令行窗口，可以直接运行gulp任务了。</div><div class="line"></div><div class="line"><span class="title">gulp</span></div><div class="line"></div><div class="line">这将执行定义的<span class="keyword">default</span>任务，就和以下的命令式同一个意思</div><div class="line"></div><div class="line"><span class="title">gulp</span> <span class="keyword">default</span></div><div class="line"></div><div class="line">当然，我们可以运行在gulpfile.js中定义的任意任务，比如，现在单独运行sass任务：</div><div class="line"></div><div class="line"><span class="title">gulp</span> sass</div></pre></td></tr></table></figure>
<h3 id="编译会显示Finished-如果你的JS有什么不好的地方它会提醒，避免一些不必要的错误，十分贴心"><a href="#编译会显示Finished-如果你的JS有什么不好的地方它会提醒，避免一些不必要的错误，十分贴心" class="headerlink" title="编译会显示Finished,如果你的JS有什么不好的地方它会提醒，避免一些不必要的错误，十分贴心"></a>编译会显示Finished,如果你的JS有什么不好的地方它会提醒，避免一些不必要的错误，十分贴心</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">常见提醒：</div><div class="line"><span class="number">1.</span>禁止在同一行声明多个变量。</div><div class="line"><span class="number">2.</span>请使用 ===/!==来比较true/false或者数值</div><div class="line"><span class="number">3.</span>使用对象字面量替代new Array这种形式</div><div class="line"><span class="number">4.</span>不要使用全局函数。</div><div class="line"><span class="number">5.</span>Switch语句必须带有<span class="section">default</span>分支</div><div class="line"><span class="number">6.</span>函数不应该有时候有返回值，有时候没有返回值。</div><div class="line"><span class="number">7.</span>For循环必须使用大括号</div><div class="line"><span class="number">8.</span>If语句必须使用大括号</div><div class="line"><span class="number">9.</span>for-in循环中的变量 应该使用var关键字明确限定作用域，从而避免作用域污染。</div></pre></td></tr></table></figure>
<h3 id="gulp的插件数量很多，后面还可以根据自己的需要进行添加任务"><a href="#gulp的插件数量很多，后面还可以根据自己的需要进行添加任务" class="headerlink" title="gulp的插件数量很多，后面还可以根据自己的需要进行添加任务"></a>gulp的插件数量很多，后面还可以根据自己的需要进行添加任务</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">常用的gulp插件参考</div><div class="line">gulp-<span class="string">imagemin:</span>      压缩图片</div><div class="line">gulp-ruby-<span class="string">sass:</span>     支持sass，安装此版本需要安装ruby</div><div class="line">gulp-minify-<span class="string">css:</span>    压缩css</div><div class="line">gulp-<span class="string">jshint:</span>        检查js</div><div class="line">gulp-<span class="string">uglify:</span>        压缩js</div><div class="line">gulp-<span class="string">concat:</span>        合并文件</div><div class="line">gulp-<span class="string">rename:</span>        重命名文件</div><div class="line">gulp-<span class="string">htmlmin:</span>       压缩html</div><div class="line">gulp-<span class="string">clean:</span>         清空文件夹</div><div class="line">gulp-<span class="string">livereload:</span>    服务器控制客户端同步刷新（需配合chrome插件LiveReload及tiny-lr）</div></pre></td></tr></table></figure>
<h3 id="gulp-livereload"><a href="#gulp-livereload" class="headerlink" title="gulp-livereload"></a>gulp-livereload</h3><p>npm install gulp gulp-livereload –save-dev<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    livereload = <span class="built_in">require</span>(<span class="string">'gulp-livereload'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;    <span class="comment">// 这里的watch，是自定义的，写成live或者别的也行</span></div><div class="line">    <span class="keyword">var</span> server = livereload();</div><div class="line">    </div><div class="line">    <span class="comment">// app/**/*.*的意思是 app文件夹下的 任何文件夹 的 任何文件</span></div><div class="line">    gulp.watch(<span class="string">'app/**/*.*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">file</span>) </span>&#123;</div><div class="line">        server.changed(file.path);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>命令行下运行<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">gulp watch</span></div></pre></td></tr></table></figure></p>
<h2 id="前端自动化的目的-1"><a href="#前端自动化的目的-1" class="headerlink" title="前端自动化的目的"></a>前端自动化的目的</h2><p><a href="http://www.w3ctrain.com/2015/12/22/gulp-for-beginners/" target="_blank" rel="external">Gulp新手入门教程</a><br><a href="http://mrzhang123.github.io/2016/09/07/gulpUse/" target="_blank" rel="external">基于Gulp的前端自动化工程搭建</a><br>Gulp 自动化你的前端<br><a href="http://www.sheyilin.cn/2016/02/gulp_introduce/" target="_blank" rel="external">http://www.sheyilin.cn/2016/02/gulp_introduce/</a><br><a href="http://gulpjs.com" target="_blank" rel="external">gulp官方网址：</a><br><a href="http://gulpjs.com/plugins" target="_blank" rel="external">gulp插件地址：</a><br><a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md" target="_blank" rel="external">gulp 官方API：</a><br><a href="http://www.ydcss.com/archives/424" target="_blank" rel="external">gulp 中文API：</a><br><a href="http://gruntjs.com" title="The JavaScript Task Runner" target="_blank" rel="external">Gruntjs</a><br><a href="http://www.dbpoo.com/getting-started-with-grunt/" target="_blank" rel="external">Grunt安装及配合组件构建前端开发一体化</a><br><a href="http://www.php100.com/html/it/qianduan/2015/0115/8377.html:" target="_blank" rel="external">grunt前端打包——css篇</a></p>
<p><a href="http:" target="_blank" rel="external">SourceTree</a><br><a href="http:" target="_blank" rel="external">SourceTree</a><br><a href="http://markyun.github.io/2015/The-front-end-code-build-automated-build-environment/" target="_blank" rel="external">UED团队前端自动化构建环境的搭建</a><br><a href="http://www.cnblogs.com/cnblogsfans/p/5104450.html" target="_blank" rel="external">前端构建大法 Gulp 系列 (四)：gulp实战</a></p>
<p>自动刷新<br>建议使用browser-sync<br><a href="http://www.cnblogs.com/anywing/p/5311061.html" target="_blank" rel="external">[gulp入门]gulp-connect浏览器自动刷新</a><br><a href="http://cnodejs.org/topic/53427d16dc556e3b3901861e" target="_blank" rel="external">Gulp.js-livereload 不用F5了，实时自动刷新页面来开发</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    livereload = <span class="built_in">require</span>(<span class="string">'gulp-livereload'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 这里的f5，是自定义的，写成live或者别的也行</span></div><div class="line">gulp.task(<span class="string">'f5'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> server = livereload();</div><div class="line">    <span class="comment">// app/**/*.*的意思是 app文件夹下的 任何文件夹 的 任何文件</span></div><div class="line">    gulp.watch(<span class="string">'app/**/*.*'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>&#123;</div><div class="line">        server.changed(file.path);</div><div class="line">    &#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><a href="http://www.tuicool.com/articles/qyiaInI" target="_blank" rel="external">Gulp构建前端自动化工作流之：入门介绍及LiveReload的使用</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> livereload = <span class="built_in">require</span>(<span class="string">'gulp-livereload'</span>), </div><div class="line">  webserver = <span class="built_in">require</span>(<span class="string">'gulp-webserver'</span>); </div><div class="line"></div><div class="line">gulp.task(<span class="string">'webserver'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  gulp.src( <span class="string">'./'</span> ) <span class="comment">// 服务器目录（./代表根目录）</span></div><div class="line">  .pipe(webserver(&#123; <span class="comment">// 运行gulp-webserver</span></div><div class="line">    livereload: <span class="literal">true</span>, <span class="comment">// 启用LiveReload</span></div><div class="line">    open: <span class="literal">true</span> <span class="comment">// 服务器启动时自动打开网页</span></div><div class="line">  &#125;));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watch'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.watch( <span class="string">'*.html'</span>, [<span class="string">'html'</span>]) <span class="comment">// 监听根目录下所有.html文件</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'webserver'</span>,<span class="string">'watch'</span>]);</div><div class="line"></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line"><span class="comment">// 网页自动刷新（服务器控制客户端同步刷新）</span></div><div class="line">    livereload = <span class="built_in">require</span>(<span class="string">'gulp-livereload'</span>),</div><div class="line"><span class="comment">// 本地服务器</span></div><div class="line">    webserver = <span class="built_in">require</span>(<span class="string">'gulp-webserver'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 注册任务</span></div><div class="line">gulp.task(<span class="string">'webserver'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    gulp.src(<span class="string">'./'</span>)</div><div class="line">    .pipe(webserver(&#123;</div><div class="line">        <span class="attr">livereload</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">open</span>: <span class="literal">true</span>,</div><div class="line">    &#125;))</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 监听f5任务</span></div><div class="line">gulp.task(<span class="string">'f5'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    gulp.watch(<span class="string">'*.html'</span>,[<span class="string">'html'</span>])</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// web任务</span></div><div class="line">gulp.task(<span class="string">'web'</span>,[<span class="string">'webserver'</span>,<span class="string">'f5'</span>])</div></pre></td></tr></table></figure></p>
<h3 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">$ gulp build</div><div class="line">fs.js:<span class="number">856</span></div><div class="line">  return binding.readdir(pathModule._makeLong(path));</div><div class="line">                 ^</div><div class="line">Error: ENOENT: no such file <span class="keyword">or</span> directory, scandir 'L:\自动化\new\node_modules\.<span class="number">3.8</span>.<span class="number">0</span>@<span class="keyword">node</span><span class="title">-sass</span>\vendor'</div><div class="line">    at Error (native)</div><div class="line">    at Object.fs.readdirSync (fs.js:<span class="number">856</span>:<span class="number">18</span>)</div><div class="line">    at Object.getInstalledBinaries (L:\自动化\new\node_modules\.<span class="number">3.8</span>.<span class="number">0</span>@<span class="keyword">node</span><span class="title">-sass</span>\lib\extensions.js:<span class="number">119</span>:<span class="number">13</span>)</div><div class="line">    at foundBinariesList (L:\自动化\new\node_modules\.<span class="number">3.8</span>.<span class="number">0</span>@<span class="keyword">node</span><span class="title">-sass</span>\lib\errors.js:<span class="number">20</span>:<span class="number">15</span>)</div><div class="line">    at foundBinaries (L:\自动化\new\node_modules\.<span class="number">3.8</span>.<span class="number">0</span>@<span class="keyword">node</span><span class="title">-sass</span>\lib\errors.js:<span class="number">15</span>:<span class="number">5</span>)</div><div class="line">    at Object.module.exports.missingBinary (L:\自动化\new\node_modules\.<span class="number">3.8</span>.<span class="number">0</span>@<span class="keyword">node</span><span class="title">-sass</span>\lib\errors.js:<span class="number">45</span>:<span class="number">5</span>)</div><div class="line">    at Object.<span class="tag">&lt;anonymous&gt;</span> (L:\自动化\new\node_modules\.<span class="number">3.8</span>.<span class="number">0</span>@<span class="keyword">node</span><span class="title">-sass</span>\lib\index.js:<span class="number">15</span>:<span class="number">28</span>)</div><div class="line">    at Module._compile (module.js:<span class="number">398</span>:<span class="number">26</span>)</div><div class="line">    at Object.Module._extensions..js (module.js:<span class="number">405</span>:<span class="number">10</span>)</div><div class="line">    at Module.load (module.js:<span class="number">344</span>:<span class="number">32</span>)</div><div class="line"></div><div class="line"></div><div class="line">解决方案是执行以下方法：</div><div class="line">luuman@luuman-PC MINGW64 /l/自动化/new</div><div class="line">$ cnpm rebuild <span class="keyword">node</span><span class="title">-sass</span></div><div class="line"></div><div class="line">&gt; <span class="keyword">node</span><span class="title">-sass</span>@<span class="number">3.8</span>.<span class="number">0</span> install L:\自动化\new\node_modules\gulp-sass\node_modules\<span class="keyword">node</span><span class="title">-sass</span></div><div class="line">&gt; <span class="keyword">node</span> <span class="title">scripts</span>/install.js</div><div class="line"></div><div class="line">Binary downloaded <span class="keyword">and</span> installed at L:\自动化\new\node_modules\.<span class="number">3.8</span>.<span class="number">0</span>@<span class="keyword">node</span><span class="title">-sass</span>\vendor\win32-x64-<span class="number">47</span>\binding.node</div><div class="line"></div><div class="line">&gt; <span class="keyword">node</span><span class="title">-sass</span>@<span class="number">3.8</span>.<span class="number">0</span> postinstall L:\自动化\new\node_modules\gulp-sass\node_modules\<span class="keyword">node</span><span class="title">-sass</span></div><div class="line">&gt; <span class="keyword">node</span> <span class="title">scripts</span>/build.js</div><div class="line"></div><div class="line"><span class="string">"L:\自动化\new\node_modules\.3.8.0@node-sass\vendor\win32-x64-47\binding.node"</span> exists.testing binary.Binary is fine; exiting.</div><div class="line"><span class="keyword">node</span><span class="title">-sass</span>@<span class="number">3.8</span>.<span class="number">0</span> L:\自动化\new\node_modules\gulp-sass\node_modules\<span class="keyword">node</span><span class="title">-sass</span></div></pre></td></tr></table></figure>
<h2 id="使用-gulp-构建一个项目"><a href="#使用-gulp-构建一个项目" class="headerlink" title="使用 gulp 构建一个项目"></a>使用 gulp 构建一个项目</h2><h3 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h3><p>安装完成Gulp之后我就要频繁的使用它，进行代码自动化处理。由于服务来自外国，可以被墙了。<a href="npm.taobao.org" title="这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。">淘宝 NPM 镜像</a></p>
<h3 id="新建文件package-json"><a href="#新建文件package-json" class="headerlink" title="新建文件package.json"></a>新建文件package.json</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">luuman<span class="meta">@luuman</span>-PC MINGW64 <span class="regexp">/l/</span>自动化/Gulp</div><div class="line">$ npm init <span class="comment">//创建package.json</span></div><div class="line"><span class="symbol"></span></div><div class="line">name: (Gulp) test                  <span class="comment">//名称</span></div><div class="line"><span class="string">version:</span> (<span class="number">1.0</span><span class="number">.0</span>) <span class="number">1.0</span><span class="number">.0</span>             <span class="comment">//版本</span></div><div class="line"><span class="string">description:</span> test description      <span class="comment">//描述</span></div><div class="line">entry <span class="string">point:</span> (index.js)            <span class="comment">//</span></div><div class="line">test <span class="string">command:</span>                      <span class="comment">//测试代码</span></div><div class="line">git <span class="string">repository:</span>                    <span class="comment">//Git版本库</span></div><div class="line"><span class="string">keywords:</span>                          <span class="comment">//关键词</span></div><div class="line"><span class="string">author:</span> luuman                     <span class="comment">//作者</span></div><div class="line"><span class="string">license:</span> (ISC)                     <span class="comment">//协议</span></div><div class="line">About to write to <span class="string">L:</span>\自动化\Gulp\<span class="keyword">package</span>.<span class="string">json:</span></div></pre></td></tr></table></figure>
<p>最终会在当前目录中创建 package.json 文件并生成类似如下代码：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"gulp-demo"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"gulp-demo"</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"repository"</span>: &#123;</div><div class="line">    <span class="attr">"type"</span>: <span class="string">"git"</span>,</div><div class="line">    <span class="attr">"url"</span>: <span class="string">"git@github.com:luuman/Game.git"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"keywords"</span>: [</div><div class="line">    <span class="string">"H5"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"author"</span>: <span class="string">"luuman li"</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</div><div class="line">  <span class="attr">"bugs"</span>: &#123;</div><div class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/luuman/Game/issues"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"homepage"</span>: <span class="string">"http://luuman.github.io/Game/"</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="安装gulp依赖包"><a href="#安装gulp依赖包" class="headerlink" title="安装gulp依赖包"></a>安装gulp依赖包</h3><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp --<span class="built_in">save</span>-<span class="built_in">dev</span></div></pre></td></tr></table></figure>
<p>此时打开 package.json 会发现多了如下代码<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"gulp"</span>: <span class="string">"^3.8.11"</span> <span class="comment">//声明此项目的开发依赖 gulp</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="安装gulp功能插件依赖包"><a href="#安装gulp功能插件依赖包" class="headerlink" title="安装gulp功能插件依赖包"></a>安装gulp功能插件依赖包</h3><h4 id="未配置文档"><a href="#未配置文档" class="headerlink" title="未配置文档"></a>未配置文档</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> gulp-uglify gulp-watch-<span class="keyword">path</span> stream-combiner2 gulp-sourcemaps gulp-minify-css gulp-autoprefixer gulp-<span class="keyword">less</span> gulp-ruby-sass gulp-imagemin gulp-util <span class="comment">--save-dev</span></div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">此时，package<span class="selector-class">.json</span> 将会更新</div><div class="line"><span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"colors"</span>: <span class="string">"^1.0.3"</span>,</div><div class="line">    <span class="string">"gulp"</span>: <span class="string">"^3.8.11"</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="已配置文档"><a href="#已配置文档" class="headerlink" title="已配置文档"></a>已配置文档</h4><p>当你将这份 gulpfile.js 配置分享给你的朋友时，就不需要将 node_modules/ 发送给他，他只需在命令行输入<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span></div></pre></td></tr></table></figure></p>
<h3 id="设计目录结构"><a href="#设计目录结构" class="headerlink" title="设计目录结构"></a>设计目录结构</h3><p>我们将文件分为2类，一类是源码，一类是编译压缩后的版本。文件夹分别为 src 和 dist。(注意区分 dist 和 ·dest 的区别)<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">TestProject     (项目名称)</div><div class="line"></div><div class="line"><span class="string">|– .git             通过git进行版本控制,项目自动生成这个文件</span></div><div class="line"><span class="string">|– node_modules     组件包目录</span></div><div class="line"><span class="string">|– dist             **发布环境**（编译自动生成的）</span></div><div class="line">    <span class="string">|– css/         样式文件(style.css style.min.css)</span></div><div class="line">    <span class="string">|– images/      图片文件(压缩图片\合并后的图片)</span></div><div class="line">    <span class="string">|– js/          js文件(main.js main.min.js)</span></div><div class="line">    <span class="string">|– index.html   静态页面文件(压缩html)</span></div><div class="line"><span class="string">|– src              **开发环境**</span></div><div class="line">    <span class="string">|– sass/                *.scss *.sass 文件夹</span></div><div class="line">    <span class="string">|– less/                less文件夹</span></div><div class="line">    <span class="string">|– images/              图片文件夹</span></div><div class="line">    <span class="string">|– fonts/               字体文件夹</span></div><div class="line">    <span class="string">|– js/                  js文件夹</span></div><div class="line">    <span class="string">|– index.html           静态文件</span></div><div class="line"><span class="string">|– gulpfile.js              gulp配置文件</span></div><div class="line"><span class="string">|– package.json             依赖模块json文件,在项目目录下npm install会安装项目所有的依赖模块，简化项目的安装程序</span></div></pre></td></tr></table></figure></p>
<h3 id="gulp-util"><a href="#gulp-util" class="headerlink" title="gulp-util"></a>gulp-util</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> gulp = require(<span class="string">'gulp'</span>)</div><div class="line"><span class="selector-tag">var</span> gutil = require(<span class="string">'gulp-util'</span>)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, function () &#123;</div><div class="line">    gutil.log(<span class="string">'message'</span>)</div><div class="line">    gutil.log(gutil<span class="selector-class">.colors</span><span class="selector-class">.red</span>(<span class="string">'error'</span>))</div><div class="line">    gutil.log(gutil<span class="selector-class">.colors</span><span class="selector-class">.green</span>(<span class="string">'message:'</span>) + <span class="string">"some"</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Browser-Sync自动刷新"><a href="#Browser-Sync自动刷新" class="headerlink" title="Browser Sync自动刷新"></a>Browser Sync自动刷新</h3><p>Browser Sync 帮助我们搭建简单的本地服务器并能实时刷新浏览器，它还能 同时刷新多个设备。</p>
<p>不只是自动刷新<br>BrowserSync并不只是一个自动刷新工具，它还有许多其他功能。默认配置下，BrowserSync会在多个浏览器中同步滚动条位置，表单行为和点击事件。而且可以在不同设备上进行实时浏览文件效果，在局域网里面。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[<span class="number">11</span>:<span class="number">33</span>:<span class="number">17</span>] Finished <span class="string">'dev'</span> after <span class="number">6.07</span> μs</div><div class="line">[BS] Access <span class="string">URLs:</span></div><div class="line"> -------------------------------------</div><div class="line"><span class="symbol">       Local:</span> <span class="string">http:</span><span class="comment">//localhost:3000</span></div><div class="line"><span class="symbol">    External:</span> <span class="string">http:</span><span class="comment">//192.168.1.63:3000</span></div><div class="line"> -------------------------------------</div><div class="line"><span class="symbol">          UI:</span> <span class="string">http:</span><span class="comment">//localhost:3001</span></div><div class="line"> UI <span class="string">External:</span> <span class="string">http:</span><span class="comment">//192.168.1.63:3001</span></div><div class="line"> -------------------------------------</div><div class="line">[BS] Serving files <span class="string">from:</span> dist/</div><div class="line">[BS] Watching files...</div></pre></td></tr></table></figure>
<h3 id="快速拷贝部署文件"><a href="#快速拷贝部署文件" class="headerlink" title="快速拷贝部署文件"></a>快速拷贝部署文件</h3><p>在已经有成熟的gulp构建文件，新建文件夹，将文件gulpfile.js、package.json、src文件夹。</p>
<blockquote>
<p>cnpm install gulp引入gulp<br>gulp install安装插件<br>gulp执行</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;Gulp前端自动化：&lt;/strong&gt;Gulp的高度集成化开发环境，释放了前端开发中大量时间，如css压缩、js压缩、错误检查、合并js、压缩图片、压缩html、模块构造等，只要你能想到的基本都可以通过Gulp插件去实现。&lt;/p&gt;
    
    </summary>
    
      <category term="Plug" scheme="http://luuman.github.io/categories/Plug/"/>
    
    
      <category term="Gulp" scheme="http://luuman.github.io/tags/Gulp/"/>
    
  </entry>
  
</feed>
